{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/uploads/avatar.jpg","path":"uploads/avatar.jpg","modified":0,"renderable":0},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/addtoany.js","path":"js/third-party/addtoany.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/matomo.js","path":"js/third-party/analytics/matomo.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/wavedrom.js","path":"js/third-party/tags/wavedrom.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/HTML Email指南.md","hash":"5bc981d02d63ef64c5ed89c896dacd575de81089","modified":1705303582039},{"_id":"source/_posts/Vite引入cesium最佳实现.md","hash":"27df15dc2713889188f1f971f17007a4c13377d7","modified":1705304645161},{"_id":"source/_posts/Vue3中使用cesium.md","hash":"6839869d15c06392f708d455f17961c573c00ee0","modified":1705304144427},{"_id":"source/_posts/Hexo-Github-page搭建博客.md","hash":"2ef1a89e9b189ae7299d0313db0f1b36daede4bb","modified":1704695319780},{"_id":"source/_posts/cesium加载地形图层.md","hash":"f80f7fb8ddd9cbb69bc213353b06394c2ce123a1","modified":1705304046212},{"_id":"source/_posts/cesium加载地图图层.md","hash":"402e8b4e7d2d47bca9ee7a4e2f213df8b9603406","modified":1705304050840},{"_id":"source/_posts/cesium加载绘制3D模型.md","hash":"1bb1eb61cc71408598449be7ec32d61758c8e672","modified":1705304040982},{"_id":"source/_posts/cesium坐标系转化.md","hash":"1c07371e777e81c6b36b79f9a766a29ff5f8f788","modified":1705304025299},{"_id":"source/_posts/cesium加载矢量数据.md","hash":"64d068b81d0e01b008bcb93e4221664b858ca745","modified":1705304035887},{"_id":"source/_posts/cesium鼠标交互事件.md","hash":"2b26e70ae6b7d2c85c6268cfbe4c5809691b9241","modified":1705304029939},{"_id":"source/_posts/cordova开发环境搭建.md","hash":"9d22714e6dcbadcd550df5adbbd4b4293b5ae1ca","modified":1704695571139},{"_id":"source/_posts/前端项目兼容IE8.md","hash":"255a678993cd8e201e796e6fbd676671e9ba8c38","modified":1705304093324},{"_id":"source/_posts/docker部署vue项目.md","hash":"409fd2dac446b2abf0e1c6a1bf1eb0bad5725d5f","modified":1705304214994},{"_id":"source/_posts/前端代码规范1.0.md","hash":"cfc3a2c779835c8c994f579ccb2c34d207f95a9d","modified":1705306282996},{"_id":"source/_posts/web端自定义截图.md","hash":"fd73aae777ed7df354b6ba56ab45ee79636f02e7","modified":1705304581962},{"_id":"source/_posts/如何规范git-commit提交.md","hash":"41eb65651406f9af8f91efc5c325eff4e0c506c1","modified":1705307297219},{"_id":"source/_posts/局域网搭建npm私服.md","hash":"f4bf2e4203f89f56f2f5a791814fa1393c63ffbb","modified":1705304258820},{"_id":"source/_posts/如何实现鼠标标记和标记渲染功能.md","hash":"61c2c5bf1ccd626fd58244cd52dc62aa998e0544","modified":1705303648259},{"_id":"source/_posts/快速导出网页内容为word文档.md","hash":"963a1b75113cc7d1a46c627a681e9dc58a5b703c","modified":1705303602299},{"_id":"source/_posts/快速构建可视化知识图谱.md","hash":"6edf9ea39929da22f9e8bac5350dfd93d380bf93","modified":1705304342631},{"_id":"source/_posts/移动端Fixed布局下Input-Bug解决.md","hash":"fbd816253be9db7e731f1647e5f9105618941919","modified":1704695512839},{"_id":"source/_posts/部署离线地图.md","hash":"d76292f7b158d94239b62c74e8095495688dbe81","modified":1705543309918},{"_id":"source/_posts/快速构建一个完整的图片标注功能.md","hash":"c4cfc3380ebf05e17421ec57b01669901282bdd8","modified":1705304490524},{"_id":"source/_posts/网页截图功能调研.md","hash":"3d4681212a2e1bb06844876f2ad3ff5f0a9aa572","modified":1705303671811},{"_id":"source/_posts/记一次流水线编译失败引发的一系列问题.md","hash":"76a56f4ac1cfe8a1718a058a12adcd60e65b4a13","modified":1705303729306},{"_id":"source/_posts/零基础运行Cesium地球.md","hash":"e263f5c7048ba1eb3f9c483cb796ad21ce664b49","modified":1705303527073},{"_id":"source/_posts/项目部署到云服务器的过程.md","hash":"b370680731bd429eefbe6661dbb93b54f292c15c","modified":1704695647200},{"_id":"source/uploads/avatar.jpg","hash":"6c9f5435f879701246dfb498ab1680866471c6d1","modified":1704698084616},{"_id":"node_modules/hexo-theme-next/_vendors.yml","hash":"4f6046ceb1470be9ff334ede20b73871c951d845","modified":1704694801248},{"_id":"node_modules/hexo-theme-next/_config.yml","hash":"dc190e9f1cdaf83d8c46ccaf2fae914944b8de1d","modified":1704694801245},{"_id":"node_modules/hexo-theme-next/package.json","hash":"4b48877b223ec717e708540a2df03d64983c02ab","modified":1704694801043},{"_id":"node_modules/hexo-theme-next/languages/ar.yml","hash":"7d0f39e8684284a04bb9808521c87fecda8bd131","modified":1704694801249},{"_id":"node_modules/hexo-theme-next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1704694801060},{"_id":"node_modules/hexo-theme-next/languages/bn.yml","hash":"564bed75da6e05b11dce6164508f97a15e2fb6c2","modified":1704694801250},{"_id":"node_modules/hexo-theme-next/languages/de.yml","hash":"79b37df731c29665dee6cd7c90d278e1edfb6e24","modified":1704694801252},{"_id":"node_modules/hexo-theme-next/languages/eo.yml","hash":"e34bb33ae827bf2f0727088599a73bc64bdad1b0","modified":1704694801253},{"_id":"node_modules/hexo-theme-next/languages/en.yml","hash":"ba0fd79a2b1d8db01a034180556061745965ff05","modified":1704694801252},{"_id":"node_modules/hexo-theme-next/languages/es.yml","hash":"dffc63ef42e1266b88e0acf08994fd17a9908d53","modified":1704694801253},{"_id":"node_modules/hexo-theme-next/languages/fa.yml","hash":"f3ffc444599f4ac92d62e9ed00a1490ebc277d70","modified":1704694801254},{"_id":"node_modules/hexo-theme-next/languages/fr.yml","hash":"8ac44e58f71a38b7697a2f7f98a6971ed818cb5b","modified":1704694801254},{"_id":"node_modules/hexo-theme-next/languages/id.yml","hash":"929df147f4f17d638b07de5fe52ca13e2549ab1c","modified":1704694801255},{"_id":"node_modules/hexo-theme-next/languages/it.yml","hash":"16d716ecfd748def2f6486ef5a82d0ab7ceb4890","modified":1704694801255},{"_id":"node_modules/hexo-theme-next/languages/ja.yml","hash":"543222bfc516aab6c33e8534f807972ecb8943a9","modified":1704694801255},{"_id":"node_modules/hexo-theme-next/languages/ko.yml","hash":"d345a303310c8a5f4836c3683f3580f861ebd1b4","modified":1704694801256},{"_id":"node_modules/hexo-theme-next/languages/pt-BR.yml","hash":"76b8576ce228d540a16b1f0af5af2cce20923194","modified":1704694801257},{"_id":"node_modules/hexo-theme-next/languages/nl.yml","hash":"3cb3687696635ec71b4ca40c5fc43b56acc8843e","modified":1704694801257},{"_id":"node_modules/hexo-theme-next/languages/ru.yml","hash":"c6d8de0ff7d8148d09993257cfd3b7aca755696c","modified":1704694801258},{"_id":"node_modules/hexo-theme-next/languages/pt.yml","hash":"70de366e10ea584ba039d40d6b35ac97f93454ad","modified":1704694801258},{"_id":"node_modules/hexo-theme-next/languages/si.yml","hash":"2d712eedf3f60d04d36c3108cf5a12e2a52e875c","modified":1704694801259},{"_id":"node_modules/hexo-theme-next/languages/th.yml","hash":"6829e998b39f8f143e20b276bb1f62d95a29de58","modified":1704694801259},{"_id":"node_modules/hexo-theme-next/languages/tk.yml","hash":"511726054873f6f8d7ce0d2e803f6731de0ddbe7","modified":1704694801260},{"_id":"node_modules/hexo-theme-next/languages/tr.yml","hash":"a57e4ed089b893a95f5e1ecff17ce625165f4d46","modified":1704694801260},{"_id":"node_modules/hexo-theme-next/languages/uk.yml","hash":"ff537047b4b4c3ca9a7b64fa7f428a9942751eeb","modified":1704694801260},{"_id":"node_modules/hexo-theme-next/languages/vi.yml","hash":"7ebcba5e1128784195e4681dffc9d34c4e873fec","modified":1704694801261},{"_id":"node_modules/hexo-theme-next/languages/zh-HK.yml","hash":"88ea50eeb9097ab4a87a44981a102d8594feb064","modified":1704694801263},{"_id":"node_modules/hexo-theme-next/languages/zh-TW.yml","hash":"4695c87d6b81b3a23d16ad6513d9eaa925f8d8ad","modified":1704694801264},{"_id":"node_modules/hexo-theme-next/languages/zh-CN.yml","hash":"741d7efe0262c9cdc2c648014b55599665d90f6b","modified":1704694801262},{"_id":"node_modules/hexo-theme-next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1704694801052},{"_id":"node_modules/hexo-theme-next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1704694801244},{"_id":"node_modules/hexo-theme-next/README.md","hash":"d6820f46d03a93bd6dc8b10f49f58aec82ad2b06","modified":1704694801060},{"_id":"node_modules/hexo-theme-next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1704694801069},{"_id":"node_modules/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1704694801047},{"_id":"node_modules/hexo-theme-next/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1704694801118},{"_id":"node_modules/hexo-theme-next/layout/post.njk","hash":"0bfce9f133f501a9a4837257e3b862b3bbca15be","modified":1704694801149},{"_id":"node_modules/hexo-theme-next/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1704694801081},{"_id":"node_modules/hexo-theme-next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1704694801049},{"_id":"node_modules/hexo-theme-next/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1704694801153},{"_id":"node_modules/hexo-theme-next/layout/page.njk","hash":"b0660b2af0ac7d3fda14ca4d9f2c9e79ef06c6f9","modified":1704694801136},{"_id":"node_modules/hexo-theme-next/layout/_layout.njk","hash":"fc0a45112f2dcfc2642404e8934ea32a793c3bd7","modified":1704694801063},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1704694801052},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"12a6631617695504d5cf2a94b57d87bd331bef6f","modified":1704694801052},{"_id":"node_modules/hexo-theme-next/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":1704694801107},{"_id":"node_modules/hexo-theme-next/docs/ru/README.md","hash":"29c89a41b371f893e56c87ea61adabc444ec58cc","modified":1704694801056},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/README.md","hash":"12a3e96581964a22b474cc739675d52ef93ff932","modified":1704694801056},{"_id":"node_modules/hexo-theme-next/layout/_partials/comments.njk","hash":"d0c470b0f6690aa217e9ada848c5e2e73fb27c6f","modified":1704694801086},{"_id":"node_modules/hexo-theme-next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1704694801157},{"_id":"node_modules/hexo-theme-next/layout/_partials/footer.njk","hash":"fbf8232cacf0df87e88e74860be66c9f86018302","modified":1704694801095},{"_id":"node_modules/hexo-theme-next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1704694801121},{"_id":"node_modules/hexo-theme-next/layout/_partials/pagination.njk","hash":"bc719473ed5948ab6859449d60b8d36cfc1542b4","modified":1704694801136},{"_id":"node_modules/hexo-theme-next/layout/_macro/post-collapse.njk","hash":"abda600685ee972e1f6b7a2dcc56f13e2daa6263","modified":1704694801139},{"_id":"node_modules/hexo-theme-next/layout/_macro/post.njk","hash":"65e9112fb7eb26d2880db624554a99aca028140b","modified":1704694801149},{"_id":"node_modules/hexo-theme-next/layout/_partials/widgets.njk","hash":"e7f988ecddb2159313699a00827a45eca5622bd4","modified":1704694801157},{"_id":"node_modules/hexo-theme-next/layout/_macro/sidebar.njk","hash":"547c62ab14d9e05d2d9116db9048a677fbe1fb6d","modified":1704694801153},{"_id":"node_modules/hexo-theme-next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1704694801091},{"_id":"node_modules/hexo-theme-next/layout/_third-party/addtoany.njk","hash":"ef64c6bfb8540cd874701236b9be47db2496e98e","modified":1704694801065},{"_id":"node_modules/hexo-theme-next/layout/_third-party/index.njk","hash":"dfd7cdd6ba89f8c3deabc27726c7a350cadafd11","modified":1704694801111},{"_id":"node_modules/hexo-theme-next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1704694801134},{"_id":"node_modules/hexo-theme-next/scripts/events/index.js","hash":"bd9ea82376cd87df611ea3ae077875c7c595a3df","modified":1704694800955},{"_id":"node_modules/hexo-theme-next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1704694801149},{"_id":"node_modules/hexo-theme-next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1704694800905},{"_id":"node_modules/hexo-theme-next/scripts/filters/locals.js","hash":"9eb5310664759931287dd28ea39165dfb67f12ed","modified":1704694800982},{"_id":"node_modules/hexo-theme-next/scripts/filters/post.js","hash":"fdc8a0af90035e89c3fcb754a0eb189b8951a2bc","modified":1704694801026},{"_id":"node_modules/hexo-theme-next/scripts/helpers/engine.js","hash":"d292b78485e8e8055712b0ed6de7cf559c5fbdcd","modified":1704694800919},{"_id":"node_modules/hexo-theme-next/scripts/filters/minify.js","hash":"447db39d17775b2bd18d8af9c9d65b7b8449f751","modified":1704694800993},{"_id":"node_modules/hexo-theme-next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1704694800926},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-config.js","hash":"ead37e9167b682f1fa34b5401c3050e18c7ee4a3","modified":1704694801009},{"_id":"node_modules/hexo-theme-next/scripts/helpers/navigation.js","hash":"78107021101553c3d23e89290f7530b60cf4aa86","modified":1704694801003},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-url.js","hash":"6281d47c1de98eb38f3aa0f6df29bbb19d412173","modified":1704694801015},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-paginator.js","hash":"e86c764b546e4fbb87970cabc4135a56f9ef9fe1","modified":1704694801011},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-vendors.js","hash":"957241c28796ff352de7f4cffba7bb289b043586","modified":1704694801017},{"_id":"node_modules/hexo-theme-next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1704694800857},{"_id":"node_modules/hexo-theme-next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1704694800861},{"_id":"node_modules/hexo-theme-next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1704694800864},{"_id":"node_modules/hexo-theme-next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1704694800966},{"_id":"node_modules/hexo-theme-next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":1704694800989},{"_id":"node_modules/hexo-theme-next/scripts/tags/group-pictures.js","hash":"9ed799c329abf830f623689d7e136991256a24ca","modified":1704694800934},{"_id":"node_modules/hexo-theme-next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1704694801019},{"_id":"node_modules/hexo-theme-next/scripts/tags/index.js","hash":"1f6aba7820f1fb58b61969485148db21846e1aa9","modified":1704694800956},{"_id":"node_modules/hexo-theme-next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1704694800974},{"_id":"node_modules/hexo-theme-next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1704694801021},{"_id":"node_modules/hexo-theme-next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1704694801031},{"_id":"node_modules/hexo-theme-next/scripts/tags/wavedrom.js","hash":"b44dfeeb58b41945d469141787f3dbce4b117d08","modified":1704694801040},{"_id":"node_modules/hexo-theme-next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1704694801039},{"_id":"node_modules/hexo-theme-next/source/css/_colors.styl","hash":"3c6798c10cc220d83481cb3f3782e78558cee789","modified":1704694801161},{"_id":"node_modules/hexo-theme-next/source/css/_mixins.styl","hash":"83647a6207333b9609ba90b0946b3fa9548e6381","modified":1704694801171},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","hash":"921a58577f411cf4eb5cfd66db0a241f8f88578c","modified":1704694801209},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1704694801157},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","hash":"dadc81256afb127b77eac6763d5ee0ec9c77f0a3","modified":1704694801215},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1704694801161},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1704694801157},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1704694800799},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1704694801243},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1704694801243},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1704694800887},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","hash":"745bd828205da7e5fbd3f860cc3697097630f5f3","modified":1704694801007},{"_id":"node_modules/hexo-theme-next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1704694800901},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","hash":"770d63c26f22705311028a36b52e999cc8a2da82","modified":1704694800998},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1704694800885},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1704694800849},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head-unique.njk","hash":"8da52a144060db1a0a088ccb2e6cc8376d1fce70","modified":1704694801099},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","hash":"d775148c2bf20c028622af5609a788167352bf1e","modified":1704694801035},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head.njk","hash":"5388b157bba4a40b9312f4a45c6678974ccf0837","modified":1704694801103},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1704694801029},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/brand.njk","hash":"dd9c4c03e99dfde0dfb8edefcb2c933f2f560efc","modified":1704694801073},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1704694801103},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu-item.njk","hash":"41a8b0cc16f60fa085cb719d07216d86b6bc4bf8","modified":1704694801129},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu.njk","hash":"ee6fc2f111572d3eeab0a2fecbb2d6b3e37ab26b","modified":1704694801131},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/sub-menu.njk","hash":"06480d8ec5f0b87eafd47f082f07968d7282dd5c","modified":1704694801153},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/breadcrumb.njk","hash":"89825e75cc45e9709fa6ba89883669eedaff6f46","modified":1704694801073},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/schedule.njk","hash":"0f4bc8e257da60f77c0c1738607b2bde55810684","modified":1704694801149},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1704694801080},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1704694801135},{"_id":"node_modules/hexo-theme-next/layout/_partials/sidebar/site-overview.njk","hash":"bc5708e38b6070dff0cab6bf9480971017ce4dda","modified":1704694801153},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","hash":"b03ba78c6916ad2f390d55bc1bc18fafb64b0ebf","modified":1704694801023},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1704694801153},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-copyright.njk","hash":"bfff923526d6800218f08dba6ce0bbf5c17755fd","modified":1704694801141},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-meta.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":1704694801142},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-reward.njk","hash":"e8b8a7c41e9ec612d0c0c73419529d55d1c16256","modified":1704694801144},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-followme.njk","hash":"c1e33b4889f75acc490af3c8bde0ec56c518ff41","modified":1704694801141},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-related.njk","hash":"e0986db00a0201dd3c60570f964829c84ba5bc68","modified":1704694801143},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-share.njk","hash":"16696990e4ce65fc8db18c4635082a5d5d06ff07","modified":1704694801145},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":1704694801065},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1704694801107},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":1704694801125},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/cloudflare.njk","hash":"a5b8297c2c383124dd6a56e256ecc0c0dcf489be","modified":1704694801084},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1704694801073},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1704694801099},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1704694801099},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/index.njk","hash":"f900306497b133e8b098bd9f4b96b93d1d96c185","modified":1704694801110},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1704694801082},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/umami.njk","hash":"3343750682fbd8535e50f8129be3003ad26015b4","modified":1704694801153},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1704694801088},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"9dc00fcb0a05899f048eace9f9160b78956655d5","modified":1704694801133},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/matomo.njk","hash":"4e89648a8ec8194c5823064cbca39c938a799006","modified":1704694801128},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1704694801097},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1704694801119},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1704694801087},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1704694801124},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1704694801083},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/plausible.njk","hash":"ef9f2bb7110507f1c4336800af9157d5fa9765bd","modified":1704694801138},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1704694801157},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1704694801153},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/katex.njk","hash":"1ebf658690468ea197bdd0416eb7cfa4bd0b083a","modified":1704694801120},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1704694801111},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1704694801126},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1704694801137},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1704694801125},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1704694801132},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1704694801091},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1704694801078},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/wavedrom.njk","hash":"02202bf563fb5eedde2ccad4d6c5b9109d30a703","modified":1704694801157},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":1704694801069},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1704694801116},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1704694800950},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/config.js","hash":"9ec51eb61f7fee612ffc5252f489003a0fa301fc","modified":1704694800897},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1704694801122},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1704694800959},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/navigation.js","hash":"dd3562686d95a50375e6fd32e717ccb0d99c1e3d","modified":1704694801003},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/changyan.js","hash":"5798cfc8f63665031dd3e01debed051628cec319","modified":1704694800870},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/utils.js","hash":"6853e5433e3eaa19ea43fa20b08d956ba4cec4ac","modified":1704694801034},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/vendors.js","hash":"464db1e7182e5b9cdbd32e8b5368d5e683b1d9c7","modified":1704694801038},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/common.js","hash":"19a402a225c31edffc50f202a14e0d582d3db23e","modified":1704694800889},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1704694800901},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqusjs.js","hash":"a600a98e7436edeb31e291abca359885567df3c9","modified":1704694800909},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1704694800905},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1704694800927},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1704694801036},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1704694800959},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1704694800974},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1704694801191},{"_id":"node_modules/hexo-theme-next/source/css/_variables/base.styl","hash":"c4fc4e862d09221265ab1466085f057be2ad2e4d","modified":1704694801181},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"48f4f277946a168d0db1ea02804e85c22ca2c7db","modified":1704694801219},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1704694801213},{"_id":"node_modules/hexo-theme-next/source/js/third-party/addtoany.js","hash":"5276c8f78ee562a8965216dc67d762e59cb4a9f2","modified":1704694800824},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Mist.styl","hash":"a1418c9dc8c0f1a0ad4ded0f4627c45bf0db1a10","modified":1704694801209},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1704694801020},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","hash":"ba7ba2c129d1f240c6a22cec3e53f3f22af64b6b","modified":1704694800999},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"7664491542046df9a3887cf40a06e00c0b4086a9","modified":1704694801177},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/index.styl","hash":"2298e521253b3bf376a2412271bc2a7d305051f3","modified":1704694801193},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1704694801227},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","hash":"819f382c561fe5ec23c67cc5fabd63dd1cc22dc1","modified":1704694800921},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1704694801198},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/mobile.styl","hash":"1dbf2c339adcd27026c3a2ded32ee91ce08cea26","modified":1704694801209},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"d0a7c99095f490b0d2ed6b1be43d435960798cec","modified":1704694801178},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1704694801187},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1704694801215},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1704694801186},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1704694801202},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1704694801239},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/pagination.styl","hash":"f4228c759db4a650c8d38745c2edd1dc83c45687","modified":1704694801219},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1704694801027},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_layout.styl","hash":"fa4fd8f76464e214fb7318f325b13c2b62f4b478","modified":1704694801168},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"fb550935d374e0bdf1097fce187337dc05cad3e1","modified":1704694801169},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/toggles.styl","hash":"782ee1fc5e669d3ddbfeb82b73ad7fe561f1a4fb","modified":1704694801242},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"dafc6d23c80d6fe3e55a7711e94210d2479b629a","modified":1704694801164},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1704694801206},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"9dfe853c901bdc52fc950bacdf15484dbb9bf140","modified":1704694801206},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_header.styl","hash":"3fbfab591f280e2e7f3b0265901c93bc4bd137ed","modified":1704694801165},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"6569a6640f79d247a8235b3914772c0e2f99ead2","modified":1704694801168},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_posts-expand.styl","hash":"485d23ccb42c0d0c8ead7ea8930dd3e06d79a285","modified":1704694801172},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1704694801174},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_header.styl","hash":"ac2dc0ce9c775a83ef7132ae957b54539366ac9c","modified":1704694801167},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"82cda756f5b7092df2eee6641b9786df71623bdb","modified":1704694801170},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1704694801206},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":1704694801170},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"26a0cba1eee5de45a45a5e14e17707f905390512","modified":1704694801169},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sidebar.styl","hash":"547c0b5cd5e7ea10d21863d13a6b16579a49396c","modified":1704694801173},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"91dbf3ca5c3a613d4e30618c120da535bf2d0336","modified":1704694801173},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1704694801206},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1704694801175},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1704694800882},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1704694801032},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1704694800941},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1704694800989},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","hash":"def07bcc7c17d8a0caad177fb1dd2f3a5e5b3536","modified":1704694800930},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1704694800844},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1704694800876},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1704694800959},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1704694800909},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1704694800974},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1704694800916},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1704694801037},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1704694800965},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1704694800928},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1704694800980},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1704694800984},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1704694800836},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1704694801022},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/wavedrom.js","hash":"40dcd10df6edf124088c329346e0cc0bdac74ef1","modified":1704694801042},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/index.styl","hash":"098d4bd034e986fcf7e443eac4fc2193935461b7","modified":1704694801195},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1704694800925},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-body.styl","hash":"56d5b7ff73f466c9ae54f7204ae899281295d749","modified":1704694801219},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1704694800970},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","hash":"6bf821310342c5b87a631873e7650a475a0765f1","modified":1704694800993},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-followme.styl","hash":"1ecfd64507954810b07a9d21fb5305b5378feda0","modified":1704694801223},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"7369928305330c73ae0b3f063a681a8384d8fde4","modified":1704694801219},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1704694801223},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-footer.styl","hash":"11497388f124bfbb4001495a67d3629a9f618405","modified":1704694801223},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1704694801223},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-header.styl","hash":"1191f1bfa5c43e54be8e5b3cc0d802984e161747","modified":1704694801223},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"04cf4a69537fc14d3b8904f965d283356853847f","modified":1704694801223},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"ebfba158a0a4af3d1dabcacbc58986664de52140","modified":1704694801223},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1704694801186},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1704694801227},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1704694801185},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1704694801194},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1704694801241},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/footer/index.styl","hash":"4e967702cf4c637132346bc74ec8854426f1a68c","modified":1704694801198},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/disqusjs.styl","hash":"877a537d5b95beb048142e4fdee6f17e6ef9c7bb","modified":1704694801190},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/index.styl","hash":"54d12e2c5d9982f7b9e5b23be5133954a8514e9d","modified":1704694801196},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"8f094c4ac17e2ab45569b12d157747f9c7333c12","modified":1704694801191},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1704694801209},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/search.styl","hash":"e72799ce3f9b79753e365b2f8c8ef6c310668d4a","modified":1704694801230},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1704694801242},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/index.styl","hash":"da5e88f8debd5ac8d7af5c6ba6240df66104955f","modified":1704694801202},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/related-posts.styl","hash":"b05908f04ef95f2d91e6eba89b12411c378d050f","modified":1704694801227},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1704694801232},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"0847400d8579b0a2dd1bf662c78954c10adf2680","modified":1704694801231},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"c6a27beb3f741211a14576026f3b4cfc44cc6407","modified":1704694801233},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"46eece42510c2c89bb9209afb0262ad76a4b0b36","modified":1704694801233},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"24752d145c6fb8f5344dca9c7b9640839c02e009","modified":1704694801234},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"9a7c71560fbdc936ad4e736fe15063ea3e8a644b","modified":1704694801235},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"c2e354a565c8c1b32bd0ceacc972b17982758b67","modified":1704694801235},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1704694801238},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/index.styl","hash":"138f78147bc6bd6005f329ada34dc79b7625542d","modified":1704694801202},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/fold.styl","hash":"42a0b65491ad85438596b3fe0b7f23973e4cef34","modified":1704694801190},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1704694801182},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/index.styl","hash":"22cd37bd5df9972d5074710896aba4424ad5161c","modified":1704694801202},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f634f94828620e88c3f5a8db56f7944f6ba232b0","modified":1704694801188},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1704694801193},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1704694801209},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1704694801219},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1704694801206},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7f8a7345e6537a62cd9e9a94c8f7065b541d9b04","modified":1704694801206},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/tabs.styl","hash":"33dd6ad015dde65fd46f34961655442e8e82b52e","modified":1704694801240},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/note.styl","hash":"98d4c20aff0f0fcfe1824017fb06ab21ef0d218e","modified":1704694801215},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/wavedrom.styl","hash":"af113411ad9cca7674177be36af8dd399680834d","modified":1704694801243},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1704694801184},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1704694801192},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/menu.styl","hash":"bbbc40b03cb299d2a6a568f329b2ce98e1cdc430","modified":1704694801209},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/index.styl","hash":"6e0d0796ef7fbbb62ffdfb448753a850de82c74f","modified":1704694801198},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-meta.styl","hash":"a851e9d5aefcd027c95eeb323860b6da70f202d1","modified":1704694801236},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1704694801237},{"_id":"source/_posts/如何在离线环境查看echarts文档.md","hash":"e143763cb6902a5fa261df71a758b3760ae09ae5","modified":1709776871292}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Email指南","date":"2023-03-03T06:09:45.000Z","_content":"\n如何发送一个html格式的邮件给用户呢？\n\n1.手动编写html格式的邮件，几乎所有邮箱都支持，这里以阿里邮箱举例，点击源码后就可以直接编写html，然后发送\n\n![null](https://s2.loli.net/2024/01/08/HqQbn19Fxl25NTJ.png)![null](https://s2.loli.net/2024/01/08/D9S1odvlCApcP28.png)\n\n![null](https://s2.loli.net/2024/01/08/KAUL6Zv1OMCWiTG.png)\n\n这种方式只适用于单个内容发送。而批量动态的发送就需要用到第二种方式\n\n2.自动发送\n\n前端提供一个或多个模板给后端，后端使用发送服务自动发送html邮件给用户\n\n好了，两种方式的细节我们不去深究，把目光放到html模板和手动编写html上来。\n\n那么，我们是不是可以直接正常的编写html文档作为模板呢？答案是否定的，各个邮箱对html支持程度各不相同，同样一份html文档在某些邮箱里正常显示而在某些邮箱却只能展示部分。所以为了兼容性，我们需要遵守一些基本规范。具体可参考一下说明。\n\n[链接](http://www.ruanyifeng.com/blog/2013/06/html_email.html)\n\n[链接](https://www.cnblogs.com/yjzhu/archive/2012/11/05/2755155.html)\n\n注：由于不支持js和script标签，所以那怕基本的交互都会失效\n\n基于这些准则，我们可以编写一个兼容绝大数邮箱的html邮件。\n\n也可以使用一些现成的框架和模板，比如[mjml](https://mjml.io/) 和 [emailiframe](https://emailframe.work/)\n\n使用阿里、腾讯、网易邮箱分别对mjml框架进行测试，主要试验了手风琴和图片轮播器两个交互，支持度如下\n\n| 框架 | 支持度                                                       | 说明                                               |\n| ---- | ------------------------------------------------------------ | -------------------------------------------------- |\n| 阿里 | 低![null](https://s2.loli.net/2024/01/08/ARlS7fEG9srIdzX.png) | 完全不支持交互，甚至由于交互丢失有部分内容无法展示 |\n| 腾讯 | 中![null](https://s2.loli.net/2024/01/08/up1s4Teo6OHKzbt.png) | 支持部分交互，但是显示不友好                       |\n| 网易 | 高![null](https://s2.loli.net/2024/01/08/5L9VIUPqkhrTJAb.png) | 基本支持                                           |\n\n由此判定那怕使用现有框架也无法做到完全兼容交互功能，所以html邮件推荐不是使用交互，全部交互都走链接跳转。","source":"_posts/HTML Email指南.md","raw":"---\ntitle: Email指南\ndate: 2023-03-03 14:09:45\ntags:\n    - web\n    - email\n---\n\n如何发送一个html格式的邮件给用户呢？\n\n1.手动编写html格式的邮件，几乎所有邮箱都支持，这里以阿里邮箱举例，点击源码后就可以直接编写html，然后发送\n\n![null](https://s2.loli.net/2024/01/08/HqQbn19Fxl25NTJ.png)![null](https://s2.loli.net/2024/01/08/D9S1odvlCApcP28.png)\n\n![null](https://s2.loli.net/2024/01/08/KAUL6Zv1OMCWiTG.png)\n\n这种方式只适用于单个内容发送。而批量动态的发送就需要用到第二种方式\n\n2.自动发送\n\n前端提供一个或多个模板给后端，后端使用发送服务自动发送html邮件给用户\n\n好了，两种方式的细节我们不去深究，把目光放到html模板和手动编写html上来。\n\n那么，我们是不是可以直接正常的编写html文档作为模板呢？答案是否定的，各个邮箱对html支持程度各不相同，同样一份html文档在某些邮箱里正常显示而在某些邮箱却只能展示部分。所以为了兼容性，我们需要遵守一些基本规范。具体可参考一下说明。\n\n[链接](http://www.ruanyifeng.com/blog/2013/06/html_email.html)\n\n[链接](https://www.cnblogs.com/yjzhu/archive/2012/11/05/2755155.html)\n\n注：由于不支持js和script标签，所以那怕基本的交互都会失效\n\n基于这些准则，我们可以编写一个兼容绝大数邮箱的html邮件。\n\n也可以使用一些现成的框架和模板，比如[mjml](https://mjml.io/) 和 [emailiframe](https://emailframe.work/)\n\n使用阿里、腾讯、网易邮箱分别对mjml框架进行测试，主要试验了手风琴和图片轮播器两个交互，支持度如下\n\n| 框架 | 支持度                                                       | 说明                                               |\n| ---- | ------------------------------------------------------------ | -------------------------------------------------- |\n| 阿里 | 低![null](https://s2.loli.net/2024/01/08/ARlS7fEG9srIdzX.png) | 完全不支持交互，甚至由于交互丢失有部分内容无法展示 |\n| 腾讯 | 中![null](https://s2.loli.net/2024/01/08/up1s4Teo6OHKzbt.png) | 支持部分交互，但是显示不友好                       |\n| 网易 | 高![null](https://s2.loli.net/2024/01/08/5L9VIUPqkhrTJAb.png) | 基本支持                                           |\n\n由此判定那怕使用现有框架也无法做到完全兼容交互功能，所以html邮件推荐不是使用交互，全部交互都走链接跳转。","slug":"HTML Email指南","published":1,"updated":"2024-01-15T07:26:22.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrq64z5y0000soip2fqq250b","content":"<p>如何发送一个html格式的邮件给用户呢？</p>\n<p>1.手动编写html格式的邮件，几乎所有邮箱都支持，这里以阿里邮箱举例，点击源码后就可以直接编写html，然后发送</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/HqQbn19Fxl25NTJ.png\" alt=\"null\"><img src=\"https://s2.loli.net/2024/01/08/D9S1odvlCApcP28.png\" alt=\"null\"></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/KAUL6Zv1OMCWiTG.png\" alt=\"null\"></p>\n<p>这种方式只适用于单个内容发送。而批量动态的发送就需要用到第二种方式</p>\n<p>2.自动发送</p>\n<p>前端提供一个或多个模板给后端，后端使用发送服务自动发送html邮件给用户</p>\n<p>好了，两种方式的细节我们不去深究，把目光放到html模板和手动编写html上来。</p>\n<p>那么，我们是不是可以直接正常的编写html文档作为模板呢？答案是否定的，各个邮箱对html支持程度各不相同，同样一份html文档在某些邮箱里正常显示而在某些邮箱却只能展示部分。所以为了兼容性，我们需要遵守一些基本规范。具体可参考一下说明。</p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2013/06/html_email.html\">链接</a></p>\n<p><a href=\"https://www.cnblogs.com/yjzhu/archive/2012/11/05/2755155.html\">链接</a></p>\n<p>注：由于不支持js和script标签，所以那怕基本的交互都会失效</p>\n<p>基于这些准则，我们可以编写一个兼容绝大数邮箱的html邮件。</p>\n<p>也可以使用一些现成的框架和模板，比如<a href=\"https://mjml.io/\">mjml</a> 和 <a href=\"https://emailframe.work/\">emailiframe</a></p>\n<p>使用阿里、腾讯、网易邮箱分别对mjml框架进行测试，主要试验了手风琴和图片轮播器两个交互，支持度如下</p>\n<table>\n<thead>\n<tr>\n<th>框架</th>\n<th>支持度</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>阿里</td>\n<td>低<img src=\"https://s2.loli.net/2024/01/08/ARlS7fEG9srIdzX.png\" alt=\"null\"></td>\n<td>完全不支持交互，甚至由于交互丢失有部分内容无法展示</td>\n</tr>\n<tr>\n<td>腾讯</td>\n<td>中<img src=\"https://s2.loli.net/2024/01/08/up1s4Teo6OHKzbt.png\" alt=\"null\"></td>\n<td>支持部分交互，但是显示不友好</td>\n</tr>\n<tr>\n<td>网易</td>\n<td>高<img src=\"https://s2.loli.net/2024/01/08/5L9VIUPqkhrTJAb.png\" alt=\"null\"></td>\n<td>基本支持</td>\n</tr>\n</tbody></table>\n<p>由此判定那怕使用现有框架也无法做到完全兼容交互功能，所以html邮件推荐不是使用交互，全部交互都走链接跳转。</p>\n","site":{"data":{}},"length":491,"excerpt":"","more":"<p>如何发送一个html格式的邮件给用户呢？</p>\n<p>1.手动编写html格式的邮件，几乎所有邮箱都支持，这里以阿里邮箱举例，点击源码后就可以直接编写html，然后发送</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/HqQbn19Fxl25NTJ.png\" alt=\"null\"><img src=\"https://s2.loli.net/2024/01/08/D9S1odvlCApcP28.png\" alt=\"null\"></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/KAUL6Zv1OMCWiTG.png\" alt=\"null\"></p>\n<p>这种方式只适用于单个内容发送。而批量动态的发送就需要用到第二种方式</p>\n<p>2.自动发送</p>\n<p>前端提供一个或多个模板给后端，后端使用发送服务自动发送html邮件给用户</p>\n<p>好了，两种方式的细节我们不去深究，把目光放到html模板和手动编写html上来。</p>\n<p>那么，我们是不是可以直接正常的编写html文档作为模板呢？答案是否定的，各个邮箱对html支持程度各不相同，同样一份html文档在某些邮箱里正常显示而在某些邮箱却只能展示部分。所以为了兼容性，我们需要遵守一些基本规范。具体可参考一下说明。</p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2013/06/html_email.html\">链接</a></p>\n<p><a href=\"https://www.cnblogs.com/yjzhu/archive/2012/11/05/2755155.html\">链接</a></p>\n<p>注：由于不支持js和script标签，所以那怕基本的交互都会失效</p>\n<p>基于这些准则，我们可以编写一个兼容绝大数邮箱的html邮件。</p>\n<p>也可以使用一些现成的框架和模板，比如<a href=\"https://mjml.io/\">mjml</a> 和 <a href=\"https://emailframe.work/\">emailiframe</a></p>\n<p>使用阿里、腾讯、网易邮箱分别对mjml框架进行测试，主要试验了手风琴和图片轮播器两个交互，支持度如下</p>\n<table>\n<thead>\n<tr>\n<th>框架</th>\n<th>支持度</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>阿里</td>\n<td>低<img src=\"https://s2.loli.net/2024/01/08/ARlS7fEG9srIdzX.png\" alt=\"null\"></td>\n<td>完全不支持交互，甚至由于交互丢失有部分内容无法展示</td>\n</tr>\n<tr>\n<td>腾讯</td>\n<td>中<img src=\"https://s2.loli.net/2024/01/08/up1s4Teo6OHKzbt.png\" alt=\"null\"></td>\n<td>支持部分交互，但是显示不友好</td>\n</tr>\n<tr>\n<td>网易</td>\n<td>高<img src=\"https://s2.loli.net/2024/01/08/5L9VIUPqkhrTJAb.png\" alt=\"null\"></td>\n<td>基本支持</td>\n</tr>\n</tbody></table>\n<p>由此判定那怕使用现有框架也无法做到完全兼容交互功能，所以html邮件推荐不是使用交互，全部交互都走链接跳转。</p>\n"},{"title":"Hexo-Github-page搭建博客","date":"2019-07-22T05:53:06.000Z","_content":"\n# 前言\n\n前段时间对个人博客很感兴趣，而我这人又有点心血来潮，想干什么就一点要做，于是决定自己动手丰衣足食，顺便整理下，方便以后查看。\n\n博客有第三方平台，也可以自建，比较早的博客园、CSDN，近几年新兴的也比较多诸如：WordPress、segmentFault、简书、掘金、知乎专栏、Github Page 等等。\n\n综合考虑成本和个性化两方面，我采用了 Githb Page + Hexo 搭建个人博客的方式。Hexo 是使用 nodejs 编写的一个静态博客生成工具，而 Github Page 是 Github 提供的一种免费的静态网页托管服务，支持 Jekyll、Hugo、Hexo 编译静态资源。\n\nLet's Go ~\n\n# 准备环境\n\n准备 node 和 git 环境，\n首先，安装 [node.js](\"https://nodejs.org/en/\")，因为 Hexo 是基于 node.js 服务的博客框架。\n\n后然安装[git](\"https://git-scm.com/\")，一个免费开源的分布式版本控制系统，具体内容网上有详细介绍，这里就不过多说明。\n\n安装成功后打开命令行终端，在终端中输入以下命令验证是否安装成功。\n\n```\n  node -v\n  npm -v\n  git version\n```\n\n# 安装 Hexo\n\nnode 和 git 安装成功后就可以安装 Hexo。\n在命令行输入执行以下命令:\n\n```\n  npm install -g hexo-cli\n```\n\n安装完成后，再次执行下列命令，查看是否安装成功。\n\n```\n  hexo version\n```\n\n下面开始创建博客\n\n```\n  hexo init blog\n  cd blog\n  npm install\n```\n\n创建完成，文件夹目录如下：\n\n```\n  .\n  ├── _config.yml # 网站的配置信息，您可以在此配置大部分的参数。\n  ├── package.json\n  ├── scaffolds # 模版文件夹\n  ├── source  # 资源文件夹，除 _posts 文件，其他以下划线_开头的文件或者文件夹不会被编译打包到public文件夹\n  |   └── _posts # 文章Markdowm文件\n  └── themes  # 主题文件夹\n```\n\n如果之前的命令都没有报错的话，那么恭喜，博客创建成功啦！！！运行 hexo server，也可以直接运行 hexo s，没有报错的话，在浏览器中输入 http://localhost:4000 回车就可以看到预览效果了。\n\n```\n  hexo server\n```\n\nOK，你的本地博客已经搭建成功，下面就是部署到 Github Page 了。\n\n# 创建 Github page\n\n注册登录略过，不会自行百度。\n\n点击 Start project 或者下面的 new repository 创建一个新的仓库\n\n**_注意：Github 仅能使用一个同名仓库的代码托管一个静态站点。_**\n\n**这里有个硬性规定就是仓库名一定是 用户名.github.io，比如我的用户名为 YangChen0930，那么仓库名就是 YangChen0930.github.io。**\n\n创建完成后，点击 Settings 设置远程仓库，找到 Github Page， 可以看到 Github Pages 已经被启用，同时资源正在从 **master** 分支构建。\n\n输入 用户名.github.io 地址测试 Github page 是否创建成功。当然目前页面是没有内容的。\n\n下面要做的就是同步本地创建的博客到 github 仓库\n\n# 部署到 Github\n\n可以直接查看官网的[部署](\"https://hexo.io/zh-cn/docs/deployment\")教程\n\n第一步:修改项目根目录下的\\_config.yml 配置文件配置参数。\n\n```\n  deploy:\n  - type: git\n    repo: url\n    branch: master (默认)\n```\n\n也可同时部署到多个仓库\n\n```\n  deploy:\n  - type: git\n    repo:\n  - type: heroku\n    repo:\n```\n\n第二步: 安装部署插件 hexo-deployer-git\n\n```\n  npm install hexo-deployer-git --save\n```\n\n最后生成文件部署上传\n\n```\n  hexo generate # 生成静态文件\n  hexo deploy # 部署\n  或\n  hexo generate --deploy # 简写 hexo g -d\n```\n\n上传完成， 在浏览器访问：http://用户名.github.io 就可以看到自己的博客了。\n\n# 新增博客\n\n博客搭好了，目前只有一篇默认的 hello-world 文章，现在开始写我们自己的文章，这里简单介绍下流程，具体文档可以看 hexo 官网。\n\n```\nhexo new '文章标题'\n```\n\n执行完成后可以在/source/\\_posts 下看到一个新增的 \"文章标题.md\" 的文件。.md 是 Markdown 格式的文件，语法比较简单，可以到网上找找。\n\n在 Markdown 文件里编写自己的文章内容，保存。\n\n再执行一下下面的命令\n\n```\n  hexo generate\n```\n\n```\n  hexo server\n```\n\n就可以在本地预览新增的博客了。\n\n最后，只要同步部署到 Github 上就行了\n\n```\n  hexo clean\n```\n\n```\n  hexo generate --deploy\n```\n\n部署前应该先执行 hexo clean 命令，清除缓存文件和已生成的静态文件。如果出现更改内容（尤其是换主题后）无论怎样都不生效时，可能就是没有运行该命令。\n\n此外，还可以通过 hexo new draf \"文章标题\" 生成草稿文件，生成后会在/source/\\_drafs 里看到新增的草稿文件。可通过 `publish`命令将草稿移动到/source/\\_post 文件夹。\n\n```\n  hexo publish [layout] <title>\n```\n\n# 切换主题\n\n在 hexo 官网或则网上都可以找自己喜欢的主题，我现在使用的是 next 主题。一般主题都有使用文档，你可以根据说明文档修改相应的配置。\n","source":"_posts/Hexo-Github-page搭建博客.md","raw":"---\ntitle: Hexo-Github-page搭建博客\ndate: 2019-07-22 13:53:06\ntags:\n---\n\n# 前言\n\n前段时间对个人博客很感兴趣，而我这人又有点心血来潮，想干什么就一点要做，于是决定自己动手丰衣足食，顺便整理下，方便以后查看。\n\n博客有第三方平台，也可以自建，比较早的博客园、CSDN，近几年新兴的也比较多诸如：WordPress、segmentFault、简书、掘金、知乎专栏、Github Page 等等。\n\n综合考虑成本和个性化两方面，我采用了 Githb Page + Hexo 搭建个人博客的方式。Hexo 是使用 nodejs 编写的一个静态博客生成工具，而 Github Page 是 Github 提供的一种免费的静态网页托管服务，支持 Jekyll、Hugo、Hexo 编译静态资源。\n\nLet's Go ~\n\n# 准备环境\n\n准备 node 和 git 环境，\n首先，安装 [node.js](\"https://nodejs.org/en/\")，因为 Hexo 是基于 node.js 服务的博客框架。\n\n后然安装[git](\"https://git-scm.com/\")，一个免费开源的分布式版本控制系统，具体内容网上有详细介绍，这里就不过多说明。\n\n安装成功后打开命令行终端，在终端中输入以下命令验证是否安装成功。\n\n```\n  node -v\n  npm -v\n  git version\n```\n\n# 安装 Hexo\n\nnode 和 git 安装成功后就可以安装 Hexo。\n在命令行输入执行以下命令:\n\n```\n  npm install -g hexo-cli\n```\n\n安装完成后，再次执行下列命令，查看是否安装成功。\n\n```\n  hexo version\n```\n\n下面开始创建博客\n\n```\n  hexo init blog\n  cd blog\n  npm install\n```\n\n创建完成，文件夹目录如下：\n\n```\n  .\n  ├── _config.yml # 网站的配置信息，您可以在此配置大部分的参数。\n  ├── package.json\n  ├── scaffolds # 模版文件夹\n  ├── source  # 资源文件夹，除 _posts 文件，其他以下划线_开头的文件或者文件夹不会被编译打包到public文件夹\n  |   └── _posts # 文章Markdowm文件\n  └── themes  # 主题文件夹\n```\n\n如果之前的命令都没有报错的话，那么恭喜，博客创建成功啦！！！运行 hexo server，也可以直接运行 hexo s，没有报错的话，在浏览器中输入 http://localhost:4000 回车就可以看到预览效果了。\n\n```\n  hexo server\n```\n\nOK，你的本地博客已经搭建成功，下面就是部署到 Github Page 了。\n\n# 创建 Github page\n\n注册登录略过，不会自行百度。\n\n点击 Start project 或者下面的 new repository 创建一个新的仓库\n\n**_注意：Github 仅能使用一个同名仓库的代码托管一个静态站点。_**\n\n**这里有个硬性规定就是仓库名一定是 用户名.github.io，比如我的用户名为 YangChen0930，那么仓库名就是 YangChen0930.github.io。**\n\n创建完成后，点击 Settings 设置远程仓库，找到 Github Page， 可以看到 Github Pages 已经被启用，同时资源正在从 **master** 分支构建。\n\n输入 用户名.github.io 地址测试 Github page 是否创建成功。当然目前页面是没有内容的。\n\n下面要做的就是同步本地创建的博客到 github 仓库\n\n# 部署到 Github\n\n可以直接查看官网的[部署](\"https://hexo.io/zh-cn/docs/deployment\")教程\n\n第一步:修改项目根目录下的\\_config.yml 配置文件配置参数。\n\n```\n  deploy:\n  - type: git\n    repo: url\n    branch: master (默认)\n```\n\n也可同时部署到多个仓库\n\n```\n  deploy:\n  - type: git\n    repo:\n  - type: heroku\n    repo:\n```\n\n第二步: 安装部署插件 hexo-deployer-git\n\n```\n  npm install hexo-deployer-git --save\n```\n\n最后生成文件部署上传\n\n```\n  hexo generate # 生成静态文件\n  hexo deploy # 部署\n  或\n  hexo generate --deploy # 简写 hexo g -d\n```\n\n上传完成， 在浏览器访问：http://用户名.github.io 就可以看到自己的博客了。\n\n# 新增博客\n\n博客搭好了，目前只有一篇默认的 hello-world 文章，现在开始写我们自己的文章，这里简单介绍下流程，具体文档可以看 hexo 官网。\n\n```\nhexo new '文章标题'\n```\n\n执行完成后可以在/source/\\_posts 下看到一个新增的 \"文章标题.md\" 的文件。.md 是 Markdown 格式的文件，语法比较简单，可以到网上找找。\n\n在 Markdown 文件里编写自己的文章内容，保存。\n\n再执行一下下面的命令\n\n```\n  hexo generate\n```\n\n```\n  hexo server\n```\n\n就可以在本地预览新增的博客了。\n\n最后，只要同步部署到 Github 上就行了\n\n```\n  hexo clean\n```\n\n```\n  hexo generate --deploy\n```\n\n部署前应该先执行 hexo clean 命令，清除缓存文件和已生成的静态文件。如果出现更改内容（尤其是换主题后）无论怎样都不生效时，可能就是没有运行该命令。\n\n此外，还可以通过 hexo new draf \"文章标题\" 生成草稿文件，生成后会在/source/\\_drafs 里看到新增的草稿文件。可通过 `publish`命令将草稿移动到/source/\\_post 文件夹。\n\n```\n  hexo publish [layout] <title>\n```\n\n# 切换主题\n\n在 hexo 官网或则网上都可以找自己喜欢的主题，我现在使用的是 next 主题。一般主题都有使用文档，你可以根据说明文档修改相应的配置。\n","slug":"Hexo-Github-page搭建博客","published":1,"updated":"2024-01-08T06:28:39.780Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrq64z620001soip76vudujf","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>前段时间对个人博客很感兴趣，而我这人又有点心血来潮，想干什么就一点要做，于是决定自己动手丰衣足食，顺便整理下，方便以后查看。</p>\n<p>博客有第三方平台，也可以自建，比较早的博客园、CSDN，近几年新兴的也比较多诸如：WordPress、segmentFault、简书、掘金、知乎专栏、Github Page 等等。</p>\n<p>综合考虑成本和个性化两方面，我采用了 Githb Page + Hexo 搭建个人博客的方式。Hexo 是使用 nodejs 编写的一个静态博客生成工具，而 Github Page 是 Github 提供的一种免费的静态网页托管服务，支持 Jekyll、Hugo、Hexo 编译静态资源。</p>\n<p>Let’s Go ~</p>\n<h1 id=\"准备环境\"><a href=\"#准备环境\" class=\"headerlink\" title=\"准备环境\"></a>准备环境</h1><p>准备 node 和 git 环境，<br>首先，安装 <a href=\"%22https://nodejs.org/en/%22\">node.js</a>，因为 Hexo 是基于 node.js 服务的博客框架。</p>\n<p>后然安装<a href=\"%22https://git-scm.com/%22\">git</a>，一个免费开源的分布式版本控制系统，具体内容网上有详细介绍，这里就不过多说明。</p>\n<p>安装成功后打开命令行终端，在终端中输入以下命令验证是否安装成功。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br><span class=\"line\">npm -v</span><br><span class=\"line\">git version</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h1><p>node 和 git 安装成功后就可以安装 Hexo。<br>在命令行输入执行以下命令:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，再次执行下列命令，查看是否安装成功。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo version</span><br></pre></td></tr></table></figure>\n\n<p>下面开始创建博客</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init blog</span><br><span class=\"line\">cd blog</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<p>创建完成，文件夹目录如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml # 网站的配置信息，您可以在此配置大部分的参数。</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── scaffolds # 模版文件夹</span><br><span class=\"line\">├── source  # 资源文件夹，除 _posts 文件，其他以下划线_开头的文件或者文件夹不会被编译打包到public文件夹</span><br><span class=\"line\">|   └── _posts # 文章Markdowm文件</span><br><span class=\"line\">└── themes  # 主题文件夹</span><br></pre></td></tr></table></figure>\n\n<p>如果之前的命令都没有报错的话，那么恭喜，博客创建成功啦！！！运行 hexo server，也可以直接运行 hexo s，没有报错的话，在浏览器中输入 <a href=\"http://localhost:4000/\">http://localhost:4000</a> 回车就可以看到预览效果了。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n\n<p>OK，你的本地博客已经搭建成功，下面就是部署到 Github Page 了。</p>\n<h1 id=\"创建-Github-page\"><a href=\"#创建-Github-page\" class=\"headerlink\" title=\"创建 Github page\"></a>创建 Github page</h1><p>注册登录略过，不会自行百度。</p>\n<p>点击 Start project 或者下面的 new repository 创建一个新的仓库</p>\n<p><strong><em>注意：Github 仅能使用一个同名仓库的代码托管一个静态站点。</em></strong></p>\n<p><strong>这里有个硬性规定就是仓库名一定是 用户名.github.io，比如我的用户名为 YangChen0930，那么仓库名就是 YangChen0930.github.io。</strong></p>\n<p>创建完成后，点击 Settings 设置远程仓库，找到 Github Page， 可以看到 Github Pages 已经被启用，同时资源正在从 <strong>master</strong> 分支构建。</p>\n<p>输入 用户名.github.io 地址测试 Github page 是否创建成功。当然目前页面是没有内容的。</p>\n<p>下面要做的就是同步本地创建的博客到 github 仓库</p>\n<h1 id=\"部署到-Github\"><a href=\"#部署到-Github\" class=\"headerlink\" title=\"部署到 Github\"></a>部署到 Github</h1><p>可以直接查看官网的<a href=\"%22https://hexo.io/zh-cn/docs/deployment%22\">部署</a>教程</p>\n<p>第一步:修改项目根目录下的_config.yml 配置文件配置参数。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">- type: git</span><br><span class=\"line\">  repo: url</span><br><span class=\"line\">  branch: master (默认)</span><br></pre></td></tr></table></figure>\n\n<p>也可同时部署到多个仓库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">- type: git</span><br><span class=\"line\">  repo:</span><br><span class=\"line\">- type: heroku</span><br><span class=\"line\">  repo:</span><br></pre></td></tr></table></figure>\n\n<p>第二步: 安装部署插件 hexo-deployer-git</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<p>最后生成文件部署上传</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate # 生成静态文件</span><br><span class=\"line\">hexo deploy # 部署</span><br><span class=\"line\">或</span><br><span class=\"line\">hexo generate --deploy # 简写 hexo g -d</span><br></pre></td></tr></table></figure>\n\n<p>上传完成， 在浏览器访问：http:&#x2F;&#x2F;用户名.github.io 就可以看到自己的博客了。</p>\n<h1 id=\"新增博客\"><a href=\"#新增博客\" class=\"headerlink\" title=\"新增博客\"></a>新增博客</h1><p>博客搭好了，目前只有一篇默认的 hello-world 文章，现在开始写我们自己的文章，这里简单介绍下流程，具体文档可以看 hexo 官网。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new &#x27;文章标题&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>执行完成后可以在&#x2F;source&#x2F;_posts 下看到一个新增的 “文章标题.md” 的文件。.md 是 Markdown 格式的文件，语法比较简单，可以到网上找找。</p>\n<p>在 Markdown 文件里编写自己的文章内容，保存。</p>\n<p>再执行一下下面的命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n\n<p>就可以在本地预览新增的博客了。</p>\n<p>最后，只要同步部署到 Github 上就行了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate --deploy</span><br></pre></td></tr></table></figure>\n\n<p>部署前应该先执行 hexo clean 命令，清除缓存文件和已生成的静态文件。如果出现更改内容（尤其是换主题后）无论怎样都不生效时，可能就是没有运行该命令。</p>\n<p>此外，还可以通过 hexo new draf “文章标题” 生成草稿文件，生成后会在&#x2F;source&#x2F;_drafs 里看到新增的草稿文件。可通过 <code>publish</code>命令将草稿移动到&#x2F;source&#x2F;_post 文件夹。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo publish [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"切换主题\"><a href=\"#切换主题\" class=\"headerlink\" title=\"切换主题\"></a>切换主题</h1><p>在 hexo 官网或则网上都可以找自己喜欢的主题，我现在使用的是 next 主题。一般主题都有使用文档，你可以根据说明文档修改相应的配置。</p>\n","site":{"data":{}},"length":1220,"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>前段时间对个人博客很感兴趣，而我这人又有点心血来潮，想干什么就一点要做，于是决定自己动手丰衣足食，顺便整理下，方便以后查看。</p>\n<p>博客有第三方平台，也可以自建，比较早的博客园、CSDN，近几年新兴的也比较多诸如：WordPress、segmentFault、简书、掘金、知乎专栏、Github Page 等等。</p>\n<p>综合考虑成本和个性化两方面，我采用了 Githb Page + Hexo 搭建个人博客的方式。Hexo 是使用 nodejs 编写的一个静态博客生成工具，而 Github Page 是 Github 提供的一种免费的静态网页托管服务，支持 Jekyll、Hugo、Hexo 编译静态资源。</p>\n<p>Let’s Go ~</p>\n<h1 id=\"准备环境\"><a href=\"#准备环境\" class=\"headerlink\" title=\"准备环境\"></a>准备环境</h1><p>准备 node 和 git 环境，<br>首先，安装 <a href=\"%22https://nodejs.org/en/%22\">node.js</a>，因为 Hexo 是基于 node.js 服务的博客框架。</p>\n<p>后然安装<a href=\"%22https://git-scm.com/%22\">git</a>，一个免费开源的分布式版本控制系统，具体内容网上有详细介绍，这里就不过多说明。</p>\n<p>安装成功后打开命令行终端，在终端中输入以下命令验证是否安装成功。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br><span class=\"line\">npm -v</span><br><span class=\"line\">git version</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h1><p>node 和 git 安装成功后就可以安装 Hexo。<br>在命令行输入执行以下命令:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，再次执行下列命令，查看是否安装成功。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo version</span><br></pre></td></tr></table></figure>\n\n<p>下面开始创建博客</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init blog</span><br><span class=\"line\">cd blog</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<p>创建完成，文件夹目录如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml # 网站的配置信息，您可以在此配置大部分的参数。</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── scaffolds # 模版文件夹</span><br><span class=\"line\">├── source  # 资源文件夹，除 _posts 文件，其他以下划线_开头的文件或者文件夹不会被编译打包到public文件夹</span><br><span class=\"line\">|   └── _posts # 文章Markdowm文件</span><br><span class=\"line\">└── themes  # 主题文件夹</span><br></pre></td></tr></table></figure>\n\n<p>如果之前的命令都没有报错的话，那么恭喜，博客创建成功啦！！！运行 hexo server，也可以直接运行 hexo s，没有报错的话，在浏览器中输入 <a href=\"http://localhost:4000/\">http://localhost:4000</a> 回车就可以看到预览效果了。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n\n<p>OK，你的本地博客已经搭建成功，下面就是部署到 Github Page 了。</p>\n<h1 id=\"创建-Github-page\"><a href=\"#创建-Github-page\" class=\"headerlink\" title=\"创建 Github page\"></a>创建 Github page</h1><p>注册登录略过，不会自行百度。</p>\n<p>点击 Start project 或者下面的 new repository 创建一个新的仓库</p>\n<p><strong><em>注意：Github 仅能使用一个同名仓库的代码托管一个静态站点。</em></strong></p>\n<p><strong>这里有个硬性规定就是仓库名一定是 用户名.github.io，比如我的用户名为 YangChen0930，那么仓库名就是 YangChen0930.github.io。</strong></p>\n<p>创建完成后，点击 Settings 设置远程仓库，找到 Github Page， 可以看到 Github Pages 已经被启用，同时资源正在从 <strong>master</strong> 分支构建。</p>\n<p>输入 用户名.github.io 地址测试 Github page 是否创建成功。当然目前页面是没有内容的。</p>\n<p>下面要做的就是同步本地创建的博客到 github 仓库</p>\n<h1 id=\"部署到-Github\"><a href=\"#部署到-Github\" class=\"headerlink\" title=\"部署到 Github\"></a>部署到 Github</h1><p>可以直接查看官网的<a href=\"%22https://hexo.io/zh-cn/docs/deployment%22\">部署</a>教程</p>\n<p>第一步:修改项目根目录下的_config.yml 配置文件配置参数。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">- type: git</span><br><span class=\"line\">  repo: url</span><br><span class=\"line\">  branch: master (默认)</span><br></pre></td></tr></table></figure>\n\n<p>也可同时部署到多个仓库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">- type: git</span><br><span class=\"line\">  repo:</span><br><span class=\"line\">- type: heroku</span><br><span class=\"line\">  repo:</span><br></pre></td></tr></table></figure>\n\n<p>第二步: 安装部署插件 hexo-deployer-git</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<p>最后生成文件部署上传</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate # 生成静态文件</span><br><span class=\"line\">hexo deploy # 部署</span><br><span class=\"line\">或</span><br><span class=\"line\">hexo generate --deploy # 简写 hexo g -d</span><br></pre></td></tr></table></figure>\n\n<p>上传完成， 在浏览器访问：http:&#x2F;&#x2F;用户名.github.io 就可以看到自己的博客了。</p>\n<h1 id=\"新增博客\"><a href=\"#新增博客\" class=\"headerlink\" title=\"新增博客\"></a>新增博客</h1><p>博客搭好了，目前只有一篇默认的 hello-world 文章，现在开始写我们自己的文章，这里简单介绍下流程，具体文档可以看 hexo 官网。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new &#x27;文章标题&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>执行完成后可以在&#x2F;source&#x2F;_posts 下看到一个新增的 “文章标题.md” 的文件。.md 是 Markdown 格式的文件，语法比较简单，可以到网上找找。</p>\n<p>在 Markdown 文件里编写自己的文章内容，保存。</p>\n<p>再执行一下下面的命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n\n<p>就可以在本地预览新增的博客了。</p>\n<p>最后，只要同步部署到 Github 上就行了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate --deploy</span><br></pre></td></tr></table></figure>\n\n<p>部署前应该先执行 hexo clean 命令，清除缓存文件和已生成的静态文件。如果出现更改内容（尤其是换主题后）无论怎样都不生效时，可能就是没有运行该命令。</p>\n<p>此外，还可以通过 hexo new draf “文章标题” 生成草稿文件，生成后会在&#x2F;source&#x2F;_drafs 里看到新增的草稿文件。可通过 <code>publish</code>命令将草稿移动到&#x2F;source&#x2F;_post 文件夹。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo publish [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"切换主题\"><a href=\"#切换主题\" class=\"headerlink\" title=\"切换主题\"></a>切换主题</h1><p>在 hexo 官网或则网上都可以找自己喜欢的主题，我现在使用的是 next 主题。一般主题都有使用文档，你可以根据说明文档修改相应的配置。</p>\n"},{"title":"Vue3中使用cesium","date":"2023-08-04T07:18:10.000Z","_content":"\n### 1、安装，这里应项目需要安装固定版本\n\n```bash\nnpm install cesium@1.88 --save\n```\n\n### 2、在node_modules/cesium/Build下面复制Assets、ThirdParty、Widgets、Workers文件夹到public文件夹下面。\n\n仅靠源代码是不能运行起 Cesium 三维地球场景的，必须使用构建版本的 CesiumJS 库。而官方构建后的 CesiumJS 库（即发布在 npm 上的 cesium 包）一定会包含以上四类文件，即 node_modules/cesium/Build/ 下的压缩和未压缩版本文件夹下的 Workers、Widgets、Widgets、Assets 四大文件夹。\nCESIUM_BASE_URL 的作用，它就是告诉已经运行的 CesiumJS 上哪去找上述四类静态资源。\n\n注意：Vite 开发服务器的根路径，除了挂载了工程的根目录，还挂载了工程根目录下的 public 目录，public 目录的作用请自己查阅 Vite 文档。\n\n### 3、使用\n\n```bash\n<template>\n  <div id=\"cesiumContainer\"></div>\n</template>\n\n<script setup>\n  import * as Cesium from 'cesium';\n  import '/public/Widgets/widgets.css'\n\n  window.CESIUM_BASE_URL = '/';\n  Cesium.Ion.defaultAccessToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJmYmRjMWNhOC0zN2M1LTRkMTgtYjYwZi1lNzk2ZmY3ZTJkNjkiLCJpZCI6MTU4MjAyLCJpYXQiOjE2OTEwNDMxNjB9.sXxzlZHx1ju-HoMVFZU0tCnRiNtqPaYYm0dm6I3cOfk'\n\n  onMounted(() => {\n    const viewer = new Cesium.Viewer('cesiumContainer',{\n      //infoBox: false, // 禁用沙箱，解决控制台报错\n      // animation: false, // 是否显示动画控件\n      // baseLayerPicker: false, // 是否显示图层选择控件\n      // vrButton: false, // 是否显示VR控件\n      // geocoder: false, // 是否显示地名查找控件\n      // timeline: false, // 是否显示时间线控件\n      // sceneModePicker: false, // 是否显示投影方式控件\n      // navigationHelpButton: false, // 是否显示帮助信息控件\n      // navigationInstructionsInitiallyVisible: false, // 帮助按钮，初始化的时候是否展开\n```","source":"_posts/Vue3中使用cesium.md","raw":"---\ntitle: Vue3中使用cesium\ndate: 2023-08-04 15:18:10\ntags:\n    - webgl\n    - cesium\n    - vue3\n    - vite\n---\n\n### 1、安装，这里应项目需要安装固定版本\n\n```bash\nnpm install cesium@1.88 --save\n```\n\n### 2、在node_modules/cesium/Build下面复制Assets、ThirdParty、Widgets、Workers文件夹到public文件夹下面。\n\n仅靠源代码是不能运行起 Cesium 三维地球场景的，必须使用构建版本的 CesiumJS 库。而官方构建后的 CesiumJS 库（即发布在 npm 上的 cesium 包）一定会包含以上四类文件，即 node_modules/cesium/Build/ 下的压缩和未压缩版本文件夹下的 Workers、Widgets、Widgets、Assets 四大文件夹。\nCESIUM_BASE_URL 的作用，它就是告诉已经运行的 CesiumJS 上哪去找上述四类静态资源。\n\n注意：Vite 开发服务器的根路径，除了挂载了工程的根目录，还挂载了工程根目录下的 public 目录，public 目录的作用请自己查阅 Vite 文档。\n\n### 3、使用\n\n```bash\n<template>\n  <div id=\"cesiumContainer\"></div>\n</template>\n\n<script setup>\n  import * as Cesium from 'cesium';\n  import '/public/Widgets/widgets.css'\n\n  window.CESIUM_BASE_URL = '/';\n  Cesium.Ion.defaultAccessToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJmYmRjMWNhOC0zN2M1LTRkMTgtYjYwZi1lNzk2ZmY3ZTJkNjkiLCJpZCI6MTU4MjAyLCJpYXQiOjE2OTEwNDMxNjB9.sXxzlZHx1ju-HoMVFZU0tCnRiNtqPaYYm0dm6I3cOfk'\n\n  onMounted(() => {\n    const viewer = new Cesium.Viewer('cesiumContainer',{\n      //infoBox: false, // 禁用沙箱，解决控制台报错\n      // animation: false, // 是否显示动画控件\n      // baseLayerPicker: false, // 是否显示图层选择控件\n      // vrButton: false, // 是否显示VR控件\n      // geocoder: false, // 是否显示地名查找控件\n      // timeline: false, // 是否显示时间线控件\n      // sceneModePicker: false, // 是否显示投影方式控件\n      // navigationHelpButton: false, // 是否显示帮助信息控件\n      // navigationInstructionsInitiallyVisible: false, // 帮助按钮，初始化的时候是否展开\n```","slug":"Vue3中使用cesium","published":1,"updated":"2024-01-15T07:35:44.427Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrq64z650003soipgslu9omx","content":"<h3 id=\"1、安装，这里应项目需要安装固定版本\"><a href=\"#1、安装，这里应项目需要安装固定版本\" class=\"headerlink\" title=\"1、安装，这里应项目需要安装固定版本\"></a>1、安装，这里应项目需要安装固定版本</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install cesium@1.88 --save</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、在node-modules-cesium-Build下面复制Assets、ThirdParty、Widgets、Workers文件夹到public文件夹下面。\"><a href=\"#2、在node-modules-cesium-Build下面复制Assets、ThirdParty、Widgets、Workers文件夹到public文件夹下面。\" class=\"headerlink\" title=\"2、在node_modules&#x2F;cesium&#x2F;Build下面复制Assets、ThirdParty、Widgets、Workers文件夹到public文件夹下面。\"></a>2、在node_modules&#x2F;cesium&#x2F;Build下面复制Assets、ThirdParty、Widgets、Workers文件夹到public文件夹下面。</h3><p>仅靠源代码是不能运行起 Cesium 三维地球场景的，必须使用构建版本的 CesiumJS 库。而官方构建后的 CesiumJS 库（即发布在 npm 上的 cesium 包）一定会包含以上四类文件，即 node_modules&#x2F;cesium&#x2F;Build&#x2F; 下的压缩和未压缩版本文件夹下的 Workers、Widgets、Widgets、Assets 四大文件夹。<br>CESIUM_BASE_URL 的作用，它就是告诉已经运行的 CesiumJS 上哪去找上述四类静态资源。</p>\n<p>注意：Vite 开发服务器的根路径，除了挂载了工程的根目录，还挂载了工程根目录下的 public 目录，public 目录的作用请自己查阅 Vite 文档。</p>\n<h3 id=\"3、使用\"><a href=\"#3、使用\" class=\"headerlink\" title=\"3、使用\"></a>3、使用</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div <span class=\"built_in\">id</span>=<span class=\"string\">&quot;cesiumContainer&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script setup&gt;</span><br><span class=\"line\">  import * as Cesium from <span class=\"string\">&#x27;cesium&#x27;</span>;</span><br><span class=\"line\">  import <span class=\"string\">&#x27;/public/Widgets/widgets.css&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  window.CESIUM_BASE_URL = <span class=\"string\">&#x27;/&#x27;</span>;</span><br><span class=\"line\">  Cesium.Ion.defaultAccessToken = <span class=\"string\">&#x27;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJmYmRjMWNhOC0zN2M1LTRkMTgtYjYwZi1lNzk2ZmY3ZTJkNjkiLCJpZCI6MTU4MjAyLCJpYXQiOjE2OTEwNDMxNjB9.sXxzlZHx1ju-HoMVFZU0tCnRiNtqPaYYm0dm6I3cOfk&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  onMounted(() =&gt; &#123;</span><br><span class=\"line\">    const viewer = new Cesium.Viewer(&#x27;cesiumContainer&#x27;,&#123;</span><br><span class=\"line\">      //infoBox: false, // 禁用沙箱，解决控制台报错</span><br><span class=\"line\">      // animation: false, // 是否显示动画控件</span><br><span class=\"line\">      // baseLayerPicker: false, // 是否显示图层选择控件</span><br><span class=\"line\">      // vrButton: false, // 是否显示VR控件</span><br><span class=\"line\">      // geocoder: false, // 是否显示地名查找控件</span><br><span class=\"line\">      // timeline: false, // 是否显示时间线控件</span><br><span class=\"line\">      // sceneModePicker: false, // 是否显示投影方式控件</span><br><span class=\"line\">      // navigationHelpButton: false, // 是否显示帮助信息控件</span><br><span class=\"line\">      // navigationInstructionsInitiallyVisible: false, // 帮助按钮，初始化的时候是否展开</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":350,"excerpt":"","more":"<h3 id=\"1、安装，这里应项目需要安装固定版本\"><a href=\"#1、安装，这里应项目需要安装固定版本\" class=\"headerlink\" title=\"1、安装，这里应项目需要安装固定版本\"></a>1、安装，这里应项目需要安装固定版本</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install cesium@1.88 --save</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、在node-modules-cesium-Build下面复制Assets、ThirdParty、Widgets、Workers文件夹到public文件夹下面。\"><a href=\"#2、在node-modules-cesium-Build下面复制Assets、ThirdParty、Widgets、Workers文件夹到public文件夹下面。\" class=\"headerlink\" title=\"2、在node_modules&#x2F;cesium&#x2F;Build下面复制Assets、ThirdParty、Widgets、Workers文件夹到public文件夹下面。\"></a>2、在node_modules&#x2F;cesium&#x2F;Build下面复制Assets、ThirdParty、Widgets、Workers文件夹到public文件夹下面。</h3><p>仅靠源代码是不能运行起 Cesium 三维地球场景的，必须使用构建版本的 CesiumJS 库。而官方构建后的 CesiumJS 库（即发布在 npm 上的 cesium 包）一定会包含以上四类文件，即 node_modules&#x2F;cesium&#x2F;Build&#x2F; 下的压缩和未压缩版本文件夹下的 Workers、Widgets、Widgets、Assets 四大文件夹。<br>CESIUM_BASE_URL 的作用，它就是告诉已经运行的 CesiumJS 上哪去找上述四类静态资源。</p>\n<p>注意：Vite 开发服务器的根路径，除了挂载了工程的根目录，还挂载了工程根目录下的 public 目录，public 目录的作用请自己查阅 Vite 文档。</p>\n<h3 id=\"3、使用\"><a href=\"#3、使用\" class=\"headerlink\" title=\"3、使用\"></a>3、使用</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div <span class=\"built_in\">id</span>=<span class=\"string\">&quot;cesiumContainer&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script setup&gt;</span><br><span class=\"line\">  import * as Cesium from <span class=\"string\">&#x27;cesium&#x27;</span>;</span><br><span class=\"line\">  import <span class=\"string\">&#x27;/public/Widgets/widgets.css&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  window.CESIUM_BASE_URL = <span class=\"string\">&#x27;/&#x27;</span>;</span><br><span class=\"line\">  Cesium.Ion.defaultAccessToken = <span class=\"string\">&#x27;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJmYmRjMWNhOC0zN2M1LTRkMTgtYjYwZi1lNzk2ZmY3ZTJkNjkiLCJpZCI6MTU4MjAyLCJpYXQiOjE2OTEwNDMxNjB9.sXxzlZHx1ju-HoMVFZU0tCnRiNtqPaYYm0dm6I3cOfk&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  onMounted(() =&gt; &#123;</span><br><span class=\"line\">    const viewer = new Cesium.Viewer(&#x27;cesiumContainer&#x27;,&#123;</span><br><span class=\"line\">      //infoBox: false, // 禁用沙箱，解决控制台报错</span><br><span class=\"line\">      // animation: false, // 是否显示动画控件</span><br><span class=\"line\">      // baseLayerPicker: false, // 是否显示图层选择控件</span><br><span class=\"line\">      // vrButton: false, // 是否显示VR控件</span><br><span class=\"line\">      // geocoder: false, // 是否显示地名查找控件</span><br><span class=\"line\">      // timeline: false, // 是否显示时间线控件</span><br><span class=\"line\">      // sceneModePicker: false, // 是否显示投影方式控件</span><br><span class=\"line\">      // navigationHelpButton: false, // 是否显示帮助信息控件</span><br><span class=\"line\">      // navigationInstructionsInitiallyVisible: false, // 帮助按钮，初始化的时候是否展开</span><br></pre></td></tr></table></figure>"},{"title":"Vite引入cesium最佳实现","date":"2023-09-25T06:20:11.000Z","_content":"\n本文是基于[Vue3(vite)中使用cesium](/2023/08/04/Vue3中使用cesium/)实现的优化方案，如果还没了解过如何在Vite中使用CesiumJS，请自行查看。\n\n假设我们已经对如何在Vue3中使用CesiumJS有所了解，但还是有如下问题存在\n\n- Vite 仍需对毫无修改的 cesium 依赖包打包一次，CesiumJS 已经在发布 npm 包时进行了构建，其虽然有 ESModule 格式的产物，但是并不支持 Tree-Shaking 减小大小，事实上也没有必要\n- 需要手动复制 node_modules/cesium/Build/CesiumUnminified/ 下的四个静态资源文件夹\n- 对多个发布环境仍需要手动修改 CESIUM_BASE_URL，如果切换到 CDN 或内网已有 CesiumJS 在线库资源，这个改起来就麻烦许多\n\n## 优化点\n\n### 使用插件外部化CesiumJS\n\nVite 和 Webpack 类似，都能把一些依赖无视，不参与打包，一旦某个依赖被配置为“外部的”，即 External 化，就不会打包它了。\n\n插件 `vite-plugin-externals`\n\n安装\n\n```bash\nnpm i -D vite-plugin-externals\n```\n\n使用\n\n```bash\nimport { viteExternalsPlugin } from 'vite-plugin-externals'\n\nexport default defineConfig({\n    plugins: [\n        // 其他插件\n        viteExternalsPlugin(\n        {\n          // key 是要外部化的依赖名，value 是全局访问的名称，这里填写的是 'Cesium'\n          // 意味着外部化后的 cesium 依赖可以通过 window['Cesium'] 访问；\n          // 支持链式访问，参考此插件的文档\n          cesium: 'Cesium'\n        },\n        {\n          disableInServe: true // 开发模式时不外部化\n        }\n      ),\n    ]\n})\n```\n\n> Vite 启动后会有一个依赖预构建的过程，打开 node_modules/.vite/deps 目录，这里就是预构建的各种代码中导入的依赖包\n\n开发模式下外部化会报找不到模块错误。\n\n执行`npm run build`后`npm run preivew`预览，还是会报找不到对应类错误\n\n![null](https://s2.loli.net/2024/01/08/WLis2pfB1v3xmPQ.png)\n\n这是因为外部化CesiumJS后，便不再打包cesium相关 依赖，所以打包后的应用找不到CesiumJS 的类了。\n\n那么只需打包时把 CesiumJS 的主库文件导入 index.html 不就行了吗\n\n### 使用插件自动在 index.html 引入 Cesium.js 库文件\n\n其实可以直接手动在index.html中引入Cesiumjs文件，在index.html文件里添加一行script标签\n\n```bash\n<head>\n  <script src=\"libs/cesium/Cesium.js\"></script>\n</head>\n```\n\n只不过这样， 执行打包时会收到 Vite 的一句警告，同时也不够灵活\n\n![null](https://s2.loli.net/2024/01/08/Sqwy13slcka5Xnz.png)\n\n可以通过vite插件在打包过程中往index.html里插入我们需要的script，这类插件有很多，这里以`vite-plugin-insert-html`为例\n\n```bash\nimport { insertHtml, h } from 'vite-plugin-insert-html'\n\nexport default defineConfig({\n    plugins: [\n    // 其他插件\n    insertHtml({\n        head: [\n          h('script', {\n            // 因为涉及前端路径访问，所以开发模式最好显式拼接 base 路径，适配不同 base 路径的情况\n            src: isProd ? `${base}${cesiumBaseUrl}Cesium.js` : `${cesiumBaseUrl}Cesium.js`\n          }),\n          h('link', {\n            rel: 'stylesheet',\n            href: isProd ? `${base}${cesiumBaseUrl}Widgets/widgets.css` : `${cesiumBaseUrl}Widgets/widgets.css`\n          })\n        ]\n      })\n    ]\n})\n```\n\n这样就能解决上述问题\n\n![null](https://s2.loli.net/2024/01/08/AB4JgxIKCFl1hLw.png)\n\n但是，到这里还是需要手动复制四大静态文件和CesiumJS库文件，这同样可以通过插件从node_modules里复制文件到指定路径\n\n### 四大静态文件夹与库文件的拷贝\n\n我们可以拿Vite 的静态文件复制插件完成这一步。这里用`vite-plugin-static-copy`做示例。\n\n```bash\nimport { viteStaticCopy } from 'vite-plugin-static-copy'\n\nexport default defineConfig({\n    plugins: [\n        // 其他插件\n        viteStaticCopy({\n        targets: [\n          {\n            src: 'node_modules/cesium/Build/CesiumUnminified/Cesium.js',\n            dest: 'lib/cesium/'\n          },\n          {\n            src: 'node_modules/cesium/Build/CesiumUnminified/Assets/*',\n            dest: 'lib/cesium/Assets/'\n          },\n          {\n            src: 'node_modules/cesium/Build/CesiumUnminified/ThirdParty/*',\n            dest: 'lib/cesium/ThirdParty/'\n          },\n          {\n            src: 'node_modules/cesium/Build/CesiumUnminified/Workers/*',\n            dest: 'lib/cesium/Workers/'\n          },\n          {\n            src: 'node_modules/cesium/Build/CesiumUnminified/Widgets/*',\n            dest: 'lib/cesium/Widgets/'\n          }\n        ]\n      }),\n    ]\n})\n```\n\n上面的代码还可以继续优化，这个 target 中很多路径都是相同的，可以通过数组计算完成。dest 是打包后的根路径的相对路径。\n\nOK，到此为止已经可以灵活使用CesiumJS了。当然我们还可以通过环境变量来兼容局域网或已经部署好的CesiumJS库这类情况。\n","source":"_posts/Vite引入cesium最佳实现.md","raw":"---\ntitle: Vite引入cesium最佳实现\ndate: 2023-09-25 14:20:11\ntags:\n    - webgl\n    - cesium\n    - vite\n---\n\n本文是基于[Vue3(vite)中使用cesium](/2023/08/04/Vue3中使用cesium/)实现的优化方案，如果还没了解过如何在Vite中使用CesiumJS，请自行查看。\n\n假设我们已经对如何在Vue3中使用CesiumJS有所了解，但还是有如下问题存在\n\n- Vite 仍需对毫无修改的 cesium 依赖包打包一次，CesiumJS 已经在发布 npm 包时进行了构建，其虽然有 ESModule 格式的产物，但是并不支持 Tree-Shaking 减小大小，事实上也没有必要\n- 需要手动复制 node_modules/cesium/Build/CesiumUnminified/ 下的四个静态资源文件夹\n- 对多个发布环境仍需要手动修改 CESIUM_BASE_URL，如果切换到 CDN 或内网已有 CesiumJS 在线库资源，这个改起来就麻烦许多\n\n## 优化点\n\n### 使用插件外部化CesiumJS\n\nVite 和 Webpack 类似，都能把一些依赖无视，不参与打包，一旦某个依赖被配置为“外部的”，即 External 化，就不会打包它了。\n\n插件 `vite-plugin-externals`\n\n安装\n\n```bash\nnpm i -D vite-plugin-externals\n```\n\n使用\n\n```bash\nimport { viteExternalsPlugin } from 'vite-plugin-externals'\n\nexport default defineConfig({\n    plugins: [\n        // 其他插件\n        viteExternalsPlugin(\n        {\n          // key 是要外部化的依赖名，value 是全局访问的名称，这里填写的是 'Cesium'\n          // 意味着外部化后的 cesium 依赖可以通过 window['Cesium'] 访问；\n          // 支持链式访问，参考此插件的文档\n          cesium: 'Cesium'\n        },\n        {\n          disableInServe: true // 开发模式时不外部化\n        }\n      ),\n    ]\n})\n```\n\n> Vite 启动后会有一个依赖预构建的过程，打开 node_modules/.vite/deps 目录，这里就是预构建的各种代码中导入的依赖包\n\n开发模式下外部化会报找不到模块错误。\n\n执行`npm run build`后`npm run preivew`预览，还是会报找不到对应类错误\n\n![null](https://s2.loli.net/2024/01/08/WLis2pfB1v3xmPQ.png)\n\n这是因为外部化CesiumJS后，便不再打包cesium相关 依赖，所以打包后的应用找不到CesiumJS 的类了。\n\n那么只需打包时把 CesiumJS 的主库文件导入 index.html 不就行了吗\n\n### 使用插件自动在 index.html 引入 Cesium.js 库文件\n\n其实可以直接手动在index.html中引入Cesiumjs文件，在index.html文件里添加一行script标签\n\n```bash\n<head>\n  <script src=\"libs/cesium/Cesium.js\"></script>\n</head>\n```\n\n只不过这样， 执行打包时会收到 Vite 的一句警告，同时也不够灵活\n\n![null](https://s2.loli.net/2024/01/08/Sqwy13slcka5Xnz.png)\n\n可以通过vite插件在打包过程中往index.html里插入我们需要的script，这类插件有很多，这里以`vite-plugin-insert-html`为例\n\n```bash\nimport { insertHtml, h } from 'vite-plugin-insert-html'\n\nexport default defineConfig({\n    plugins: [\n    // 其他插件\n    insertHtml({\n        head: [\n          h('script', {\n            // 因为涉及前端路径访问，所以开发模式最好显式拼接 base 路径，适配不同 base 路径的情况\n            src: isProd ? `${base}${cesiumBaseUrl}Cesium.js` : `${cesiumBaseUrl}Cesium.js`\n          }),\n          h('link', {\n            rel: 'stylesheet',\n            href: isProd ? `${base}${cesiumBaseUrl}Widgets/widgets.css` : `${cesiumBaseUrl}Widgets/widgets.css`\n          })\n        ]\n      })\n    ]\n})\n```\n\n这样就能解决上述问题\n\n![null](https://s2.loli.net/2024/01/08/AB4JgxIKCFl1hLw.png)\n\n但是，到这里还是需要手动复制四大静态文件和CesiumJS库文件，这同样可以通过插件从node_modules里复制文件到指定路径\n\n### 四大静态文件夹与库文件的拷贝\n\n我们可以拿Vite 的静态文件复制插件完成这一步。这里用`vite-plugin-static-copy`做示例。\n\n```bash\nimport { viteStaticCopy } from 'vite-plugin-static-copy'\n\nexport default defineConfig({\n    plugins: [\n        // 其他插件\n        viteStaticCopy({\n        targets: [\n          {\n            src: 'node_modules/cesium/Build/CesiumUnminified/Cesium.js',\n            dest: 'lib/cesium/'\n          },\n          {\n            src: 'node_modules/cesium/Build/CesiumUnminified/Assets/*',\n            dest: 'lib/cesium/Assets/'\n          },\n          {\n            src: 'node_modules/cesium/Build/CesiumUnminified/ThirdParty/*',\n            dest: 'lib/cesium/ThirdParty/'\n          },\n          {\n            src: 'node_modules/cesium/Build/CesiumUnminified/Workers/*',\n            dest: 'lib/cesium/Workers/'\n          },\n          {\n            src: 'node_modules/cesium/Build/CesiumUnminified/Widgets/*',\n            dest: 'lib/cesium/Widgets/'\n          }\n        ]\n      }),\n    ]\n})\n```\n\n上面的代码还可以继续优化，这个 target 中很多路径都是相同的，可以通过数组计算完成。dest 是打包后的根路径的相对路径。\n\nOK，到此为止已经可以灵活使用CesiumJS了。当然我们还可以通过环境变量来兼容局域网或已经部署好的CesiumJS库这类情况。\n","slug":"Vite引入cesium最佳实现","published":1,"updated":"2024-01-15T07:44:05.161Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrq64z660004soipgzvp5l3l","content":"<p>本文是基于<a href=\"/2023/08/04/Vue3%E4%B8%AD%E4%BD%BF%E7%94%A8cesium/\">Vue3(vite)中使用cesium</a>实现的优化方案，如果还没了解过如何在Vite中使用CesiumJS，请自行查看。</p>\n<p>假设我们已经对如何在Vue3中使用CesiumJS有所了解，但还是有如下问题存在</p>\n<ul>\n<li>Vite 仍需对毫无修改的 cesium 依赖包打包一次，CesiumJS 已经在发布 npm 包时进行了构建，其虽然有 ESModule 格式的产物，但是并不支持 Tree-Shaking 减小大小，事实上也没有必要</li>\n<li>需要手动复制 node_modules&#x2F;cesium&#x2F;Build&#x2F;CesiumUnminified&#x2F; 下的四个静态资源文件夹</li>\n<li>对多个发布环境仍需要手动修改 CESIUM_BASE_URL，如果切换到 CDN 或内网已有 CesiumJS 在线库资源，这个改起来就麻烦许多</li>\n</ul>\n<h2 id=\"优化点\"><a href=\"#优化点\" class=\"headerlink\" title=\"优化点\"></a>优化点</h2><h3 id=\"使用插件外部化CesiumJS\"><a href=\"#使用插件外部化CesiumJS\" class=\"headerlink\" title=\"使用插件外部化CesiumJS\"></a>使用插件外部化CesiumJS</h3><p>Vite 和 Webpack 类似，都能把一些依赖无视，不参与打包，一旦某个依赖被配置为“外部的”，即 External 化，就不会打包它了。</p>\n<p>插件 <code>vite-plugin-externals</code></p>\n<p>安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D vite-plugin-externals</span><br></pre></td></tr></table></figure>\n\n<p>使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; viteExternalsPlugin &#125; from <span class=\"string\">&#x27;vite-plugin-externals&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">export</span> default defineConfig(&#123;</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        // 其他插件</span><br><span class=\"line\">        viteExternalsPlugin(</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          // key 是要外部化的依赖名，value 是全局访问的名称，这里填写的是 <span class=\"string\">&#x27;Cesium&#x27;</span></span><br><span class=\"line\">          // 意味着外部化后的 cesium 依赖可以通过 window[<span class=\"string\">&#x27;Cesium&#x27;</span>] 访问；</span><br><span class=\"line\">          // 支持链式访问，参考此插件的文档</span><br><span class=\"line\">          cesium: <span class=\"string\">&#x27;Cesium&#x27;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          disableInServe: <span class=\"literal\">true</span> // 开发模式时不外部化</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Vite 启动后会有一个依赖预构建的过程，打开 node_modules&#x2F;.vite&#x2F;deps 目录，这里就是预构建的各种代码中导入的依赖包</p>\n</blockquote>\n<p>开发模式下外部化会报找不到模块错误。</p>\n<p>执行<code>npm run build</code>后<code>npm run preivew</code>预览，还是会报找不到对应类错误</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/WLis2pfB1v3xmPQ.png\" alt=\"null\"></p>\n<p>这是因为外部化CesiumJS后，便不再打包cesium相关 依赖，所以打包后的应用找不到CesiumJS 的类了。</p>\n<p>那么只需打包时把 CesiumJS 的主库文件导入 index.html 不就行了吗</p>\n<h3 id=\"使用插件自动在-index-html-引入-Cesium-js-库文件\"><a href=\"#使用插件自动在-index-html-引入-Cesium-js-库文件\" class=\"headerlink\" title=\"使用插件自动在 index.html 引入 Cesium.js 库文件\"></a>使用插件自动在 index.html 引入 Cesium.js 库文件</h3><p>其实可以直接手动在index.html中引入Cesiumjs文件，在index.html文件里添加一行script标签</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"built_in\">head</span>&gt;</span><br><span class=\"line\">  &lt;script src=<span class=\"string\">&quot;libs/cesium/Cesium.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br></pre></td></tr></table></figure>\n\n<p>只不过这样， 执行打包时会收到 Vite 的一句警告，同时也不够灵活</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/Sqwy13slcka5Xnz.png\" alt=\"null\"></p>\n<p>可以通过vite插件在打包过程中往index.html里插入我们需要的script，这类插件有很多，这里以<code>vite-plugin-insert-html</code>为例</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; insertHtml, h &#125; from <span class=\"string\">&#x27;vite-plugin-insert-html&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">export</span> default defineConfig(&#123;</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">    // 其他插件</span><br><span class=\"line\">    insertHtml(&#123;</span><br><span class=\"line\">        <span class=\"built_in\">head</span>: [</span><br><span class=\"line\">          h(<span class=\"string\">&#x27;script&#x27;</span>, &#123;</span><br><span class=\"line\">            // 因为涉及前端路径访问，所以开发模式最好显式拼接 base 路径，适配不同 base 路径的情况</span><br><span class=\"line\">            src: isProd ? `<span class=\"variable\">$&#123;base&#125;</span><span class=\"variable\">$&#123;cesiumBaseUrl&#125;</span>Cesium.js` : `<span class=\"variable\">$&#123;cesiumBaseUrl&#125;</span>Cesium.js`</span><br><span class=\"line\">          &#125;),</span><br><span class=\"line\">          h(<span class=\"string\">&#x27;link&#x27;</span>, &#123;</span><br><span class=\"line\">            rel: <span class=\"string\">&#x27;stylesheet&#x27;</span>,</span><br><span class=\"line\">            href: isProd ? `<span class=\"variable\">$&#123;base&#125;</span><span class=\"variable\">$&#123;cesiumBaseUrl&#125;</span>Widgets/widgets.css` : `<span class=\"variable\">$&#123;cesiumBaseUrl&#125;</span>Widgets/widgets.css`</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>这样就能解决上述问题</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/AB4JgxIKCFl1hLw.png\" alt=\"null\"></p>\n<p>但是，到这里还是需要手动复制四大静态文件和CesiumJS库文件，这同样可以通过插件从node_modules里复制文件到指定路径</p>\n<h3 id=\"四大静态文件夹与库文件的拷贝\"><a href=\"#四大静态文件夹与库文件的拷贝\" class=\"headerlink\" title=\"四大静态文件夹与库文件的拷贝\"></a>四大静态文件夹与库文件的拷贝</h3><p>我们可以拿Vite 的静态文件复制插件完成这一步。这里用<code>vite-plugin-static-copy</code>做示例。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; viteStaticCopy &#125; from <span class=\"string\">&#x27;vite-plugin-static-copy&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">export</span> default defineConfig(&#123;</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        // 其他插件</span><br><span class=\"line\">        viteStaticCopy(&#123;</span><br><span class=\"line\">        targets: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            src: <span class=\"string\">&#x27;node_modules/cesium/Build/CesiumUnminified/Cesium.js&#x27;</span>,</span><br><span class=\"line\">            dest: <span class=\"string\">&#x27;lib/cesium/&#x27;</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            src: <span class=\"string\">&#x27;node_modules/cesium/Build/CesiumUnminified/Assets/*&#x27;</span>,</span><br><span class=\"line\">            dest: <span class=\"string\">&#x27;lib/cesium/Assets/&#x27;</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            src: <span class=\"string\">&#x27;node_modules/cesium/Build/CesiumUnminified/ThirdParty/*&#x27;</span>,</span><br><span class=\"line\">            dest: <span class=\"string\">&#x27;lib/cesium/ThirdParty/&#x27;</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            src: <span class=\"string\">&#x27;node_modules/cesium/Build/CesiumUnminified/Workers/*&#x27;</span>,</span><br><span class=\"line\">            dest: <span class=\"string\">&#x27;lib/cesium/Workers/&#x27;</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            src: <span class=\"string\">&#x27;node_modules/cesium/Build/CesiumUnminified/Widgets/*&#x27;</span>,</span><br><span class=\"line\">            dest: <span class=\"string\">&#x27;lib/cesium/Widgets/&#x27;</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码还可以继续优化，这个 target 中很多路径都是相同的，可以通过数组计算完成。dest 是打包后的根路径的相对路径。</p>\n<p>OK，到此为止已经可以灵活使用CesiumJS了。当然我们还可以通过环境变量来兼容局域网或已经部署好的CesiumJS库这类情况。</p>\n","site":{"data":{}},"length":944,"excerpt":"","more":"<p>本文是基于<a href=\"/2023/08/04/Vue3%E4%B8%AD%E4%BD%BF%E7%94%A8cesium/\">Vue3(vite)中使用cesium</a>实现的优化方案，如果还没了解过如何在Vite中使用CesiumJS，请自行查看。</p>\n<p>假设我们已经对如何在Vue3中使用CesiumJS有所了解，但还是有如下问题存在</p>\n<ul>\n<li>Vite 仍需对毫无修改的 cesium 依赖包打包一次，CesiumJS 已经在发布 npm 包时进行了构建，其虽然有 ESModule 格式的产物，但是并不支持 Tree-Shaking 减小大小，事实上也没有必要</li>\n<li>需要手动复制 node_modules&#x2F;cesium&#x2F;Build&#x2F;CesiumUnminified&#x2F; 下的四个静态资源文件夹</li>\n<li>对多个发布环境仍需要手动修改 CESIUM_BASE_URL，如果切换到 CDN 或内网已有 CesiumJS 在线库资源，这个改起来就麻烦许多</li>\n</ul>\n<h2 id=\"优化点\"><a href=\"#优化点\" class=\"headerlink\" title=\"优化点\"></a>优化点</h2><h3 id=\"使用插件外部化CesiumJS\"><a href=\"#使用插件外部化CesiumJS\" class=\"headerlink\" title=\"使用插件外部化CesiumJS\"></a>使用插件外部化CesiumJS</h3><p>Vite 和 Webpack 类似，都能把一些依赖无视，不参与打包，一旦某个依赖被配置为“外部的”，即 External 化，就不会打包它了。</p>\n<p>插件 <code>vite-plugin-externals</code></p>\n<p>安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D vite-plugin-externals</span><br></pre></td></tr></table></figure>\n\n<p>使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; viteExternalsPlugin &#125; from <span class=\"string\">&#x27;vite-plugin-externals&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">export</span> default defineConfig(&#123;</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        // 其他插件</span><br><span class=\"line\">        viteExternalsPlugin(</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          // key 是要外部化的依赖名，value 是全局访问的名称，这里填写的是 <span class=\"string\">&#x27;Cesium&#x27;</span></span><br><span class=\"line\">          // 意味着外部化后的 cesium 依赖可以通过 window[<span class=\"string\">&#x27;Cesium&#x27;</span>] 访问；</span><br><span class=\"line\">          // 支持链式访问，参考此插件的文档</span><br><span class=\"line\">          cesium: <span class=\"string\">&#x27;Cesium&#x27;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          disableInServe: <span class=\"literal\">true</span> // 开发模式时不外部化</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Vite 启动后会有一个依赖预构建的过程，打开 node_modules&#x2F;.vite&#x2F;deps 目录，这里就是预构建的各种代码中导入的依赖包</p>\n</blockquote>\n<p>开发模式下外部化会报找不到模块错误。</p>\n<p>执行<code>npm run build</code>后<code>npm run preivew</code>预览，还是会报找不到对应类错误</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/WLis2pfB1v3xmPQ.png\" alt=\"null\"></p>\n<p>这是因为外部化CesiumJS后，便不再打包cesium相关 依赖，所以打包后的应用找不到CesiumJS 的类了。</p>\n<p>那么只需打包时把 CesiumJS 的主库文件导入 index.html 不就行了吗</p>\n<h3 id=\"使用插件自动在-index-html-引入-Cesium-js-库文件\"><a href=\"#使用插件自动在-index-html-引入-Cesium-js-库文件\" class=\"headerlink\" title=\"使用插件自动在 index.html 引入 Cesium.js 库文件\"></a>使用插件自动在 index.html 引入 Cesium.js 库文件</h3><p>其实可以直接手动在index.html中引入Cesiumjs文件，在index.html文件里添加一行script标签</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"built_in\">head</span>&gt;</span><br><span class=\"line\">  &lt;script src=<span class=\"string\">&quot;libs/cesium/Cesium.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br></pre></td></tr></table></figure>\n\n<p>只不过这样， 执行打包时会收到 Vite 的一句警告，同时也不够灵活</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/Sqwy13slcka5Xnz.png\" alt=\"null\"></p>\n<p>可以通过vite插件在打包过程中往index.html里插入我们需要的script，这类插件有很多，这里以<code>vite-plugin-insert-html</code>为例</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; insertHtml, h &#125; from <span class=\"string\">&#x27;vite-plugin-insert-html&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">export</span> default defineConfig(&#123;</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">    // 其他插件</span><br><span class=\"line\">    insertHtml(&#123;</span><br><span class=\"line\">        <span class=\"built_in\">head</span>: [</span><br><span class=\"line\">          h(<span class=\"string\">&#x27;script&#x27;</span>, &#123;</span><br><span class=\"line\">            // 因为涉及前端路径访问，所以开发模式最好显式拼接 base 路径，适配不同 base 路径的情况</span><br><span class=\"line\">            src: isProd ? `<span class=\"variable\">$&#123;base&#125;</span><span class=\"variable\">$&#123;cesiumBaseUrl&#125;</span>Cesium.js` : `<span class=\"variable\">$&#123;cesiumBaseUrl&#125;</span>Cesium.js`</span><br><span class=\"line\">          &#125;),</span><br><span class=\"line\">          h(<span class=\"string\">&#x27;link&#x27;</span>, &#123;</span><br><span class=\"line\">            rel: <span class=\"string\">&#x27;stylesheet&#x27;</span>,</span><br><span class=\"line\">            href: isProd ? `<span class=\"variable\">$&#123;base&#125;</span><span class=\"variable\">$&#123;cesiumBaseUrl&#125;</span>Widgets/widgets.css` : `<span class=\"variable\">$&#123;cesiumBaseUrl&#125;</span>Widgets/widgets.css`</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>这样就能解决上述问题</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/AB4JgxIKCFl1hLw.png\" alt=\"null\"></p>\n<p>但是，到这里还是需要手动复制四大静态文件和CesiumJS库文件，这同样可以通过插件从node_modules里复制文件到指定路径</p>\n<h3 id=\"四大静态文件夹与库文件的拷贝\"><a href=\"#四大静态文件夹与库文件的拷贝\" class=\"headerlink\" title=\"四大静态文件夹与库文件的拷贝\"></a>四大静态文件夹与库文件的拷贝</h3><p>我们可以拿Vite 的静态文件复制插件完成这一步。这里用<code>vite-plugin-static-copy</code>做示例。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; viteStaticCopy &#125; from <span class=\"string\">&#x27;vite-plugin-static-copy&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">export</span> default defineConfig(&#123;</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        // 其他插件</span><br><span class=\"line\">        viteStaticCopy(&#123;</span><br><span class=\"line\">        targets: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            src: <span class=\"string\">&#x27;node_modules/cesium/Build/CesiumUnminified/Cesium.js&#x27;</span>,</span><br><span class=\"line\">            dest: <span class=\"string\">&#x27;lib/cesium/&#x27;</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            src: <span class=\"string\">&#x27;node_modules/cesium/Build/CesiumUnminified/Assets/*&#x27;</span>,</span><br><span class=\"line\">            dest: <span class=\"string\">&#x27;lib/cesium/Assets/&#x27;</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            src: <span class=\"string\">&#x27;node_modules/cesium/Build/CesiumUnminified/ThirdParty/*&#x27;</span>,</span><br><span class=\"line\">            dest: <span class=\"string\">&#x27;lib/cesium/ThirdParty/&#x27;</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            src: <span class=\"string\">&#x27;node_modules/cesium/Build/CesiumUnminified/Workers/*&#x27;</span>,</span><br><span class=\"line\">            dest: <span class=\"string\">&#x27;lib/cesium/Workers/&#x27;</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            src: <span class=\"string\">&#x27;node_modules/cesium/Build/CesiumUnminified/Widgets/*&#x27;</span>,</span><br><span class=\"line\">            dest: <span class=\"string\">&#x27;lib/cesium/Widgets/&#x27;</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码还可以继续优化，这个 target 中很多路径都是相同的，可以通过数组计算完成。dest 是打包后的根路径的相对路径。</p>\n<p>OK，到此为止已经可以灵活使用CesiumJS了。当然我们还可以通过环境变量来兼容局域网或已经部署好的CesiumJS库这类情况。</p>\n"},{"title":"cesium加载地形图层","date":"2022-03-08T08:56:18.000Z","_content":"\n## 1.创建地形图层\n\n| **接口**                     | **说明**                                                     |\n| ---------------------------- | ------------------------------------------------------------ |\n| **createWorldTerrain**       | 提供了全球在线地形数据                                       |\n| **EllipsoidTerrainProvider** | 它提供了一个全球范围内高度为0的地形，不需要额外的地形文件，就可以实时的自己来构建这个高度为0的Mesh |\n| **CesiumTerrainProvider**    | 以cesium的格式访问地形数据                                   |\n| **sampleTerrain**            | 允许我们使用异步方式请求指定坐标点的高程信息                 |\n\n基本创建方式\n\n```javascript\nviewer = new Cesium.Viewer(\"vueCesium\", {\n  baseLayerPicker: false, // 如果设置为false，将不会创建右上角图层按钮。\n  geocoder: false, // 如果设置为false，将不会创建右上角查询(放大镜)按钮。\n  navigationHelpButton: false, // 如果设置为false，则不会创建右上角帮助(问号)按钮。\n  homeButton: false, // 如果设置为false，将不会创建右上角主页(房子)按钮。\n  sceneModePicker: false, // 如果设置为false，将不会创建右上角投影方式控件(显示二三维切换按钮)。\n  animation: false, // 如果设置为false，将不会创建左下角动画小部件。\n  timeline: false, // 如果设置为false，则不会创建正下方时间轴小部件。\n  fullscreenButton: false, // 如果设置为false，将不会创建右下角全屏按钮。\n  selectionIndicator: false,\n  terrainProvider: Cesium.createWorldTerrain(),\n  imageryProvider:  new Cesium.UrlTemplateImageryProvider({\n      url: \"https://webrd03.is.autonavi.com/appmaptile?lang=zh_cn&size=1&scale=1&style=7&x={x}&y={y}&z={z}\",\n    })\n});\n```\n\n在viewer初始化时将baseLayerPicker设置为true，在控件的最下方就是地形切换按钮\n\n![null](https://s2.loli.net/2024/01/08/wk6pCGsIVmdqJZQ.png)\n左边对应是EllipsoidTerrainProvider，右边对应是createWorldTerrain。\n\n## 2.2离线地形\n\n加载离线地形图层和影像图层的操作时一致的。使用CesiumTerrainProvider接口\n\n```javascript\nvar terrainProvider = newCesium.CesiumTerrainProvider({\n    url: 'xxxxxx'\n});\n```\n\n\n\n## 2.3地形数据采样\n\n这个需要我们用到sampleTerra接口，根据文档我们可知，sampleTerrain返回是promise异步类型对象，需要使用when接口调用获取结果。\n\n```javascript\nvar terrainProvider = Cesium.createWorldTerrain();\nvar positions = [\n    Cesium.Cartographic.fromDegrees(86.925145, 27.988257),\n    Cesium.Cartographic.fromDegrees(87.0, 28.0)\n];\nvar promise = Cesium.sampleTerrain(terrainProvider, 11, positions);\nCesium.when(promise, function(updatedPositions) {\n    // positions[0].height and positions[1].height have been updated.\n    // updatedPositions is just a reference to positions.\n});\n```\n","source":"_posts/cesium加载地形图层.md","raw":"---\ntitle: cesium加载地形图层\ndate: 2022-03-08 16:56:18\ntags:\n    - webgl\n    - cesium\n---\n\n## 1.创建地形图层\n\n| **接口**                     | **说明**                                                     |\n| ---------------------------- | ------------------------------------------------------------ |\n| **createWorldTerrain**       | 提供了全球在线地形数据                                       |\n| **EllipsoidTerrainProvider** | 它提供了一个全球范围内高度为0的地形，不需要额外的地形文件，就可以实时的自己来构建这个高度为0的Mesh |\n| **CesiumTerrainProvider**    | 以cesium的格式访问地形数据                                   |\n| **sampleTerrain**            | 允许我们使用异步方式请求指定坐标点的高程信息                 |\n\n基本创建方式\n\n```javascript\nviewer = new Cesium.Viewer(\"vueCesium\", {\n  baseLayerPicker: false, // 如果设置为false，将不会创建右上角图层按钮。\n  geocoder: false, // 如果设置为false，将不会创建右上角查询(放大镜)按钮。\n  navigationHelpButton: false, // 如果设置为false，则不会创建右上角帮助(问号)按钮。\n  homeButton: false, // 如果设置为false，将不会创建右上角主页(房子)按钮。\n  sceneModePicker: false, // 如果设置为false，将不会创建右上角投影方式控件(显示二三维切换按钮)。\n  animation: false, // 如果设置为false，将不会创建左下角动画小部件。\n  timeline: false, // 如果设置为false，则不会创建正下方时间轴小部件。\n  fullscreenButton: false, // 如果设置为false，将不会创建右下角全屏按钮。\n  selectionIndicator: false,\n  terrainProvider: Cesium.createWorldTerrain(),\n  imageryProvider:  new Cesium.UrlTemplateImageryProvider({\n      url: \"https://webrd03.is.autonavi.com/appmaptile?lang=zh_cn&size=1&scale=1&style=7&x={x}&y={y}&z={z}\",\n    })\n});\n```\n\n在viewer初始化时将baseLayerPicker设置为true，在控件的最下方就是地形切换按钮\n\n![null](https://s2.loli.net/2024/01/08/wk6pCGsIVmdqJZQ.png)\n左边对应是EllipsoidTerrainProvider，右边对应是createWorldTerrain。\n\n## 2.2离线地形\n\n加载离线地形图层和影像图层的操作时一致的。使用CesiumTerrainProvider接口\n\n```javascript\nvar terrainProvider = newCesium.CesiumTerrainProvider({\n    url: 'xxxxxx'\n});\n```\n\n\n\n## 2.3地形数据采样\n\n这个需要我们用到sampleTerra接口，根据文档我们可知，sampleTerrain返回是promise异步类型对象，需要使用when接口调用获取结果。\n\n```javascript\nvar terrainProvider = Cesium.createWorldTerrain();\nvar positions = [\n    Cesium.Cartographic.fromDegrees(86.925145, 27.988257),\n    Cesium.Cartographic.fromDegrees(87.0, 28.0)\n];\nvar promise = Cesium.sampleTerrain(terrainProvider, 11, positions);\nCesium.when(promise, function(updatedPositions) {\n    // positions[0].height and positions[1].height have been updated.\n    // updatedPositions is just a reference to positions.\n});\n```\n","slug":"cesium加载地形图层","published":1,"updated":"2024-01-15T07:34:06.212Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrq64z6a0005soipem5sf5r8","content":"<h2 id=\"1-创建地形图层\"><a href=\"#1-创建地形图层\" class=\"headerlink\" title=\"1.创建地形图层\"></a>1.创建地形图层</h2><table>\n<thead>\n<tr>\n<th><strong>接口</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>createWorldTerrain</strong></td>\n<td>提供了全球在线地形数据</td>\n</tr>\n<tr>\n<td><strong>EllipsoidTerrainProvider</strong></td>\n<td>它提供了一个全球范围内高度为0的地形，不需要额外的地形文件，就可以实时的自己来构建这个高度为0的Mesh</td>\n</tr>\n<tr>\n<td><strong>CesiumTerrainProvider</strong></td>\n<td>以cesium的格式访问地形数据</td>\n</tr>\n<tr>\n<td><strong>sampleTerrain</strong></td>\n<td>允许我们使用异步方式请求指定坐标点的高程信息</td>\n</tr>\n</tbody></table>\n<p>基本创建方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">viewer = <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">Viewer</span>(<span class=\"string\">&quot;vueCesium&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">baseLayerPicker</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 如果设置为false，将不会创建右上角图层按钮。</span></span><br><span class=\"line\">  <span class=\"attr\">geocoder</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 如果设置为false，将不会创建右上角查询(放大镜)按钮。</span></span><br><span class=\"line\">  <span class=\"attr\">navigationHelpButton</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 如果设置为false，则不会创建右上角帮助(问号)按钮。</span></span><br><span class=\"line\">  <span class=\"attr\">homeButton</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 如果设置为false，将不会创建右上角主页(房子)按钮。</span></span><br><span class=\"line\">  <span class=\"attr\">sceneModePicker</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 如果设置为false，将不会创建右上角投影方式控件(显示二三维切换按钮)。</span></span><br><span class=\"line\">  <span class=\"attr\">animation</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 如果设置为false，将不会创建左下角动画小部件。</span></span><br><span class=\"line\">  <span class=\"attr\">timeline</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 如果设置为false，则不会创建正下方时间轴小部件。</span></span><br><span class=\"line\">  <span class=\"attr\">fullscreenButton</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 如果设置为false，将不会创建右下角全屏按钮。</span></span><br><span class=\"line\">  <span class=\"attr\">selectionIndicator</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">terrainProvider</span>: <span class=\"title class_\">Cesium</span>.<span class=\"title function_\">createWorldTerrain</span>(),</span><br><span class=\"line\">  <span class=\"attr\">imageryProvider</span>:  <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">UrlTemplateImageryProvider</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">url</span>: <span class=\"string\">&quot;https://webrd03.is.autonavi.com/appmaptile?lang=zh_cn&amp;size=1&amp;scale=1&amp;style=7&amp;x=&#123;x&#125;&amp;y=&#123;y&#125;&amp;z=&#123;z&#125;&quot;</span>,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>在viewer初始化时将baseLayerPicker设置为true，在控件的最下方就是地形切换按钮</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/wk6pCGsIVmdqJZQ.png\" alt=\"null\"><br>左边对应是EllipsoidTerrainProvider，右边对应是createWorldTerrain。</p>\n<h2 id=\"2-2离线地形\"><a href=\"#2-2离线地形\" class=\"headerlink\" title=\"2.2离线地形\"></a>2.2离线地形</h2><p>加载离线地形图层和影像图层的操作时一致的。使用CesiumTerrainProvider接口</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> terrainProvider = newCesium.<span class=\"title class_\">CesiumTerrainProvider</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;xxxxxx&#x27;</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-3地形数据采样\"><a href=\"#2-3地形数据采样\" class=\"headerlink\" title=\"2.3地形数据采样\"></a>2.3地形数据采样</h2><p>这个需要我们用到sampleTerra接口，根据文档我们可知，sampleTerrain返回是promise异步类型对象，需要使用when接口调用获取结果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> terrainProvider = <span class=\"title class_\">Cesium</span>.<span class=\"title function_\">createWorldTerrain</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> positions = [</span><br><span class=\"line\">    <span class=\"title class_\">Cesium</span>.<span class=\"property\">Cartographic</span>.<span class=\"title function_\">fromDegrees</span>(<span class=\"number\">86.925145</span>, <span class=\"number\">27.988257</span>),</span><br><span class=\"line\">    <span class=\"title class_\">Cesium</span>.<span class=\"property\">Cartographic</span>.<span class=\"title function_\">fromDegrees</span>(<span class=\"number\">87.0</span>, <span class=\"number\">28.0</span>)</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"keyword\">var</span> promise = <span class=\"title class_\">Cesium</span>.<span class=\"title function_\">sampleTerrain</span>(terrainProvider, <span class=\"number\">11</span>, positions);</span><br><span class=\"line\"><span class=\"title class_\">Cesium</span>.<span class=\"title function_\">when</span>(promise, <span class=\"keyword\">function</span>(<span class=\"params\">updatedPositions</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// positions[0].height and positions[1].height have been updated.</span></span><br><span class=\"line\">    <span class=\"comment\">// updatedPositions is just a reference to positions.</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":489,"excerpt":"","more":"<h2 id=\"1-创建地形图层\"><a href=\"#1-创建地形图层\" class=\"headerlink\" title=\"1.创建地形图层\"></a>1.创建地形图层</h2><table>\n<thead>\n<tr>\n<th><strong>接口</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>createWorldTerrain</strong></td>\n<td>提供了全球在线地形数据</td>\n</tr>\n<tr>\n<td><strong>EllipsoidTerrainProvider</strong></td>\n<td>它提供了一个全球范围内高度为0的地形，不需要额外的地形文件，就可以实时的自己来构建这个高度为0的Mesh</td>\n</tr>\n<tr>\n<td><strong>CesiumTerrainProvider</strong></td>\n<td>以cesium的格式访问地形数据</td>\n</tr>\n<tr>\n<td><strong>sampleTerrain</strong></td>\n<td>允许我们使用异步方式请求指定坐标点的高程信息</td>\n</tr>\n</tbody></table>\n<p>基本创建方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">viewer = <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">Viewer</span>(<span class=\"string\">&quot;vueCesium&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">baseLayerPicker</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 如果设置为false，将不会创建右上角图层按钮。</span></span><br><span class=\"line\">  <span class=\"attr\">geocoder</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 如果设置为false，将不会创建右上角查询(放大镜)按钮。</span></span><br><span class=\"line\">  <span class=\"attr\">navigationHelpButton</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 如果设置为false，则不会创建右上角帮助(问号)按钮。</span></span><br><span class=\"line\">  <span class=\"attr\">homeButton</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 如果设置为false，将不会创建右上角主页(房子)按钮。</span></span><br><span class=\"line\">  <span class=\"attr\">sceneModePicker</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 如果设置为false，将不会创建右上角投影方式控件(显示二三维切换按钮)。</span></span><br><span class=\"line\">  <span class=\"attr\">animation</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 如果设置为false，将不会创建左下角动画小部件。</span></span><br><span class=\"line\">  <span class=\"attr\">timeline</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 如果设置为false，则不会创建正下方时间轴小部件。</span></span><br><span class=\"line\">  <span class=\"attr\">fullscreenButton</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 如果设置为false，将不会创建右下角全屏按钮。</span></span><br><span class=\"line\">  <span class=\"attr\">selectionIndicator</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">terrainProvider</span>: <span class=\"title class_\">Cesium</span>.<span class=\"title function_\">createWorldTerrain</span>(),</span><br><span class=\"line\">  <span class=\"attr\">imageryProvider</span>:  <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">UrlTemplateImageryProvider</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">url</span>: <span class=\"string\">&quot;https://webrd03.is.autonavi.com/appmaptile?lang=zh_cn&amp;size=1&amp;scale=1&amp;style=7&amp;x=&#123;x&#125;&amp;y=&#123;y&#125;&amp;z=&#123;z&#125;&quot;</span>,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>在viewer初始化时将baseLayerPicker设置为true，在控件的最下方就是地形切换按钮</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/wk6pCGsIVmdqJZQ.png\" alt=\"null\"><br>左边对应是EllipsoidTerrainProvider，右边对应是createWorldTerrain。</p>\n<h2 id=\"2-2离线地形\"><a href=\"#2-2离线地形\" class=\"headerlink\" title=\"2.2离线地形\"></a>2.2离线地形</h2><p>加载离线地形图层和影像图层的操作时一致的。使用CesiumTerrainProvider接口</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> terrainProvider = newCesium.<span class=\"title class_\">CesiumTerrainProvider</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;xxxxxx&#x27;</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-3地形数据采样\"><a href=\"#2-3地形数据采样\" class=\"headerlink\" title=\"2.3地形数据采样\"></a>2.3地形数据采样</h2><p>这个需要我们用到sampleTerra接口，根据文档我们可知，sampleTerrain返回是promise异步类型对象，需要使用when接口调用获取结果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> terrainProvider = <span class=\"title class_\">Cesium</span>.<span class=\"title function_\">createWorldTerrain</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> positions = [</span><br><span class=\"line\">    <span class=\"title class_\">Cesium</span>.<span class=\"property\">Cartographic</span>.<span class=\"title function_\">fromDegrees</span>(<span class=\"number\">86.925145</span>, <span class=\"number\">27.988257</span>),</span><br><span class=\"line\">    <span class=\"title class_\">Cesium</span>.<span class=\"property\">Cartographic</span>.<span class=\"title function_\">fromDegrees</span>(<span class=\"number\">87.0</span>, <span class=\"number\">28.0</span>)</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"keyword\">var</span> promise = <span class=\"title class_\">Cesium</span>.<span class=\"title function_\">sampleTerrain</span>(terrainProvider, <span class=\"number\">11</span>, positions);</span><br><span class=\"line\"><span class=\"title class_\">Cesium</span>.<span class=\"title function_\">when</span>(promise, <span class=\"keyword\">function</span>(<span class=\"params\">updatedPositions</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// positions[0].height and positions[1].height have been updated.</span></span><br><span class=\"line\">    <span class=\"comment\">// updatedPositions is just a reference to positions.</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n"},{"title":"cesium加载矢量数据","date":"2022-03-08T09:20:28.000Z","_content":"\n## 1.加载GeoJson、KML、CZML数据\n\n这几类数据都是矢量数据，所以这里放到一起介绍\n\n### 1.1GeoJson\n\nGeoJson是一种基于JSON的地理空间数据交换格式，它定义了几种类型JSON对象以及它们组合在一起的方法，以表示有关地理要素、属性和它们的空间范围的数据。\n\nCesium加载GeoJson的原理是先load数据，然后在对load后的entity逐一设置。具体方法如下：\n\n```javascript\nlet dataSource = new Cesium.GeoJsonDataSource();\n\nvar promise = dataSource.load(jiangsu); // json路径，load后得到一个promise对象\n\npromise.then((datasource) => {\n  viewer.dataSources.add(datasource); // 加入到场景中\n  var entities = datasource.entities.values; // \n  for (var i = 0; i < entities.length; i++) {\n    var entity = entities[i];\n    var name = entity.name;\n    let color = that.colorHash[name];\n    if (!color) {\n      color = Cesium.Color.fromRandom({ alpha: 0.5 });\n      that.colorHash[name] = color;\n    }\n    entity.polygon.material = color;\n    entity.polygon.outline = false;\n    entity.polygon.extrudedHeight = entity.properties.area;\n  }\n```\n\n以上代码生成了江苏省各市的地形图\n\n![null](https://s2.loli.net/2024/01/08/ThFqoA6jfSVdmsr.png)\n\n### 1.2 KML\n\nKML是基于XML语法标准的一种标记语言，采用标记结构，含有嵌套的元素和属性，应用说Google Earth、Google Map等地图应用中。\n\n其加载方式跟GeoJson相同，剩下的处理逻辑也和GeoJson一致，这里不做过多说明。\n\n```javascript\nvar promise = Cesium.KmlDataSource.load('data.kml');C\n```\n\n### 1.3CZML\n\nCZML是Cesium定义的一种描述动态场景的JSON结构，它可以用来描述点、线、布告板、模型以及其他的图元，同时定义他们是怎样随时间变化的。Cesium与CZML的关系就如同Google Earth和KML的关系。\n\n一个基础的CZML结构如下：\n\n```json\n[\n  {\n    \"id\":\"document\",\n    \"version\":\"1.0\"\n  },\n  {\n    \"id\":\"Vehicle\"\n    //\n  }\n]\n```\n\nCZML时间相关属性如下，注意，这里的时间为UTC（协调世界时），而我们国家通常使用的是UTC+8也就是北京时间，所以要注意。\n\n```json\n{\n    // ...  \n    \"someInterpolatableProperty\": {  \n        \"cartesian\": [  \n            \"2012-04-30T12:00Z\", 1.0, 2.0, 3.0, //表示当时间为2012-04-30T12:00Z，坐标为(1,2,3)\n            \"2012-04-30T12:01Z\", 4.0, 5.0, 6.0, //表示当时间为2012-04-30T12:01Z，坐标为(4,5,6)\n            \"2012-04-30T12:02Z\", 7.0, 8.0, 9.0  //表示当时间为2012-04-30T12:02Z，坐标为(7,8,9)\n        ]  \n    }  \n}\n{  \n    // ...  \n    \"someInterpolatableProperty\": {  \n        \"epoch\": \"2012-04-30T12:00Z\", //表示时间起点为2012-04-30T12:00：00 \n        \"cartesian\": [  \n            0.0, 1.0, 2.0, 3.0,  //从起点开始，第0秒时坐标为(1,2,3)\n            60.0, 4.0, 5.0, 6.0, //从起点开始，第60秒时坐标为(4,5,6) \n            120.0, 7.0, 8.0, 9.0 //从起点开始，第120秒时坐标为(7,8,9) \n        ]  \n    }  \n}\n```\n\n| 名称                   | Scope 范围 | JSON类型         | 说明                                                         |\n| ---------------------- | ---------- | ---------------- | ------------------------------------------------------------ |\n| epoch                  | Packet     | string           | 使用ISO8601规范来表示日期和时间                              |\n| nextTime               | Packet     | string or number | 在时间间隔内下一个采样的时间，可以通过ISO8061方式，也可以通过与epoch秒数来定义。它决定了不同packet之间的采样是否有停顿。 |\n| previousTime           | Packet     | String or number | 在时间间隔内前一个采样的时间，可以通过ISO8061方式，也可以通过与epoch秒数来定义，它决定了不同packet之间的采样是否有停顿。 |\n| InterpolationAlgorithm | Interval   | String           | 用于插值的算法，有LAGTANGE，HERMITE和GEODESIC。默认是LAGRANGE。如果位置不在该采样区间，那么这个属性值会被忽略。 |\n| interpolationDegree    | Interval   | Number           | 定义了用来插值所使用的多项式的次数，1表示线性差值，2表示二次插值法，默认为1。如果使用GEODESIC插值算法，那么这个属性将被忽略。 |\n\n其他具体介绍可以查阅相关资料。CZML的加载处理和上面两种类型一样。\n\n```json\ndataSource = new Cesium.CzmlDataSource();\nvar czml = 'data/Vehicle.czml';\ndataSource.load(czml);\n```\n\n## 2.加载3D Tiles\n\n当加载大量的三维对象数据时，我们当然可以使用上面三种方式加载，但是性能得不到保障。\n有没有更好的解决方案呢？？？有，Cesium提供的3D Tiles格式。传统的倾斜摄影、点云、三维模型数据都可以通过工具转换成3D Tiles格式。\n\n3D Tiles可以显示建筑物、地标乃至森林广告牌等等以及其对应的属性信息。每个3DTiles就是一个3D对象，具体的数据范围等等信息在tileset.json中定义。\n\n### 2.1 加载\n\n```json\n var tileset = viewer.scene.primitives.add(new Cesium.Cesium3DTileset({\n     url: 'xxxxx/tileset.json'\n }));\n\ntileset.readyPromise.then(function () {\n  viewer.camera.viewBoundingSphere(tileset.boundingSphere, new Cesium.HeadingPitchRange(0, -0.5, 0));\n  viewer.camera.lookAtTransform(Cesium.Matrix4.IDENTITY);\n}).otherwise(function (error) {\n  // xxxxx\n});\n```\n\n### 2.2 Style\n\n3D Tiles 样式语言可定义数据集中要素显示的规则，包括颜色、显示与否等等。\n\n```json\nosmBuildingsTileset.style = new Cesium.Cesium3DTileStyle({\n  defines: {\n    distanceFromComplex:\n      \"distance(vec2(${feature['cesium#longitude']}, ${feature['cesium#latitude']}), vec2(144.96007, -37.82249))\",\n  },\n  color: {\n    conditions: [\n      [\"${distanceFromComplex} > 0.010\", \"color('#d65c5c')\"],\n      [\"${distanceFromComplex} > 0.006\", \"color('#f58971')\"],\n      [\"${distanceFromComplex} > 0.002\", \"color('#f5af71')\"],\n      [\"${distanceFromComplex} > 0.0001\", \"color('#f5ec71')\"],\n      [\"true\", \"color('#ffffff')\"],\n    ],\n  },\n});\n```\n\n注意conditions中条件必须闭合，不能出现分类不完整，所以一般最后会加一个true项，相当于default。\n\n生成如下效果\n\n![null](https://s2.loli.net/2024/01/08/5Nr4yYbtiHRd6Jk.png)\n\n### 2.3 支持的格式\n\n3D tiles是由tileset.json和tile文件构成，tile文件格式可以是.b3dm、.i3dm、.pnts、.vctr和.cmpt中的任一种。\n\n| **格式** | **说明**                           |\n| -------- | ---------------------------------- |\n| b3dm     | 用于展示城市建筑等大规模的3D对象   |\n| l3dm     | 用于展示树、风力发电机模型等       |\n| pnts     | 用于展示大量的3D点                 |\n| vctr     | 用于展示矢量元素，代替KML？        |\n| cmpt     | 以上不同格式的切片组合到一个切片中 |\n\ntileset.json里的具体字段自行查阅官方文档。\n","source":"_posts/cesium加载矢量数据.md","raw":"---\ntitle: cesium加载矢量数据\ndate: 2022-03-08 17:20:28\ntags:\n    - webgl\n    - cesium\n---\n\n## 1.加载GeoJson、KML、CZML数据\n\n这几类数据都是矢量数据，所以这里放到一起介绍\n\n### 1.1GeoJson\n\nGeoJson是一种基于JSON的地理空间数据交换格式，它定义了几种类型JSON对象以及它们组合在一起的方法，以表示有关地理要素、属性和它们的空间范围的数据。\n\nCesium加载GeoJson的原理是先load数据，然后在对load后的entity逐一设置。具体方法如下：\n\n```javascript\nlet dataSource = new Cesium.GeoJsonDataSource();\n\nvar promise = dataSource.load(jiangsu); // json路径，load后得到一个promise对象\n\npromise.then((datasource) => {\n  viewer.dataSources.add(datasource); // 加入到场景中\n  var entities = datasource.entities.values; // \n  for (var i = 0; i < entities.length; i++) {\n    var entity = entities[i];\n    var name = entity.name;\n    let color = that.colorHash[name];\n    if (!color) {\n      color = Cesium.Color.fromRandom({ alpha: 0.5 });\n      that.colorHash[name] = color;\n    }\n    entity.polygon.material = color;\n    entity.polygon.outline = false;\n    entity.polygon.extrudedHeight = entity.properties.area;\n  }\n```\n\n以上代码生成了江苏省各市的地形图\n\n![null](https://s2.loli.net/2024/01/08/ThFqoA6jfSVdmsr.png)\n\n### 1.2 KML\n\nKML是基于XML语法标准的一种标记语言，采用标记结构，含有嵌套的元素和属性，应用说Google Earth、Google Map等地图应用中。\n\n其加载方式跟GeoJson相同，剩下的处理逻辑也和GeoJson一致，这里不做过多说明。\n\n```javascript\nvar promise = Cesium.KmlDataSource.load('data.kml');C\n```\n\n### 1.3CZML\n\nCZML是Cesium定义的一种描述动态场景的JSON结构，它可以用来描述点、线、布告板、模型以及其他的图元，同时定义他们是怎样随时间变化的。Cesium与CZML的关系就如同Google Earth和KML的关系。\n\n一个基础的CZML结构如下：\n\n```json\n[\n  {\n    \"id\":\"document\",\n    \"version\":\"1.0\"\n  },\n  {\n    \"id\":\"Vehicle\"\n    //\n  }\n]\n```\n\nCZML时间相关属性如下，注意，这里的时间为UTC（协调世界时），而我们国家通常使用的是UTC+8也就是北京时间，所以要注意。\n\n```json\n{\n    // ...  \n    \"someInterpolatableProperty\": {  \n        \"cartesian\": [  \n            \"2012-04-30T12:00Z\", 1.0, 2.0, 3.0, //表示当时间为2012-04-30T12:00Z，坐标为(1,2,3)\n            \"2012-04-30T12:01Z\", 4.0, 5.0, 6.0, //表示当时间为2012-04-30T12:01Z，坐标为(4,5,6)\n            \"2012-04-30T12:02Z\", 7.0, 8.0, 9.0  //表示当时间为2012-04-30T12:02Z，坐标为(7,8,9)\n        ]  \n    }  \n}\n{  \n    // ...  \n    \"someInterpolatableProperty\": {  \n        \"epoch\": \"2012-04-30T12:00Z\", //表示时间起点为2012-04-30T12:00：00 \n        \"cartesian\": [  \n            0.0, 1.0, 2.0, 3.0,  //从起点开始，第0秒时坐标为(1,2,3)\n            60.0, 4.0, 5.0, 6.0, //从起点开始，第60秒时坐标为(4,5,6) \n            120.0, 7.0, 8.0, 9.0 //从起点开始，第120秒时坐标为(7,8,9) \n        ]  \n    }  \n}\n```\n\n| 名称                   | Scope 范围 | JSON类型         | 说明                                                         |\n| ---------------------- | ---------- | ---------------- | ------------------------------------------------------------ |\n| epoch                  | Packet     | string           | 使用ISO8601规范来表示日期和时间                              |\n| nextTime               | Packet     | string or number | 在时间间隔内下一个采样的时间，可以通过ISO8061方式，也可以通过与epoch秒数来定义。它决定了不同packet之间的采样是否有停顿。 |\n| previousTime           | Packet     | String or number | 在时间间隔内前一个采样的时间，可以通过ISO8061方式，也可以通过与epoch秒数来定义，它决定了不同packet之间的采样是否有停顿。 |\n| InterpolationAlgorithm | Interval   | String           | 用于插值的算法，有LAGTANGE，HERMITE和GEODESIC。默认是LAGRANGE。如果位置不在该采样区间，那么这个属性值会被忽略。 |\n| interpolationDegree    | Interval   | Number           | 定义了用来插值所使用的多项式的次数，1表示线性差值，2表示二次插值法，默认为1。如果使用GEODESIC插值算法，那么这个属性将被忽略。 |\n\n其他具体介绍可以查阅相关资料。CZML的加载处理和上面两种类型一样。\n\n```json\ndataSource = new Cesium.CzmlDataSource();\nvar czml = 'data/Vehicle.czml';\ndataSource.load(czml);\n```\n\n## 2.加载3D Tiles\n\n当加载大量的三维对象数据时，我们当然可以使用上面三种方式加载，但是性能得不到保障。\n有没有更好的解决方案呢？？？有，Cesium提供的3D Tiles格式。传统的倾斜摄影、点云、三维模型数据都可以通过工具转换成3D Tiles格式。\n\n3D Tiles可以显示建筑物、地标乃至森林广告牌等等以及其对应的属性信息。每个3DTiles就是一个3D对象，具体的数据范围等等信息在tileset.json中定义。\n\n### 2.1 加载\n\n```json\n var tileset = viewer.scene.primitives.add(new Cesium.Cesium3DTileset({\n     url: 'xxxxx/tileset.json'\n }));\n\ntileset.readyPromise.then(function () {\n  viewer.camera.viewBoundingSphere(tileset.boundingSphere, new Cesium.HeadingPitchRange(0, -0.5, 0));\n  viewer.camera.lookAtTransform(Cesium.Matrix4.IDENTITY);\n}).otherwise(function (error) {\n  // xxxxx\n});\n```\n\n### 2.2 Style\n\n3D Tiles 样式语言可定义数据集中要素显示的规则，包括颜色、显示与否等等。\n\n```json\nosmBuildingsTileset.style = new Cesium.Cesium3DTileStyle({\n  defines: {\n    distanceFromComplex:\n      \"distance(vec2(${feature['cesium#longitude']}, ${feature['cesium#latitude']}), vec2(144.96007, -37.82249))\",\n  },\n  color: {\n    conditions: [\n      [\"${distanceFromComplex} > 0.010\", \"color('#d65c5c')\"],\n      [\"${distanceFromComplex} > 0.006\", \"color('#f58971')\"],\n      [\"${distanceFromComplex} > 0.002\", \"color('#f5af71')\"],\n      [\"${distanceFromComplex} > 0.0001\", \"color('#f5ec71')\"],\n      [\"true\", \"color('#ffffff')\"],\n    ],\n  },\n});\n```\n\n注意conditions中条件必须闭合，不能出现分类不完整，所以一般最后会加一个true项，相当于default。\n\n生成如下效果\n\n![null](https://s2.loli.net/2024/01/08/5Nr4yYbtiHRd6Jk.png)\n\n### 2.3 支持的格式\n\n3D tiles是由tileset.json和tile文件构成，tile文件格式可以是.b3dm、.i3dm、.pnts、.vctr和.cmpt中的任一种。\n\n| **格式** | **说明**                           |\n| -------- | ---------------------------------- |\n| b3dm     | 用于展示城市建筑等大规模的3D对象   |\n| l3dm     | 用于展示树、风力发电机模型等       |\n| pnts     | 用于展示大量的3D点                 |\n| vctr     | 用于展示矢量元素，代替KML？        |\n| cmpt     | 以上不同格式的切片组合到一个切片中 |\n\ntileset.json里的具体字段自行查阅官方文档。\n","slug":"cesium加载矢量数据","published":1,"updated":"2024-01-15T07:33:55.887Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrq64z6d0007soip1z5iaz2a","content":"<h2 id=\"1-加载GeoJson、KML、CZML数据\"><a href=\"#1-加载GeoJson、KML、CZML数据\" class=\"headerlink\" title=\"1.加载GeoJson、KML、CZML数据\"></a>1.加载GeoJson、KML、CZML数据</h2><p>这几类数据都是矢量数据，所以这里放到一起介绍</p>\n<h3 id=\"1-1GeoJson\"><a href=\"#1-1GeoJson\" class=\"headerlink\" title=\"1.1GeoJson\"></a>1.1GeoJson</h3><p>GeoJson是一种基于JSON的地理空间数据交换格式，它定义了几种类型JSON对象以及它们组合在一起的方法，以表示有关地理要素、属性和它们的空间范围的数据。</p>\n<p>Cesium加载GeoJson的原理是先load数据，然后在对load后的entity逐一设置。具体方法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> dataSource = <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">GeoJsonDataSource</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> promise = dataSource.<span class=\"title function_\">load</span>(jiangsu); <span class=\"comment\">// json路径，load后得到一个promise对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">promise.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">datasource</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  viewer.<span class=\"property\">dataSources</span>.<span class=\"title function_\">add</span>(datasource); <span class=\"comment\">// 加入到场景中</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> entities = datasource.<span class=\"property\">entities</span>.<span class=\"property\">values</span>; <span class=\"comment\">// </span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; entities.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> entity = entities[i];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = entity.<span class=\"property\">name</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> color = that.<span class=\"property\">colorHash</span>[name];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!color) &#123;</span><br><span class=\"line\">      color = <span class=\"title class_\">Cesium</span>.<span class=\"property\">Color</span>.<span class=\"title function_\">fromRandom</span>(&#123; <span class=\"attr\">alpha</span>: <span class=\"number\">0.5</span> &#125;);</span><br><span class=\"line\">      that.<span class=\"property\">colorHash</span>[name] = color;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    entity.<span class=\"property\">polygon</span>.<span class=\"property\">material</span> = color;</span><br><span class=\"line\">    entity.<span class=\"property\">polygon</span>.<span class=\"property\">outline</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    entity.<span class=\"property\">polygon</span>.<span class=\"property\">extrudedHeight</span> = entity.<span class=\"property\">properties</span>.<span class=\"property\">area</span>;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上代码生成了江苏省各市的地形图</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/ThFqoA6jfSVdmsr.png\" alt=\"null\"></p>\n<h3 id=\"1-2-KML\"><a href=\"#1-2-KML\" class=\"headerlink\" title=\"1.2 KML\"></a>1.2 KML</h3><p>KML是基于XML语法标准的一种标记语言，采用标记结构，含有嵌套的元素和属性，应用说Google Earth、Google Map等地图应用中。</p>\n<p>其加载方式跟GeoJson相同，剩下的处理逻辑也和GeoJson一致，这里不做过多说明。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> promise = <span class=\"title class_\">Cesium</span>.<span class=\"property\">KmlDataSource</span>.<span class=\"title function_\">load</span>(<span class=\"string\">&#x27;data.kml&#x27;</span>);C</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-3CZML\"><a href=\"#1-3CZML\" class=\"headerlink\" title=\"1.3CZML\"></a>1.3CZML</h3><p>CZML是Cesium定义的一种描述动态场景的JSON结构，它可以用来描述点、线、布告板、模型以及其他的图元，同时定义他们是怎样随时间变化的。Cesium与CZML的关系就如同Google Earth和KML的关系。</p>\n<p>一个基础的CZML结构如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">[</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;document&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;1.0&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;Vehicle&quot;</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure>\n\n<p>CZML时间相关属性如下，注意，这里的时间为UTC（协调世界时），而我们国家通常使用的是UTC+8也就是北京时间，所以要注意。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">// ...  </span></span><br><span class=\"line\">    <span class=\"attr\">&quot;someInterpolatableProperty&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span>  </span><br><span class=\"line\">        <span class=\"attr\">&quot;cartesian&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span>  </span><br><span class=\"line\">            <span class=\"string\">&quot;2012-04-30T12:00Z&quot;</span><span class=\"punctuation\">,</span> <span class=\"number\">1.0</span><span class=\"punctuation\">,</span> <span class=\"number\">2.0</span><span class=\"punctuation\">,</span> <span class=\"number\">3.0</span><span class=\"punctuation\">,</span> <span class=\"comment\">//表示当时间为2012-04-30T12:00Z，坐标为(1,2,3)</span></span><br><span class=\"line\">            <span class=\"string\">&quot;2012-04-30T12:01Z&quot;</span><span class=\"punctuation\">,</span> <span class=\"number\">4.0</span><span class=\"punctuation\">,</span> <span class=\"number\">5.0</span><span class=\"punctuation\">,</span> <span class=\"number\">6.0</span><span class=\"punctuation\">,</span> <span class=\"comment\">//表示当时间为2012-04-30T12:01Z，坐标为(4,5,6)</span></span><br><span class=\"line\">            <span class=\"string\">&quot;2012-04-30T12:02Z&quot;</span><span class=\"punctuation\">,</span> <span class=\"number\">7.0</span><span class=\"punctuation\">,</span> <span class=\"number\">8.0</span><span class=\"punctuation\">,</span> <span class=\"number\">9.0</span>  <span class=\"comment\">//表示当时间为2012-04-30T12:02Z，坐标为(7,8,9)</span></span><br><span class=\"line\">        <span class=\"punctuation\">]</span>  </span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span>  </span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span>  </span><br><span class=\"line\">    <span class=\"comment\">// ...  </span></span><br><span class=\"line\">    <span class=\"attr\">&quot;someInterpolatableProperty&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span>  </span><br><span class=\"line\">        <span class=\"attr\">&quot;epoch&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;2012-04-30T12:00Z&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">//表示时间起点为2012-04-30T12:00：00 </span></span><br><span class=\"line\">        <span class=\"attr\">&quot;cartesian&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span>  </span><br><span class=\"line\">            <span class=\"number\">0.0</span><span class=\"punctuation\">,</span> <span class=\"number\">1.0</span><span class=\"punctuation\">,</span> <span class=\"number\">2.0</span><span class=\"punctuation\">,</span> <span class=\"number\">3.0</span><span class=\"punctuation\">,</span>  <span class=\"comment\">//从起点开始，第0秒时坐标为(1,2,3)</span></span><br><span class=\"line\">            <span class=\"number\">60.0</span><span class=\"punctuation\">,</span> <span class=\"number\">4.0</span><span class=\"punctuation\">,</span> <span class=\"number\">5.0</span><span class=\"punctuation\">,</span> <span class=\"number\">6.0</span><span class=\"punctuation\">,</span> <span class=\"comment\">//从起点开始，第60秒时坐标为(4,5,6) </span></span><br><span class=\"line\">            <span class=\"number\">120.0</span><span class=\"punctuation\">,</span> <span class=\"number\">7.0</span><span class=\"punctuation\">,</span> <span class=\"number\">8.0</span><span class=\"punctuation\">,</span> <span class=\"number\">9.0</span> <span class=\"comment\">//从起点开始，第120秒时坐标为(7,8,9) </span></span><br><span class=\"line\">        <span class=\"punctuation\">]</span>  </span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span>  </span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>Scope 范围</th>\n<th>JSON类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>epoch</td>\n<td>Packet</td>\n<td>string</td>\n<td>使用ISO8601规范来表示日期和时间</td>\n</tr>\n<tr>\n<td>nextTime</td>\n<td>Packet</td>\n<td>string or number</td>\n<td>在时间间隔内下一个采样的时间，可以通过ISO8061方式，也可以通过与epoch秒数来定义。它决定了不同packet之间的采样是否有停顿。</td>\n</tr>\n<tr>\n<td>previousTime</td>\n<td>Packet</td>\n<td>String or number</td>\n<td>在时间间隔内前一个采样的时间，可以通过ISO8061方式，也可以通过与epoch秒数来定义，它决定了不同packet之间的采样是否有停顿。</td>\n</tr>\n<tr>\n<td>InterpolationAlgorithm</td>\n<td>Interval</td>\n<td>String</td>\n<td>用于插值的算法，有LAGTANGE，HERMITE和GEODESIC。默认是LAGRANGE。如果位置不在该采样区间，那么这个属性值会被忽略。</td>\n</tr>\n<tr>\n<td>interpolationDegree</td>\n<td>Interval</td>\n<td>Number</td>\n<td>定义了用来插值所使用的多项式的次数，1表示线性差值，2表示二次插值法，默认为1。如果使用GEODESIC插值算法，那么这个属性将被忽略。</td>\n</tr>\n</tbody></table>\n<p>其他具体介绍可以查阅相关资料。CZML的加载处理和上面两种类型一样。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataSource = new Cesium.CzmlDataSource();</span><br><span class=\"line\">var czml = &#x27;data/Vehicle.czml&#x27;;</span><br><span class=\"line\">dataSource.load(czml);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-加载3D-Tiles\"><a href=\"#2-加载3D-Tiles\" class=\"headerlink\" title=\"2.加载3D Tiles\"></a>2.加载3D Tiles</h2><p>当加载大量的三维对象数据时，我们当然可以使用上面三种方式加载，但是性能得不到保障。<br>有没有更好的解决方案呢？？？有，Cesium提供的3D Tiles格式。传统的倾斜摄影、点云、三维模型数据都可以通过工具转换成3D Tiles格式。</p>\n<p>3D Tiles可以显示建筑物、地标乃至森林广告牌等等以及其对应的属性信息。每个3DTiles就是一个3D对象，具体的数据范围等等信息在tileset.json中定义。</p>\n<h3 id=\"2-1-加载\"><a href=\"#2-1-加载\" class=\"headerlink\" title=\"2.1 加载\"></a>2.1 加载</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> var tileset = viewer.scene.primitives.add(new Cesium.Cesium3DTileset(<span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">     url<span class=\"punctuation\">:</span> &#x27;xxxxx/tileset.json&#x27;</span><br><span class=\"line\"> <span class=\"punctuation\">&#125;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">tileset.readyPromise.then(function () <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  viewer.camera.viewBoundingSphere(tileset.boundingSphere<span class=\"punctuation\">,</span> new Cesium.HeadingPitchRange(<span class=\"number\">0</span><span class=\"punctuation\">,</span> <span class=\"number\">-0.5</span><span class=\"punctuation\">,</span> <span class=\"number\">0</span>));</span><br><span class=\"line\">  viewer.camera.lookAtTransform(Cesium.Matrix4.IDENTITY);</span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span>).otherwise(function (error) <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"comment\">// xxxxx</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-Style\"><a href=\"#2-2-Style\" class=\"headerlink\" title=\"2.2 Style\"></a>2.2 Style</h3><p>3D Tiles 样式语言可定义数据集中要素显示的规则，包括颜色、显示与否等等。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">osmBuildingsTileset.style = new Cesium.Cesium3DTileStyle(<span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  defines<span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    distanceFromComplex<span class=\"punctuation\">:</span></span><br><span class=\"line\">      <span class=\"string\">&quot;distance(vec2($&#123;feature[&#x27;cesium#longitude&#x27;]&#125;, $&#123;feature[&#x27;cesium#latitude&#x27;]&#125;), vec2(144.96007, -37.82249))&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  color<span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    conditions<span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">      <span class=\"punctuation\">[</span><span class=\"string\">&quot;$&#123;distanceFromComplex&#125; &gt; 0.010&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;color(&#x27;#d65c5c&#x27;)&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"punctuation\">[</span><span class=\"string\">&quot;$&#123;distanceFromComplex&#125; &gt; 0.006&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;color(&#x27;#f58971&#x27;)&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"punctuation\">[</span><span class=\"string\">&quot;$&#123;distanceFromComplex&#125; &gt; 0.002&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;color(&#x27;#f5af71&#x27;)&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"punctuation\">[</span><span class=\"string\">&quot;$&#123;distanceFromComplex&#125; &gt; 0.0001&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;color(&#x27;#f5ec71&#x27;)&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"punctuation\">[</span><span class=\"string\">&quot;true&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;color(&#x27;#ffffff&#x27;)&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>注意conditions中条件必须闭合，不能出现分类不完整，所以一般最后会加一个true项，相当于default。</p>\n<p>生成如下效果</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/5Nr4yYbtiHRd6Jk.png\" alt=\"null\"></p>\n<h3 id=\"2-3-支持的格式\"><a href=\"#2-3-支持的格式\" class=\"headerlink\" title=\"2.3 支持的格式\"></a>2.3 支持的格式</h3><p>3D tiles是由tileset.json和tile文件构成，tile文件格式可以是.b3dm、.i3dm、.pnts、.vctr和.cmpt中的任一种。</p>\n<table>\n<thead>\n<tr>\n<th><strong>格式</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>b3dm</td>\n<td>用于展示城市建筑等大规模的3D对象</td>\n</tr>\n<tr>\n<td>l3dm</td>\n<td>用于展示树、风力发电机模型等</td>\n</tr>\n<tr>\n<td>pnts</td>\n<td>用于展示大量的3D点</td>\n</tr>\n<tr>\n<td>vctr</td>\n<td>用于展示矢量元素，代替KML？</td>\n</tr>\n<tr>\n<td>cmpt</td>\n<td>以上不同格式的切片组合到一个切片中</td>\n</tr>\n</tbody></table>\n<p>tileset.json里的具体字段自行查阅官方文档。</p>\n","site":{"data":{}},"length":1249,"excerpt":"","more":"<h2 id=\"1-加载GeoJson、KML、CZML数据\"><a href=\"#1-加载GeoJson、KML、CZML数据\" class=\"headerlink\" title=\"1.加载GeoJson、KML、CZML数据\"></a>1.加载GeoJson、KML、CZML数据</h2><p>这几类数据都是矢量数据，所以这里放到一起介绍</p>\n<h3 id=\"1-1GeoJson\"><a href=\"#1-1GeoJson\" class=\"headerlink\" title=\"1.1GeoJson\"></a>1.1GeoJson</h3><p>GeoJson是一种基于JSON的地理空间数据交换格式，它定义了几种类型JSON对象以及它们组合在一起的方法，以表示有关地理要素、属性和它们的空间范围的数据。</p>\n<p>Cesium加载GeoJson的原理是先load数据，然后在对load后的entity逐一设置。具体方法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> dataSource = <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">GeoJsonDataSource</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> promise = dataSource.<span class=\"title function_\">load</span>(jiangsu); <span class=\"comment\">// json路径，load后得到一个promise对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">promise.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">datasource</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  viewer.<span class=\"property\">dataSources</span>.<span class=\"title function_\">add</span>(datasource); <span class=\"comment\">// 加入到场景中</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> entities = datasource.<span class=\"property\">entities</span>.<span class=\"property\">values</span>; <span class=\"comment\">// </span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; entities.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> entity = entities[i];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = entity.<span class=\"property\">name</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> color = that.<span class=\"property\">colorHash</span>[name];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!color) &#123;</span><br><span class=\"line\">      color = <span class=\"title class_\">Cesium</span>.<span class=\"property\">Color</span>.<span class=\"title function_\">fromRandom</span>(&#123; <span class=\"attr\">alpha</span>: <span class=\"number\">0.5</span> &#125;);</span><br><span class=\"line\">      that.<span class=\"property\">colorHash</span>[name] = color;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    entity.<span class=\"property\">polygon</span>.<span class=\"property\">material</span> = color;</span><br><span class=\"line\">    entity.<span class=\"property\">polygon</span>.<span class=\"property\">outline</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    entity.<span class=\"property\">polygon</span>.<span class=\"property\">extrudedHeight</span> = entity.<span class=\"property\">properties</span>.<span class=\"property\">area</span>;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上代码生成了江苏省各市的地形图</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/ThFqoA6jfSVdmsr.png\" alt=\"null\"></p>\n<h3 id=\"1-2-KML\"><a href=\"#1-2-KML\" class=\"headerlink\" title=\"1.2 KML\"></a>1.2 KML</h3><p>KML是基于XML语法标准的一种标记语言，采用标记结构，含有嵌套的元素和属性，应用说Google Earth、Google Map等地图应用中。</p>\n<p>其加载方式跟GeoJson相同，剩下的处理逻辑也和GeoJson一致，这里不做过多说明。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> promise = <span class=\"title class_\">Cesium</span>.<span class=\"property\">KmlDataSource</span>.<span class=\"title function_\">load</span>(<span class=\"string\">&#x27;data.kml&#x27;</span>);C</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-3CZML\"><a href=\"#1-3CZML\" class=\"headerlink\" title=\"1.3CZML\"></a>1.3CZML</h3><p>CZML是Cesium定义的一种描述动态场景的JSON结构，它可以用来描述点、线、布告板、模型以及其他的图元，同时定义他们是怎样随时间变化的。Cesium与CZML的关系就如同Google Earth和KML的关系。</p>\n<p>一个基础的CZML结构如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">[</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;document&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;1.0&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;Vehicle&quot;</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure>\n\n<p>CZML时间相关属性如下，注意，这里的时间为UTC（协调世界时），而我们国家通常使用的是UTC+8也就是北京时间，所以要注意。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">// ...  </span></span><br><span class=\"line\">    <span class=\"attr\">&quot;someInterpolatableProperty&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span>  </span><br><span class=\"line\">        <span class=\"attr\">&quot;cartesian&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span>  </span><br><span class=\"line\">            <span class=\"string\">&quot;2012-04-30T12:00Z&quot;</span><span class=\"punctuation\">,</span> <span class=\"number\">1.0</span><span class=\"punctuation\">,</span> <span class=\"number\">2.0</span><span class=\"punctuation\">,</span> <span class=\"number\">3.0</span><span class=\"punctuation\">,</span> <span class=\"comment\">//表示当时间为2012-04-30T12:00Z，坐标为(1,2,3)</span></span><br><span class=\"line\">            <span class=\"string\">&quot;2012-04-30T12:01Z&quot;</span><span class=\"punctuation\">,</span> <span class=\"number\">4.0</span><span class=\"punctuation\">,</span> <span class=\"number\">5.0</span><span class=\"punctuation\">,</span> <span class=\"number\">6.0</span><span class=\"punctuation\">,</span> <span class=\"comment\">//表示当时间为2012-04-30T12:01Z，坐标为(4,5,6)</span></span><br><span class=\"line\">            <span class=\"string\">&quot;2012-04-30T12:02Z&quot;</span><span class=\"punctuation\">,</span> <span class=\"number\">7.0</span><span class=\"punctuation\">,</span> <span class=\"number\">8.0</span><span class=\"punctuation\">,</span> <span class=\"number\">9.0</span>  <span class=\"comment\">//表示当时间为2012-04-30T12:02Z，坐标为(7,8,9)</span></span><br><span class=\"line\">        <span class=\"punctuation\">]</span>  </span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span>  </span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span>  </span><br><span class=\"line\">    <span class=\"comment\">// ...  </span></span><br><span class=\"line\">    <span class=\"attr\">&quot;someInterpolatableProperty&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span>  </span><br><span class=\"line\">        <span class=\"attr\">&quot;epoch&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;2012-04-30T12:00Z&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">//表示时间起点为2012-04-30T12:00：00 </span></span><br><span class=\"line\">        <span class=\"attr\">&quot;cartesian&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span>  </span><br><span class=\"line\">            <span class=\"number\">0.0</span><span class=\"punctuation\">,</span> <span class=\"number\">1.0</span><span class=\"punctuation\">,</span> <span class=\"number\">2.0</span><span class=\"punctuation\">,</span> <span class=\"number\">3.0</span><span class=\"punctuation\">,</span>  <span class=\"comment\">//从起点开始，第0秒时坐标为(1,2,3)</span></span><br><span class=\"line\">            <span class=\"number\">60.0</span><span class=\"punctuation\">,</span> <span class=\"number\">4.0</span><span class=\"punctuation\">,</span> <span class=\"number\">5.0</span><span class=\"punctuation\">,</span> <span class=\"number\">6.0</span><span class=\"punctuation\">,</span> <span class=\"comment\">//从起点开始，第60秒时坐标为(4,5,6) </span></span><br><span class=\"line\">            <span class=\"number\">120.0</span><span class=\"punctuation\">,</span> <span class=\"number\">7.0</span><span class=\"punctuation\">,</span> <span class=\"number\">8.0</span><span class=\"punctuation\">,</span> <span class=\"number\">9.0</span> <span class=\"comment\">//从起点开始，第120秒时坐标为(7,8,9) </span></span><br><span class=\"line\">        <span class=\"punctuation\">]</span>  </span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span>  </span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>Scope 范围</th>\n<th>JSON类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>epoch</td>\n<td>Packet</td>\n<td>string</td>\n<td>使用ISO8601规范来表示日期和时间</td>\n</tr>\n<tr>\n<td>nextTime</td>\n<td>Packet</td>\n<td>string or number</td>\n<td>在时间间隔内下一个采样的时间，可以通过ISO8061方式，也可以通过与epoch秒数来定义。它决定了不同packet之间的采样是否有停顿。</td>\n</tr>\n<tr>\n<td>previousTime</td>\n<td>Packet</td>\n<td>String or number</td>\n<td>在时间间隔内前一个采样的时间，可以通过ISO8061方式，也可以通过与epoch秒数来定义，它决定了不同packet之间的采样是否有停顿。</td>\n</tr>\n<tr>\n<td>InterpolationAlgorithm</td>\n<td>Interval</td>\n<td>String</td>\n<td>用于插值的算法，有LAGTANGE，HERMITE和GEODESIC。默认是LAGRANGE。如果位置不在该采样区间，那么这个属性值会被忽略。</td>\n</tr>\n<tr>\n<td>interpolationDegree</td>\n<td>Interval</td>\n<td>Number</td>\n<td>定义了用来插值所使用的多项式的次数，1表示线性差值，2表示二次插值法，默认为1。如果使用GEODESIC插值算法，那么这个属性将被忽略。</td>\n</tr>\n</tbody></table>\n<p>其他具体介绍可以查阅相关资料。CZML的加载处理和上面两种类型一样。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataSource = new Cesium.CzmlDataSource();</span><br><span class=\"line\">var czml = &#x27;data/Vehicle.czml&#x27;;</span><br><span class=\"line\">dataSource.load(czml);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-加载3D-Tiles\"><a href=\"#2-加载3D-Tiles\" class=\"headerlink\" title=\"2.加载3D Tiles\"></a>2.加载3D Tiles</h2><p>当加载大量的三维对象数据时，我们当然可以使用上面三种方式加载，但是性能得不到保障。<br>有没有更好的解决方案呢？？？有，Cesium提供的3D Tiles格式。传统的倾斜摄影、点云、三维模型数据都可以通过工具转换成3D Tiles格式。</p>\n<p>3D Tiles可以显示建筑物、地标乃至森林广告牌等等以及其对应的属性信息。每个3DTiles就是一个3D对象，具体的数据范围等等信息在tileset.json中定义。</p>\n<h3 id=\"2-1-加载\"><a href=\"#2-1-加载\" class=\"headerlink\" title=\"2.1 加载\"></a>2.1 加载</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> var tileset = viewer.scene.primitives.add(new Cesium.Cesium3DTileset(<span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">     url<span class=\"punctuation\">:</span> &#x27;xxxxx/tileset.json&#x27;</span><br><span class=\"line\"> <span class=\"punctuation\">&#125;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">tileset.readyPromise.then(function () <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  viewer.camera.viewBoundingSphere(tileset.boundingSphere<span class=\"punctuation\">,</span> new Cesium.HeadingPitchRange(<span class=\"number\">0</span><span class=\"punctuation\">,</span> <span class=\"number\">-0.5</span><span class=\"punctuation\">,</span> <span class=\"number\">0</span>));</span><br><span class=\"line\">  viewer.camera.lookAtTransform(Cesium.Matrix4.IDENTITY);</span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span>).otherwise(function (error) <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"comment\">// xxxxx</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-Style\"><a href=\"#2-2-Style\" class=\"headerlink\" title=\"2.2 Style\"></a>2.2 Style</h3><p>3D Tiles 样式语言可定义数据集中要素显示的规则，包括颜色、显示与否等等。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">osmBuildingsTileset.style = new Cesium.Cesium3DTileStyle(<span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  defines<span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    distanceFromComplex<span class=\"punctuation\">:</span></span><br><span class=\"line\">      <span class=\"string\">&quot;distance(vec2($&#123;feature[&#x27;cesium#longitude&#x27;]&#125;, $&#123;feature[&#x27;cesium#latitude&#x27;]&#125;), vec2(144.96007, -37.82249))&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  color<span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    conditions<span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">      <span class=\"punctuation\">[</span><span class=\"string\">&quot;$&#123;distanceFromComplex&#125; &gt; 0.010&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;color(&#x27;#d65c5c&#x27;)&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"punctuation\">[</span><span class=\"string\">&quot;$&#123;distanceFromComplex&#125; &gt; 0.006&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;color(&#x27;#f58971&#x27;)&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"punctuation\">[</span><span class=\"string\">&quot;$&#123;distanceFromComplex&#125; &gt; 0.002&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;color(&#x27;#f5af71&#x27;)&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"punctuation\">[</span><span class=\"string\">&quot;$&#123;distanceFromComplex&#125; &gt; 0.0001&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;color(&#x27;#f5ec71&#x27;)&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"punctuation\">[</span><span class=\"string\">&quot;true&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;color(&#x27;#ffffff&#x27;)&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>注意conditions中条件必须闭合，不能出现分类不完整，所以一般最后会加一个true项，相当于default。</p>\n<p>生成如下效果</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/5Nr4yYbtiHRd6Jk.png\" alt=\"null\"></p>\n<h3 id=\"2-3-支持的格式\"><a href=\"#2-3-支持的格式\" class=\"headerlink\" title=\"2.3 支持的格式\"></a>2.3 支持的格式</h3><p>3D tiles是由tileset.json和tile文件构成，tile文件格式可以是.b3dm、.i3dm、.pnts、.vctr和.cmpt中的任一种。</p>\n<table>\n<thead>\n<tr>\n<th><strong>格式</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>b3dm</td>\n<td>用于展示城市建筑等大规模的3D对象</td>\n</tr>\n<tr>\n<td>l3dm</td>\n<td>用于展示树、风力发电机模型等</td>\n</tr>\n<tr>\n<td>pnts</td>\n<td>用于展示大量的3D点</td>\n</tr>\n<tr>\n<td>vctr</td>\n<td>用于展示矢量元素，代替KML？</td>\n</tr>\n<tr>\n<td>cmpt</td>\n<td>以上不同格式的切片组合到一个切片中</td>\n</tr>\n</tbody></table>\n<p>tileset.json里的具体字段自行查阅官方文档。</p>\n"},{"title":"cesium加载地图图层","date":"2022-03-08T08:55:03.000Z","_content":"\n## 1.图层介绍\n\nCesium中的图层分为两种：一种是普通图层，包含影像、线划等普通显示图层；还有一种是地形图层，用于真实的模拟地球表面的场景，Cesium会根据加载到的地形瓦片以三维的方式显示出山川、大海等。\n\n我们先介绍影像图层，官方提供了丰富的接口给开发者自定义图层。\n\n| **接口**                                   | **说明**                                                     |\n| ------------------------------------------ | ------------------------------------------------------------ |\n| ***ArcGisMapServerImageryProvider\\***      | 支持ArcGIS Online和Server的相关服务                          |\n| ***BingMapsImageryProvider\\***             | Bing地图影像，可以指定mapStyle，详见BingMapsStyle类          |\n| ***createOpenStreetMapImageryProvider\\***  | OSM影像服务，根据不同的url选择不同的风格                     |\n| ***createTileMapServiceImageryProvider\\*** | 看文档是根据MapTiler规范，貌似是可以自己下载瓦片，发布服务，类似ArcGIS影像服务的过程 |\n| ***GoogleEarthEnteriseImageryProvider\\***  | 企业级服务                                                   |\n| ***GoogleEarthEnteriseMapsProvider\\***     | 企业级服务                                                   |\n| ***GridImageryProvider\\***                 | 渲染每一个瓦片内部的格网，了解每个瓦片的精细度               |\n| ***MapboxImageryProvider\\***               | Mapbox影像服务，根据mapId指定地图风格                        |\n| ***SingleTileImageryProvider\\***           | 单张图片的影像服务，适合离线数据或对影像数据要求并不高的场景下 |\n| ***TileCoordinatesImageryProvider\\***      | 渲染每一个瓦片的围，方便调试                                 |\n| ***UrlTemplateImageryProvider\\***          | 指定url的format模版，方便用户实现自己的Provider，比如国内的高德，腾讯等影像服务，url都是一个固定的规范，都可以通过该Provider轻松实现。而OSM也是通过该类实现的。 |\n| ***WebMapServiceImageryProvider\\***        | 符合WMS规范的影像服务都可以通过该类封装，指定具体参数实现    |\n| ***WebMapTileServiceImageryProvider\\***    | 服务WMTS1.0.0规范的影像服务，都可以通过该类实现，比如国内的天地图 |\n\n创建图层也能简单，两种方式\n\n```javascript\n// 方法1：直接在基础图层上添加图层\nviewer.imageryLayers.addImageryProvider(\n  new Cesium.UrlTemplateImageryProvider({\n      url: \"https://webrd03.is.autonavi.com/appmaptile?lang=zh_cn&size=1&scale=1&style=7&x={x}&y={y}&z={z}\",\n    });\n)\n\n// 方法2: 区别在于不是直接加载到viewer的imageryLayers而是scene的imageryLayers\n viewer.scene.imageryLayers.addImageryProvider(\n   new Cesium.UrlTemplateImageryProvider({\n      url: \"https://webrd03.is.autonavi.com/appmaptile?lang=zh_cn&size=1&scale=1&style=7&x={x}&y={y}&z={z}\",\n    });\n )\n```\n\n其实viewer.imagerLayers返回的就是viewer.scene.imagerLayers对象，两者时相等的，所以两者方法本质上没区别。\n\n![null](https://s2.loli.net/2024/01/08/6Z3xMe8tTvJ4O2r.png)\n其他创建图层的接口自行查询文档，基本大同小异。\n\n## 2.创建默认图层\n\n之前在[零基础运行Cesium地球](https://videojj-yz.yuque.com/meqmo0/hsvk77/gupvyu?view=doc_embed)一文中介绍了去除默认控件的方法，其中baseLayerPicker是控制图层选择控件的，当设置它为false需要在初始化时手动添加默认图层，否则还是会显示微软图层。方法和创建图层一致。\n\n```javascript\nviewer = new Cesium.Viewer(\"vueCesium\", {\n    baseLayerPicker: false, // 如果设置为false，将不会创建右上角图层按钮。\n    geocoder: false, // 如果设置为false，将不会创建右上角查询(放大镜)按钮。\n    navigationHelpButton: false, // 如果设置为false，则不会创建右上角帮助(问号)按钮。\n    homeButton: false, // 如果设置为false，将不会创建右上角主页(房子)按钮。\n    sceneModePicker: false, // 如果设置为false，将不会创建右上角投影方式控件(显示二三维切换按钮)。\n    animation: false, // 如果设置为false，将不会创建左下角动画小部件。\n    timeline: false, // 如果设置为false，则不会创建正下方时间轴小部件。\n    fullscreenButton: false, // 如果设置为false，将不会创建右下角全屏按钮。\n    selectionIndicator: false,\n    // terrainProvider: Cesium.createWorldTerrain(),\n    imageryProvider: new Cesium.UrlTemplateImageryProvider({\n      url: \"https://webrd03.is.autonavi.com/appmaptile?lang=zh_cn&size=1&scale=1&style=7&x={x}&y={y}&z={z}\"\n    }),\n  });\n```\n\n当然了，在baseLayerPicker为true时，Cesium也提供了方法修改默认图层，在初始化时添加imageryProviderViewModels属性即可。\n\n```javascript\nimageryProviderViewModels: imageryLayers//设置影像图列表数组\n\n// index是imagerLayers数组里的某个图层下标\nviewer.baseLayerPicker.viewModel.selectedImagery = \n              viewer.baseLayerPicker.viewModel.imageryProviderViewModels[index] \n```\n\n\n\n## 3.发布离线地图\n\n以上所有操作都是基于在线地图服务，但也存在局域网的业务场景无法加载在线地图，这就需要我们自己发布地图服务。\n图服务发布最常用的是开源工具当属GeoServer，网上一堆资源操作比较复杂，以后有机会再研究，这里介绍一种相对简单的方法，直接把地图数据切片，然后通过静态服务方式发布。\n\n### 第一步：下载原始地图数据\n\n这里我是从[地理空间数据云](https://www.gscloud.cn/sources/accessdata/343?pid=333)随便下的一份数据\n\n### 第二部：切片\n\n下载安装[cesiumLab](http://www.bjxbsj.cn/)工具\n\n![null](https://s2.loli.net/2024/01/08/fhLgouqF491biHt.png)\n导入下载的原始地图，存储类型选择散列，生成切片。\n\n![null](https://s2.loli.net/2024/01/08/Ww6rBpGXfjutkPC.png)\n\n### 第三步：部署web服务\n\nweb服务很多，比如tomcat、nginx、node等，这里使用nginx来发布。\n修改nginx.conf配置文件，静态文件发布我们地图服务，路径就是上面地图切片的的输出路径。\n\n![null](https://s2.loli.net/2024/01/08/YRXKTaHdDitgjZl.png)\n使用离线地图\n\n```javascript\nviewer = new Cesium.Viewer(\"vueCesium\", {\n    baseLayerPicker: false, // 如果设置为false，将不会创建右上角图层按钮。\n    geocoder: false, // 如果设置为false，将不会创建右上角查询(放大镜)按钮。\n    navigationHelpButton: false, // 如果设置为false，则不会创建右上角帮助(问号)按钮。\n    homeButton: false, // 如果设置为false，将不会创建右上角主页(房子)按钮。\n    sceneModePicker: false, // 如果设置为false，将不会创建右上角投影方式控件(显示二三维切换按钮)。\n    animation: false, // 如果设置为false，将不会创建左下角动画小部件。\n    timeline: false, // 如果设置为false，则不会创建正下方时间轴小部件。\n    fullscreenButton: false, // 如果设置为false，将不会创建右下角全屏按钮。\n    selectionIndicator: false,\n    // terrainProvider: Cesium.createWorldTerrain(),\n    imageryProvider: new Cesium.UrlTemplateImageryProvider({\n          url: '/map/{z}/{x}/{y}.png',\n      })\n  });\n```\n\n\n\n## 参考资料\n\nhttps://www.cxyzjd.com/article/qq_27532167/82590086\nhttps://blog.csdn.net/moyebaobei1/article/details/105420195\n","source":"_posts/cesium加载地图图层.md","raw":"---\ntitle: cesium加载地图图层\ndate: 2022-03-08 16:55:03\ntags:\n    - webgl\n    - cesium\n---\n\n## 1.图层介绍\n\nCesium中的图层分为两种：一种是普通图层，包含影像、线划等普通显示图层；还有一种是地形图层，用于真实的模拟地球表面的场景，Cesium会根据加载到的地形瓦片以三维的方式显示出山川、大海等。\n\n我们先介绍影像图层，官方提供了丰富的接口给开发者自定义图层。\n\n| **接口**                                   | **说明**                                                     |\n| ------------------------------------------ | ------------------------------------------------------------ |\n| ***ArcGisMapServerImageryProvider\\***      | 支持ArcGIS Online和Server的相关服务                          |\n| ***BingMapsImageryProvider\\***             | Bing地图影像，可以指定mapStyle，详见BingMapsStyle类          |\n| ***createOpenStreetMapImageryProvider\\***  | OSM影像服务，根据不同的url选择不同的风格                     |\n| ***createTileMapServiceImageryProvider\\*** | 看文档是根据MapTiler规范，貌似是可以自己下载瓦片，发布服务，类似ArcGIS影像服务的过程 |\n| ***GoogleEarthEnteriseImageryProvider\\***  | 企业级服务                                                   |\n| ***GoogleEarthEnteriseMapsProvider\\***     | 企业级服务                                                   |\n| ***GridImageryProvider\\***                 | 渲染每一个瓦片内部的格网，了解每个瓦片的精细度               |\n| ***MapboxImageryProvider\\***               | Mapbox影像服务，根据mapId指定地图风格                        |\n| ***SingleTileImageryProvider\\***           | 单张图片的影像服务，适合离线数据或对影像数据要求并不高的场景下 |\n| ***TileCoordinatesImageryProvider\\***      | 渲染每一个瓦片的围，方便调试                                 |\n| ***UrlTemplateImageryProvider\\***          | 指定url的format模版，方便用户实现自己的Provider，比如国内的高德，腾讯等影像服务，url都是一个固定的规范，都可以通过该Provider轻松实现。而OSM也是通过该类实现的。 |\n| ***WebMapServiceImageryProvider\\***        | 符合WMS规范的影像服务都可以通过该类封装，指定具体参数实现    |\n| ***WebMapTileServiceImageryProvider\\***    | 服务WMTS1.0.0规范的影像服务，都可以通过该类实现，比如国内的天地图 |\n\n创建图层也能简单，两种方式\n\n```javascript\n// 方法1：直接在基础图层上添加图层\nviewer.imageryLayers.addImageryProvider(\n  new Cesium.UrlTemplateImageryProvider({\n      url: \"https://webrd03.is.autonavi.com/appmaptile?lang=zh_cn&size=1&scale=1&style=7&x={x}&y={y}&z={z}\",\n    });\n)\n\n// 方法2: 区别在于不是直接加载到viewer的imageryLayers而是scene的imageryLayers\n viewer.scene.imageryLayers.addImageryProvider(\n   new Cesium.UrlTemplateImageryProvider({\n      url: \"https://webrd03.is.autonavi.com/appmaptile?lang=zh_cn&size=1&scale=1&style=7&x={x}&y={y}&z={z}\",\n    });\n )\n```\n\n其实viewer.imagerLayers返回的就是viewer.scene.imagerLayers对象，两者时相等的，所以两者方法本质上没区别。\n\n![null](https://s2.loli.net/2024/01/08/6Z3xMe8tTvJ4O2r.png)\n其他创建图层的接口自行查询文档，基本大同小异。\n\n## 2.创建默认图层\n\n之前在[零基础运行Cesium地球](https://videojj-yz.yuque.com/meqmo0/hsvk77/gupvyu?view=doc_embed)一文中介绍了去除默认控件的方法，其中baseLayerPicker是控制图层选择控件的，当设置它为false需要在初始化时手动添加默认图层，否则还是会显示微软图层。方法和创建图层一致。\n\n```javascript\nviewer = new Cesium.Viewer(\"vueCesium\", {\n    baseLayerPicker: false, // 如果设置为false，将不会创建右上角图层按钮。\n    geocoder: false, // 如果设置为false，将不会创建右上角查询(放大镜)按钮。\n    navigationHelpButton: false, // 如果设置为false，则不会创建右上角帮助(问号)按钮。\n    homeButton: false, // 如果设置为false，将不会创建右上角主页(房子)按钮。\n    sceneModePicker: false, // 如果设置为false，将不会创建右上角投影方式控件(显示二三维切换按钮)。\n    animation: false, // 如果设置为false，将不会创建左下角动画小部件。\n    timeline: false, // 如果设置为false，则不会创建正下方时间轴小部件。\n    fullscreenButton: false, // 如果设置为false，将不会创建右下角全屏按钮。\n    selectionIndicator: false,\n    // terrainProvider: Cesium.createWorldTerrain(),\n    imageryProvider: new Cesium.UrlTemplateImageryProvider({\n      url: \"https://webrd03.is.autonavi.com/appmaptile?lang=zh_cn&size=1&scale=1&style=7&x={x}&y={y}&z={z}\"\n    }),\n  });\n```\n\n当然了，在baseLayerPicker为true时，Cesium也提供了方法修改默认图层，在初始化时添加imageryProviderViewModels属性即可。\n\n```javascript\nimageryProviderViewModels: imageryLayers//设置影像图列表数组\n\n// index是imagerLayers数组里的某个图层下标\nviewer.baseLayerPicker.viewModel.selectedImagery = \n              viewer.baseLayerPicker.viewModel.imageryProviderViewModels[index] \n```\n\n\n\n## 3.发布离线地图\n\n以上所有操作都是基于在线地图服务，但也存在局域网的业务场景无法加载在线地图，这就需要我们自己发布地图服务。\n图服务发布最常用的是开源工具当属GeoServer，网上一堆资源操作比较复杂，以后有机会再研究，这里介绍一种相对简单的方法，直接把地图数据切片，然后通过静态服务方式发布。\n\n### 第一步：下载原始地图数据\n\n这里我是从[地理空间数据云](https://www.gscloud.cn/sources/accessdata/343?pid=333)随便下的一份数据\n\n### 第二部：切片\n\n下载安装[cesiumLab](http://www.bjxbsj.cn/)工具\n\n![null](https://s2.loli.net/2024/01/08/fhLgouqF491biHt.png)\n导入下载的原始地图，存储类型选择散列，生成切片。\n\n![null](https://s2.loli.net/2024/01/08/Ww6rBpGXfjutkPC.png)\n\n### 第三步：部署web服务\n\nweb服务很多，比如tomcat、nginx、node等，这里使用nginx来发布。\n修改nginx.conf配置文件，静态文件发布我们地图服务，路径就是上面地图切片的的输出路径。\n\n![null](https://s2.loli.net/2024/01/08/YRXKTaHdDitgjZl.png)\n使用离线地图\n\n```javascript\nviewer = new Cesium.Viewer(\"vueCesium\", {\n    baseLayerPicker: false, // 如果设置为false，将不会创建右上角图层按钮。\n    geocoder: false, // 如果设置为false，将不会创建右上角查询(放大镜)按钮。\n    navigationHelpButton: false, // 如果设置为false，则不会创建右上角帮助(问号)按钮。\n    homeButton: false, // 如果设置为false，将不会创建右上角主页(房子)按钮。\n    sceneModePicker: false, // 如果设置为false，将不会创建右上角投影方式控件(显示二三维切换按钮)。\n    animation: false, // 如果设置为false，将不会创建左下角动画小部件。\n    timeline: false, // 如果设置为false，则不会创建正下方时间轴小部件。\n    fullscreenButton: false, // 如果设置为false，将不会创建右下角全屏按钮。\n    selectionIndicator: false,\n    // terrainProvider: Cesium.createWorldTerrain(),\n    imageryProvider: new Cesium.UrlTemplateImageryProvider({\n          url: '/map/{z}/{x}/{y}.png',\n      })\n  });\n```\n\n\n\n## 参考资料\n\nhttps://www.cxyzjd.com/article/qq_27532167/82590086\nhttps://blog.csdn.net/moyebaobei1/article/details/105420195\n","slug":"cesium加载地图图层","published":1,"updated":"2024-01-15T07:34:10.840Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrq64z6e0008soipdohh42hc","content":"<h2 id=\"1-图层介绍\"><a href=\"#1-图层介绍\" class=\"headerlink\" title=\"1.图层介绍\"></a>1.图层介绍</h2><p>Cesium中的图层分为两种：一种是普通图层，包含影像、线划等普通显示图层；还有一种是地形图层，用于真实的模拟地球表面的场景，Cesium会根据加载到的地形瓦片以三维的方式显示出山川、大海等。</p>\n<p>我们先介绍影像图层，官方提供了丰富的接口给开发者自定义图层。</p>\n<table>\n<thead>\n<tr>\n<th><strong>接口</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>*<strong>ArcGisMapServerImageryProvider*</strong></td>\n<td>支持ArcGIS Online和Server的相关服务</td>\n</tr>\n<tr>\n<td>*<strong>BingMapsImageryProvider*</strong></td>\n<td>Bing地图影像，可以指定mapStyle，详见BingMapsStyle类</td>\n</tr>\n<tr>\n<td>*<strong>createOpenStreetMapImageryProvider*</strong></td>\n<td>OSM影像服务，根据不同的url选择不同的风格</td>\n</tr>\n<tr>\n<td>*<strong>createTileMapServiceImageryProvider*</strong></td>\n<td>看文档是根据MapTiler规范，貌似是可以自己下载瓦片，发布服务，类似ArcGIS影像服务的过程</td>\n</tr>\n<tr>\n<td>*<strong>GoogleEarthEnteriseImageryProvider*</strong></td>\n<td>企业级服务</td>\n</tr>\n<tr>\n<td>*<strong>GoogleEarthEnteriseMapsProvider*</strong></td>\n<td>企业级服务</td>\n</tr>\n<tr>\n<td>*<strong>GridImageryProvider*</strong></td>\n<td>渲染每一个瓦片内部的格网，了解每个瓦片的精细度</td>\n</tr>\n<tr>\n<td>*<strong>MapboxImageryProvider*</strong></td>\n<td>Mapbox影像服务，根据mapId指定地图风格</td>\n</tr>\n<tr>\n<td>*<strong>SingleTileImageryProvider*</strong></td>\n<td>单张图片的影像服务，适合离线数据或对影像数据要求并不高的场景下</td>\n</tr>\n<tr>\n<td>*<strong>TileCoordinatesImageryProvider*</strong></td>\n<td>渲染每一个瓦片的围，方便调试</td>\n</tr>\n<tr>\n<td>*<strong>UrlTemplateImageryProvider*</strong></td>\n<td>指定url的format模版，方便用户实现自己的Provider，比如国内的高德，腾讯等影像服务，url都是一个固定的规范，都可以通过该Provider轻松实现。而OSM也是通过该类实现的。</td>\n</tr>\n<tr>\n<td>*<strong>WebMapServiceImageryProvider*</strong></td>\n<td>符合WMS规范的影像服务都可以通过该类封装，指定具体参数实现</td>\n</tr>\n<tr>\n<td>*<strong>WebMapTileServiceImageryProvider*</strong></td>\n<td>服务WMTS1.0.0规范的影像服务，都可以通过该类实现，比如国内的天地图</td>\n</tr>\n</tbody></table>\n<p>创建图层也能简单，两种方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法1：直接在基础图层上添加图层</span></span><br><span class=\"line\">viewer.<span class=\"property\">imageryLayers</span>.<span class=\"title function_\">addImageryProvider</span>(</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">UrlTemplateImageryProvider</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">url</span>: <span class=\"string\">&quot;https://webrd03.is.autonavi.com/appmaptile?lang=zh_cn&amp;size=1&amp;scale=1&amp;style=7&amp;x=&#123;x&#125;&amp;y=&#123;y&#125;&amp;z=&#123;z&#125;&quot;</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方法2: 区别在于不是直接加载到viewer的imageryLayers而是scene的imageryLayers</span></span><br><span class=\"line\"> viewer.<span class=\"property\">scene</span>.<span class=\"property\">imageryLayers</span>.<span class=\"title function_\">addImageryProvider</span>(</span><br><span class=\"line\">   <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">UrlTemplateImageryProvider</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">url</span>: <span class=\"string\">&quot;https://webrd03.is.autonavi.com/appmaptile?lang=zh_cn&amp;size=1&amp;scale=1&amp;style=7&amp;x=&#123;x&#125;&amp;y=&#123;y&#125;&amp;z=&#123;z&#125;&quot;</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"> )</span><br></pre></td></tr></table></figure>\n\n<p>其实viewer.imagerLayers返回的就是viewer.scene.imagerLayers对象，两者时相等的，所以两者方法本质上没区别。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/6Z3xMe8tTvJ4O2r.png\" alt=\"null\"><br>其他创建图层的接口自行查询文档，基本大同小异。</p>\n<h2 id=\"2-创建默认图层\"><a href=\"#2-创建默认图层\" class=\"headerlink\" title=\"2.创建默认图层\"></a>2.创建默认图层</h2><p>之前在<a href=\"https://videojj-yz.yuque.com/meqmo0/hsvk77/gupvyu?view=doc_embed\">零基础运行Cesium地球</a>一文中介绍了去除默认控件的方法，其中baseLayerPicker是控制图层选择控件的，当设置它为false需要在初始化时手动添加默认图层，否则还是会显示微软图层。方法和创建图层一致。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">viewer = <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">Viewer</span>(<span class=\"string\">&quot;vueCesium&quot;</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">baseLayerPicker</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 如果设置为false，将不会创建右上角图层按钮。</span></span><br><span class=\"line\">    <span class=\"attr\">geocoder</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 如果设置为false，将不会创建右上角查询(放大镜)按钮。</span></span><br><span class=\"line\">    <span class=\"attr\">navigationHelpButton</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 如果设置为false，则不会创建右上角帮助(问号)按钮。</span></span><br><span class=\"line\">    <span class=\"attr\">homeButton</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 如果设置为false，将不会创建右上角主页(房子)按钮。</span></span><br><span class=\"line\">    <span class=\"attr\">sceneModePicker</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 如果设置为false，将不会创建右上角投影方式控件(显示二三维切换按钮)。</span></span><br><span class=\"line\">    <span class=\"attr\">animation</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 如果设置为false，将不会创建左下角动画小部件。</span></span><br><span class=\"line\">    <span class=\"attr\">timeline</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 如果设置为false，则不会创建正下方时间轴小部件。</span></span><br><span class=\"line\">    <span class=\"attr\">fullscreenButton</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 如果设置为false，将不会创建右下角全屏按钮。</span></span><br><span class=\"line\">    <span class=\"attr\">selectionIndicator</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"comment\">// terrainProvider: Cesium.createWorldTerrain(),</span></span><br><span class=\"line\">    <span class=\"attr\">imageryProvider</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">UrlTemplateImageryProvider</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">url</span>: <span class=\"string\">&quot;https://webrd03.is.autonavi.com/appmaptile?lang=zh_cn&amp;size=1&amp;scale=1&amp;style=7&amp;x=&#123;x&#125;&amp;y=&#123;y&#125;&amp;z=&#123;z&#125;&quot;</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>当然了，在baseLayerPicker为true时，Cesium也提供了方法修改默认图层，在初始化时添加imageryProviderViewModels属性即可。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">imageryProviderViewModels</span>: imageryLayers<span class=\"comment\">//设置影像图列表数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// index是imagerLayers数组里的某个图层下标</span></span><br><span class=\"line\">viewer.<span class=\"property\">baseLayerPicker</span>.<span class=\"property\">viewModel</span>.<span class=\"property\">selectedImagery</span> = </span><br><span class=\"line\">              viewer.<span class=\"property\">baseLayerPicker</span>.<span class=\"property\">viewModel</span>.<span class=\"property\">imageryProviderViewModels</span>[index] </span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"3-发布离线地图\"><a href=\"#3-发布离线地图\" class=\"headerlink\" title=\"3.发布离线地图\"></a>3.发布离线地图</h2><p>以上所有操作都是基于在线地图服务，但也存在局域网的业务场景无法加载在线地图，这就需要我们自己发布地图服务。<br>图服务发布最常用的是开源工具当属GeoServer，网上一堆资源操作比较复杂，以后有机会再研究，这里介绍一种相对简单的方法，直接把地图数据切片，然后通过静态服务方式发布。</p>\n<h3 id=\"第一步：下载原始地图数据\"><a href=\"#第一步：下载原始地图数据\" class=\"headerlink\" title=\"第一步：下载原始地图数据\"></a>第一步：下载原始地图数据</h3><p>这里我是从<a href=\"https://www.gscloud.cn/sources/accessdata/343?pid=333\">地理空间数据云</a>随便下的一份数据</p>\n<h3 id=\"第二部：切片\"><a href=\"#第二部：切片\" class=\"headerlink\" title=\"第二部：切片\"></a>第二部：切片</h3><p>下载安装<a href=\"http://www.bjxbsj.cn/\">cesiumLab</a>工具</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/fhLgouqF491biHt.png\" alt=\"null\"><br>导入下载的原始地图，存储类型选择散列，生成切片。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/Ww6rBpGXfjutkPC.png\" alt=\"null\"></p>\n<h3 id=\"第三步：部署web服务\"><a href=\"#第三步：部署web服务\" class=\"headerlink\" title=\"第三步：部署web服务\"></a>第三步：部署web服务</h3><p>web服务很多，比如tomcat、nginx、node等，这里使用nginx来发布。<br>修改nginx.conf配置文件，静态文件发布我们地图服务，路径就是上面地图切片的的输出路径。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/YRXKTaHdDitgjZl.png\" alt=\"null\"><br>使用离线地图</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">viewer = <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">Viewer</span>(<span class=\"string\">&quot;vueCesium&quot;</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">baseLayerPicker</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 如果设置为false，将不会创建右上角图层按钮。</span></span><br><span class=\"line\">    <span class=\"attr\">geocoder</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 如果设置为false，将不会创建右上角查询(放大镜)按钮。</span></span><br><span class=\"line\">    <span class=\"attr\">navigationHelpButton</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 如果设置为false，则不会创建右上角帮助(问号)按钮。</span></span><br><span class=\"line\">    <span class=\"attr\">homeButton</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 如果设置为false，将不会创建右上角主页(房子)按钮。</span></span><br><span class=\"line\">    <span class=\"attr\">sceneModePicker</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 如果设置为false，将不会创建右上角投影方式控件(显示二三维切换按钮)。</span></span><br><span class=\"line\">    <span class=\"attr\">animation</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 如果设置为false，将不会创建左下角动画小部件。</span></span><br><span class=\"line\">    <span class=\"attr\">timeline</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 如果设置为false，则不会创建正下方时间轴小部件。</span></span><br><span class=\"line\">    <span class=\"attr\">fullscreenButton</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 如果设置为false，将不会创建右下角全屏按钮。</span></span><br><span class=\"line\">    <span class=\"attr\">selectionIndicator</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"comment\">// terrainProvider: Cesium.createWorldTerrain(),</span></span><br><span class=\"line\">    <span class=\"attr\">imageryProvider</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">UrlTemplateImageryProvider</span>(&#123;</span><br><span class=\"line\">          <span class=\"attr\">url</span>: <span class=\"string\">&#x27;/map/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png&#x27;</span>,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://www.cxyzjd.com/article/qq_27532167/82590086\">https://www.cxyzjd.com/article/qq_27532167/82590086</a><br><a href=\"https://blog.csdn.net/moyebaobei1/article/details/105420195\">https://blog.csdn.net/moyebaobei1/article/details/105420195</a></p>\n","site":{"data":{}},"length":1393,"excerpt":"","more":"<h2 id=\"1-图层介绍\"><a href=\"#1-图层介绍\" class=\"headerlink\" title=\"1.图层介绍\"></a>1.图层介绍</h2><p>Cesium中的图层分为两种：一种是普通图层，包含影像、线划等普通显示图层；还有一种是地形图层，用于真实的模拟地球表面的场景，Cesium会根据加载到的地形瓦片以三维的方式显示出山川、大海等。</p>\n<p>我们先介绍影像图层，官方提供了丰富的接口给开发者自定义图层。</p>\n<table>\n<thead>\n<tr>\n<th><strong>接口</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>*<strong>ArcGisMapServerImageryProvider*</strong></td>\n<td>支持ArcGIS Online和Server的相关服务</td>\n</tr>\n<tr>\n<td>*<strong>BingMapsImageryProvider*</strong></td>\n<td>Bing地图影像，可以指定mapStyle，详见BingMapsStyle类</td>\n</tr>\n<tr>\n<td>*<strong>createOpenStreetMapImageryProvider*</strong></td>\n<td>OSM影像服务，根据不同的url选择不同的风格</td>\n</tr>\n<tr>\n<td>*<strong>createTileMapServiceImageryProvider*</strong></td>\n<td>看文档是根据MapTiler规范，貌似是可以自己下载瓦片，发布服务，类似ArcGIS影像服务的过程</td>\n</tr>\n<tr>\n<td>*<strong>GoogleEarthEnteriseImageryProvider*</strong></td>\n<td>企业级服务</td>\n</tr>\n<tr>\n<td>*<strong>GoogleEarthEnteriseMapsProvider*</strong></td>\n<td>企业级服务</td>\n</tr>\n<tr>\n<td>*<strong>GridImageryProvider*</strong></td>\n<td>渲染每一个瓦片内部的格网，了解每个瓦片的精细度</td>\n</tr>\n<tr>\n<td>*<strong>MapboxImageryProvider*</strong></td>\n<td>Mapbox影像服务，根据mapId指定地图风格</td>\n</tr>\n<tr>\n<td>*<strong>SingleTileImageryProvider*</strong></td>\n<td>单张图片的影像服务，适合离线数据或对影像数据要求并不高的场景下</td>\n</tr>\n<tr>\n<td>*<strong>TileCoordinatesImageryProvider*</strong></td>\n<td>渲染每一个瓦片的围，方便调试</td>\n</tr>\n<tr>\n<td>*<strong>UrlTemplateImageryProvider*</strong></td>\n<td>指定url的format模版，方便用户实现自己的Provider，比如国内的高德，腾讯等影像服务，url都是一个固定的规范，都可以通过该Provider轻松实现。而OSM也是通过该类实现的。</td>\n</tr>\n<tr>\n<td>*<strong>WebMapServiceImageryProvider*</strong></td>\n<td>符合WMS规范的影像服务都可以通过该类封装，指定具体参数实现</td>\n</tr>\n<tr>\n<td>*<strong>WebMapTileServiceImageryProvider*</strong></td>\n<td>服务WMTS1.0.0规范的影像服务，都可以通过该类实现，比如国内的天地图</td>\n</tr>\n</tbody></table>\n<p>创建图层也能简单，两种方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法1：直接在基础图层上添加图层</span></span><br><span class=\"line\">viewer.<span class=\"property\">imageryLayers</span>.<span class=\"title function_\">addImageryProvider</span>(</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">UrlTemplateImageryProvider</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">url</span>: <span class=\"string\">&quot;https://webrd03.is.autonavi.com/appmaptile?lang=zh_cn&amp;size=1&amp;scale=1&amp;style=7&amp;x=&#123;x&#125;&amp;y=&#123;y&#125;&amp;z=&#123;z&#125;&quot;</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方法2: 区别在于不是直接加载到viewer的imageryLayers而是scene的imageryLayers</span></span><br><span class=\"line\"> viewer.<span class=\"property\">scene</span>.<span class=\"property\">imageryLayers</span>.<span class=\"title function_\">addImageryProvider</span>(</span><br><span class=\"line\">   <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">UrlTemplateImageryProvider</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">url</span>: <span class=\"string\">&quot;https://webrd03.is.autonavi.com/appmaptile?lang=zh_cn&amp;size=1&amp;scale=1&amp;style=7&amp;x=&#123;x&#125;&amp;y=&#123;y&#125;&amp;z=&#123;z&#125;&quot;</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"> )</span><br></pre></td></tr></table></figure>\n\n<p>其实viewer.imagerLayers返回的就是viewer.scene.imagerLayers对象，两者时相等的，所以两者方法本质上没区别。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/6Z3xMe8tTvJ4O2r.png\" alt=\"null\"><br>其他创建图层的接口自行查询文档，基本大同小异。</p>\n<h2 id=\"2-创建默认图层\"><a href=\"#2-创建默认图层\" class=\"headerlink\" title=\"2.创建默认图层\"></a>2.创建默认图层</h2><p>之前在<a href=\"https://videojj-yz.yuque.com/meqmo0/hsvk77/gupvyu?view=doc_embed\">零基础运行Cesium地球</a>一文中介绍了去除默认控件的方法，其中baseLayerPicker是控制图层选择控件的，当设置它为false需要在初始化时手动添加默认图层，否则还是会显示微软图层。方法和创建图层一致。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">viewer = <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">Viewer</span>(<span class=\"string\">&quot;vueCesium&quot;</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">baseLayerPicker</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 如果设置为false，将不会创建右上角图层按钮。</span></span><br><span class=\"line\">    <span class=\"attr\">geocoder</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 如果设置为false，将不会创建右上角查询(放大镜)按钮。</span></span><br><span class=\"line\">    <span class=\"attr\">navigationHelpButton</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 如果设置为false，则不会创建右上角帮助(问号)按钮。</span></span><br><span class=\"line\">    <span class=\"attr\">homeButton</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 如果设置为false，将不会创建右上角主页(房子)按钮。</span></span><br><span class=\"line\">    <span class=\"attr\">sceneModePicker</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 如果设置为false，将不会创建右上角投影方式控件(显示二三维切换按钮)。</span></span><br><span class=\"line\">    <span class=\"attr\">animation</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 如果设置为false，将不会创建左下角动画小部件。</span></span><br><span class=\"line\">    <span class=\"attr\">timeline</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 如果设置为false，则不会创建正下方时间轴小部件。</span></span><br><span class=\"line\">    <span class=\"attr\">fullscreenButton</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 如果设置为false，将不会创建右下角全屏按钮。</span></span><br><span class=\"line\">    <span class=\"attr\">selectionIndicator</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"comment\">// terrainProvider: Cesium.createWorldTerrain(),</span></span><br><span class=\"line\">    <span class=\"attr\">imageryProvider</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">UrlTemplateImageryProvider</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">url</span>: <span class=\"string\">&quot;https://webrd03.is.autonavi.com/appmaptile?lang=zh_cn&amp;size=1&amp;scale=1&amp;style=7&amp;x=&#123;x&#125;&amp;y=&#123;y&#125;&amp;z=&#123;z&#125;&quot;</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>当然了，在baseLayerPicker为true时，Cesium也提供了方法修改默认图层，在初始化时添加imageryProviderViewModels属性即可。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">imageryProviderViewModels</span>: imageryLayers<span class=\"comment\">//设置影像图列表数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// index是imagerLayers数组里的某个图层下标</span></span><br><span class=\"line\">viewer.<span class=\"property\">baseLayerPicker</span>.<span class=\"property\">viewModel</span>.<span class=\"property\">selectedImagery</span> = </span><br><span class=\"line\">              viewer.<span class=\"property\">baseLayerPicker</span>.<span class=\"property\">viewModel</span>.<span class=\"property\">imageryProviderViewModels</span>[index] </span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"3-发布离线地图\"><a href=\"#3-发布离线地图\" class=\"headerlink\" title=\"3.发布离线地图\"></a>3.发布离线地图</h2><p>以上所有操作都是基于在线地图服务，但也存在局域网的业务场景无法加载在线地图，这就需要我们自己发布地图服务。<br>图服务发布最常用的是开源工具当属GeoServer，网上一堆资源操作比较复杂，以后有机会再研究，这里介绍一种相对简单的方法，直接把地图数据切片，然后通过静态服务方式发布。</p>\n<h3 id=\"第一步：下载原始地图数据\"><a href=\"#第一步：下载原始地图数据\" class=\"headerlink\" title=\"第一步：下载原始地图数据\"></a>第一步：下载原始地图数据</h3><p>这里我是从<a href=\"https://www.gscloud.cn/sources/accessdata/343?pid=333\">地理空间数据云</a>随便下的一份数据</p>\n<h3 id=\"第二部：切片\"><a href=\"#第二部：切片\" class=\"headerlink\" title=\"第二部：切片\"></a>第二部：切片</h3><p>下载安装<a href=\"http://www.bjxbsj.cn/\">cesiumLab</a>工具</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/fhLgouqF491biHt.png\" alt=\"null\"><br>导入下载的原始地图，存储类型选择散列，生成切片。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/Ww6rBpGXfjutkPC.png\" alt=\"null\"></p>\n<h3 id=\"第三步：部署web服务\"><a href=\"#第三步：部署web服务\" class=\"headerlink\" title=\"第三步：部署web服务\"></a>第三步：部署web服务</h3><p>web服务很多，比如tomcat、nginx、node等，这里使用nginx来发布。<br>修改nginx.conf配置文件，静态文件发布我们地图服务，路径就是上面地图切片的的输出路径。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/YRXKTaHdDitgjZl.png\" alt=\"null\"><br>使用离线地图</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">viewer = <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">Viewer</span>(<span class=\"string\">&quot;vueCesium&quot;</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">baseLayerPicker</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 如果设置为false，将不会创建右上角图层按钮。</span></span><br><span class=\"line\">    <span class=\"attr\">geocoder</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 如果设置为false，将不会创建右上角查询(放大镜)按钮。</span></span><br><span class=\"line\">    <span class=\"attr\">navigationHelpButton</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 如果设置为false，则不会创建右上角帮助(问号)按钮。</span></span><br><span class=\"line\">    <span class=\"attr\">homeButton</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 如果设置为false，将不会创建右上角主页(房子)按钮。</span></span><br><span class=\"line\">    <span class=\"attr\">sceneModePicker</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 如果设置为false，将不会创建右上角投影方式控件(显示二三维切换按钮)。</span></span><br><span class=\"line\">    <span class=\"attr\">animation</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 如果设置为false，将不会创建左下角动画小部件。</span></span><br><span class=\"line\">    <span class=\"attr\">timeline</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 如果设置为false，则不会创建正下方时间轴小部件。</span></span><br><span class=\"line\">    <span class=\"attr\">fullscreenButton</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 如果设置为false，将不会创建右下角全屏按钮。</span></span><br><span class=\"line\">    <span class=\"attr\">selectionIndicator</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"comment\">// terrainProvider: Cesium.createWorldTerrain(),</span></span><br><span class=\"line\">    <span class=\"attr\">imageryProvider</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">UrlTemplateImageryProvider</span>(&#123;</span><br><span class=\"line\">          <span class=\"attr\">url</span>: <span class=\"string\">&#x27;/map/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png&#x27;</span>,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://www.cxyzjd.com/article/qq_27532167/82590086\">https://www.cxyzjd.com/article/qq_27532167/82590086</a><br><a href=\"https://blog.csdn.net/moyebaobei1/article/details/105420195\">https://blog.csdn.net/moyebaobei1/article/details/105420195</a></p>\n"},{"title":"cesium加载绘制3D模型","date":"2022-03-08T09:13:35.000Z","_content":"\n## 1.加载模型\n\n使用很简单，就是现今常用的三维建模工具（3dmax、maya、creator、sketch up等等）都不支持gltf格式文件的直接导出，需要经过中间转化。\n\n```javascript\nconst entity = viewer.entities.add({\n    id: \"car\",\n    name: \"car\",\n    availability: new Cesium.TimeIntervalCollection([ new Cesium.TimeInterval({start: start, stop: stop})]),\n    position: property,\n    orientation: new Cesium.VelocityOrientationProperty(property),\n    model: {\n      uri: \"./GroundVehicle.glb\", // 模型\n      minimumPixelSize: 64,\n      maximumSize: 128,\n      maximumScale: 200,\n      scale: 16,\n      runAnimations: true\n    },\n  });\n  viewer.trackedEntity = entity; // 镜头固定到模型上\n```\n\n![null](https://s2.loli.net/2024/01/08/iwYOa5sIqANLHte.png)\n\n## 2.绘制模型\n\nCesium不只可以加载3d模型，还可以基于空间三维数据绘制模型。Cesium提供了两类接口来绘制模型，entity和primitive。\n\n![null](https://s2.loli.net/2024/01/08/p4N8oGC6HSuVJMj.png)\n![null](https://s2.loli.net/2024/01/08/KuwHlsGnDYLBOhx.png)\n两者的区别其实是：entity是个相对高级的接口，是个prmitive的封装过的语法糖；primitive更接近渲染引擎底层相对更复杂，包含geometry和appearance两部分，geometry定义primitive的几何结构，appearance定义primitive的着色。\n\n\n\n### 2.1.基本绘制\n\n#### 2.1.1 entity绘制\n\n```javascript\nviewer.entities.add({\n   name: 'red box',\n   position: Cesium.Cartesian3.fromDegrees(-107.0, 40.0, 300000.0),\n   box: {\n     dimensions: new Cesium.Cartesian3(40000, 30000, 50000),\n     material: Cesium.Color.RED.withAlpha(0.5),\n     outline: true,\n     outlineColor: Cesium.Color.BLACK\n   }\n});\n```\n\n可以看到entity通过viewer中的entities加载到场景中，entities是entity的集合对象。\n以下是官方支持的形状：\n\n| **形状**               | **说明**                                                     |\n| ---------------------- | ------------------------------------------------------------ |\n| Point                  | 点；[文档](https://cesium.com/learn/cesiumjs/ref-doc/PointGraphics.html?classFilter=point) |\n| Boxes                  | 盒子；[文档](https://cesium.com/learn/cesiumjs/ref-doc/BoxGraphics.html?classFilter=box)；[示例](https://sandcastle.cesium.com/index.html?src=Box.html) |\n| Circles and Ellipses   | 圆和椭圆；[文档](https://cesium.com/learn/cesiumjs/ref-doc/EllipseGraphics.html?classFilter=elli)；[示例](https://sandcastle.cesium.com/index.html?src=Circles and Ellipses.html) |\n| Corridor               | 走廊通道；[文档](https://cesium.com/learn/cesiumjs/ref-doc/CorridorGraphics.html?classFilter=corr)；[示例](https://sandcastle.cesium.com/index.html?src=Corridor.html) |\n| Cylinder and cones     | 圆柱和圆锥；[文档](https://cesium.com/learn/cesiumjs/ref-doc/CylinderGraphics.html?classFilter=cylin)；[示例](https://sandcastle.cesium.com/index.html?src=Cylinders and Cones.html) |\n| Polygons               | 多边形；[文档](https://cesium.com/learn/cesiumjs/ref-doc/PolygonGraphics.html?classFilter=polyg)；[示例](https://sandcastle.cesium.com/index.html?src=Polygon.html) |\n| Polylines              | 折线；[文档](https://cesium.com/learn/cesiumjs/ref-doc/PolylineGraphics.html?classFilter=polyl)；[示例](https://sandcastle.cesium.com/index.html?src=Polyline.html) |\n| Polyline volumes       | 折线卷，折线体积；[文档](https://cesium.com/learn/cesiumjs/ref-doc/PolylineVolumeGraphics.html?classFilter=polyl)；[示例](https://sandcastle.cesium.com/index.html?src=Polyline Volume.html) |\n| Rectangles             | 矩形；[文档](https://cesium.com/learn/cesiumjs/ref-doc/RectangleGraphics.html?classFilter=rec)；[示例](https://sandcastle.cesium.com/index.html?src=Rectangle.html) |\n| Spheres and ellipsoids | 球体和椭圆体；[文档](https://cesium.com/learn/cesiumjs/ref-doc/EllipsoidGraphics.html)；[示例](https://sandcastle.cesium.com/?src=Spheres and Ellipsoids.html) |\n| Walls                  | 墙体；[文档](https://cesium.com/learn/cesiumjs/ref-doc/WallGraphics.html)；[示例](https://sandcastle.cesium.com/?src=Wall.html) |\n\n#### 2.1.2 primitive绘制\n\n```javascript\nvar instance = new Cesium.GeometryInstance({\n   geometry: new Cesium.BoxGeometry({\n        vertexFormat : Cesium.VertexFormat.POSITION_ONLY,\n        maximum : new Cesium.Cartesian3(250000.0, 250000.0, 250000.0),\n        minimum : new Cesium.Cartesian3(-250000.0, -250000.0, -250000.0)\n    })\n});\n\nviewer.scene.primitives.add(new Cesium.Primitive({\n      geometryInstances: instance,\n      appearance: new Cesium.EllipsoidSurfaceAppearance({\n          material:Cesium.Material.fromType('Stripe')\n\n      })\n}));\n```\n\nprimitive通过viewer中的primitives加载到场景中，primitives是primitives的集合对象。\n\n**Geometry**\nCesium支持以下几种Geometry几何图形\n\n| 几何图形                      | 说明                                                         |\n| ----------------------------- | ------------------------------------------------------------ |\n| BoxGeometry                   | 立方体                                                       |\n| BoxOutlineGeometry            | 仅有轮廓的立方体，只有外部线条的的盒子                       |\n| CircleGeometry                | 圆形或者拉伸的圆形，圆圈或挤压圆                             |\n| CircleOutlineGeometry         | 只有轮廓的圆形                                               |\n| CorridorGeometry              | 走廊：沿着地表的多段线(垂直于表面的折线)，且具有一定的宽度，可以拉伸到一定的高度 |\n| CorridorOutlineGeometry       | 只有轮廓的走廊                                               |\n| CylinderGeometry              | 圆柱、圆锥或者截断的圆锥                                     |\n| CylinderOutlineGeometry       | 只有轮廓的圆柱、圆锥或者截断的圆锥                           |\n| EllipseGeometry               | 椭圆或者拉伸的椭圆                                           |\n| EllipseOutlineGeometry        | 只有轮廓的椭圆或者拉伸的椭圆                                 |\n| EllipsoidGeometry             | 椭球体                                                       |\n| EllipsoidOutlineGeometry      | 只有轮廓的椭球体                                             |\n| RectangleGeometry             | 矩形或者拉伸的矩形                                           |\n| RectangleOutlineGeometry      | 只有轮廓的矩形或者拉伸的矩形                                 |\n| PolygonGeometry               | 多边形，可以具有空洞或者拉伸一定的高度                       |\n| PolygonOutlineGeometry        | 只有轮廓的多边形                                             |\n| PolylineGeometry              | 多段线，可以具有一定的宽度                                   |\n| SimplePolylineGeometry        | 简单的多段线                                                 |\n| PolylineVolumeGeometry        | 多段线柱体                                                   |\n| PolylineVolumeOutlineGeometry | 只有轮廓的多段线柱体                                         |\n| SphereGeometry                | 球体                                                         |\n| SphereOutlineGeometry         | 只有轮廓的球体                                               |\n| WallGeometry                  | 墙                                                           |\n| WallOutlineGeometry           | 只有轮廓的墙                                                 |\n\n在上例代码中我们用到了几何图形实例，多个实例可以公用一个geometry，通过设置GeometryInstance.modelMatrix 提供不同的信息。\n\n```javascript\nvar geometry = Cesium.BoxGeometry.fromDimensions({\n  vertexFormat : Cesium.VertexFormat.POSITION_AND_NORMAL,\n  dimensions : new Cesium.Cartesian3(1000000.0, 1000000.0, 500000.0)\n});\nvar instanceBottom = new Cesium.GeometryInstance({\n  geometry : geometry,\n  modelMatrix : Cesium.Matrix4.multiplyByTranslation(Cesium.Transforms.eastNorthUpToFixedFrame(\n    Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883)), new Cesium.Cartesian3(0.0, 0.0, 1000000.0), new Cesium.Matrix4()),\n  attributes : {\n    color : Cesium.ColorGeometryInstanceAttribute.fromColor(Cesium.Color.AQUA)\n  },\n  id : 'bottom'\n});\nvar instanceTop = new Cesium.GeometryInstance({\n  geometry : geometry,\n  modelMatrix : Cesium.Matrix4.multiplyByTranslation(Cesium.Transforms.eastNorthUpToFixedFrame(\n    Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883)), new Cesium.Cartesian3(0.0, 0.0, 3000000.0), new Cesium.Matrix4()),\n  attributes : {\n    color : Cesium.ColorGeometryInstanceAttribute.fromColor(Cesium.Color.AQUA)\n  },\n  id : 'top'\n});\n```\n\n同时多个实例也可以合并成一个primitive，节约性能。\n\n```javascript\nvar instances = [Instance1, Instance2, Instance3, ……];\nscene.primitives.add( new Cesium.Primitive( {\n    geometryInstances : instances, //合并\n    //某些外观允许每个几何图形实例分别指定某个属性，例如：\n    appearance : new Cesium.PerInstanceColorAppearance({translucent : false,closed : true})\n}));\n```\n\n**Appearance**\nCesium支持下列appearance\n\n| **外观**                   | **说明**                                                     |\n| -------------------------- | ------------------------------------------------------------ |\n| MaterialAppearance         | 支持各种Geometry类型的外观，支持使用材质来定义着色。支持材料描述阴影。 |\n| EllipsoidSurfaceAppearance | MaterialAppearance的一个版本。假设几何图形与地表是平行的，并且依此来进行顶点属性（vertex attributes）的计算。和Material Appearance一样，就像一个多边形，并且使用这个假设来通过程序上计算许多顶点属性来节省内存。 |\n| PerInstanceColorAppearance | 让每个实例使用自定义的颜色来着色，使用每个实例的颜色来遮蔽每个实例。 |\n| PolylineMaterialAppearance | 支持使用材质来着色多段线。支持材料遮蔽Polyline               |\n| PolylineColorAppearance    | 使用每顶点或者每片段（per-vertex or per-segment ）的颜色来着色多段线—使用每顶点或每段着色来遮蔽折线 |\n\nAppearance定义了需要在GPU上执行的GLSL着色器，这部分一般只有在自定义外观时需要修改。\n\n### 2.2.管理\n\n#### 2.2.1 entity管理\n\nviewer.entities属性实际上是一个EntityCollection对象，是entity的一个集合，提供了add、remove、removeAll等等接口来管理场景中的entity。\n\n![null](https://s2.loli.net/2024/01/08/xBoEJyDrGZ9SMOU.png)\nCesium.EntityCollection.collectionChangedEventCallback(collection,added, removed, changed)\nadd(entity) → Entity\ncomputeAvailability() → TimeInterval\ncontains(entity) → Boolean\ngetById(id) → Entity\ngetOrCreateEntity(id) → Entity\nremove(entity) → Boolean\nremoveAll()\nremoveById(id) → Boolean\nresumeEvents()\nsuspendEvents()\n\n#### 2.2.2 primitive管理\n\n场景通过viewer.scene.primitives属性来管理添加的primitive对象，primitives是PrimitiveCollection类型\n\n![null](https://s2.loli.net/2024/01/08/kq5UdluSYBXApTe.png)\n提供了如下接口管理primitive对象：\nadd(primitive) → Object\ncontains(primitive) → Boolean\ndestroy() → undefined\nget(index) → Object\nisDestroyed() → Boolean\nlower(primitive)\nlowerToBottom(primitive)\nraise(primitive)\nraiseToTop(primitive)\nremove(primitive) → Boolean\nremoveAll()\n\n### 2.3.拾取选择\n\n通常我们不光要绘制模型，还要跟场景进行交互，Cesium为我们提供了scene.pick接口进行拾取，具体介绍放到单独的鼠标事件一章中。\n\n### 2.4.两者对比\n\n既然已经有了entity为什么还要在提供个primitive接口呢？？？entity调用方便，封装完美，什么时候要用primitive？？？\n答案是性能问题，primitve更接近webGL的底层，加载效率更高，具体分析参考\nhttps://juejin.cn/post/6972420331982028837","source":"_posts/cesium加载绘制3D模型.md","raw":"---\ntitle: cesium加载绘制3D模型\ndate: 2022-03-08 17:13:35\ntags:\n    - webgl\n    - cesium\n---\n\n## 1.加载模型\n\n使用很简单，就是现今常用的三维建模工具（3dmax、maya、creator、sketch up等等）都不支持gltf格式文件的直接导出，需要经过中间转化。\n\n```javascript\nconst entity = viewer.entities.add({\n    id: \"car\",\n    name: \"car\",\n    availability: new Cesium.TimeIntervalCollection([ new Cesium.TimeInterval({start: start, stop: stop})]),\n    position: property,\n    orientation: new Cesium.VelocityOrientationProperty(property),\n    model: {\n      uri: \"./GroundVehicle.glb\", // 模型\n      minimumPixelSize: 64,\n      maximumSize: 128,\n      maximumScale: 200,\n      scale: 16,\n      runAnimations: true\n    },\n  });\n  viewer.trackedEntity = entity; // 镜头固定到模型上\n```\n\n![null](https://s2.loli.net/2024/01/08/iwYOa5sIqANLHte.png)\n\n## 2.绘制模型\n\nCesium不只可以加载3d模型，还可以基于空间三维数据绘制模型。Cesium提供了两类接口来绘制模型，entity和primitive。\n\n![null](https://s2.loli.net/2024/01/08/p4N8oGC6HSuVJMj.png)\n![null](https://s2.loli.net/2024/01/08/KuwHlsGnDYLBOhx.png)\n两者的区别其实是：entity是个相对高级的接口，是个prmitive的封装过的语法糖；primitive更接近渲染引擎底层相对更复杂，包含geometry和appearance两部分，geometry定义primitive的几何结构，appearance定义primitive的着色。\n\n\n\n### 2.1.基本绘制\n\n#### 2.1.1 entity绘制\n\n```javascript\nviewer.entities.add({\n   name: 'red box',\n   position: Cesium.Cartesian3.fromDegrees(-107.0, 40.0, 300000.0),\n   box: {\n     dimensions: new Cesium.Cartesian3(40000, 30000, 50000),\n     material: Cesium.Color.RED.withAlpha(0.5),\n     outline: true,\n     outlineColor: Cesium.Color.BLACK\n   }\n});\n```\n\n可以看到entity通过viewer中的entities加载到场景中，entities是entity的集合对象。\n以下是官方支持的形状：\n\n| **形状**               | **说明**                                                     |\n| ---------------------- | ------------------------------------------------------------ |\n| Point                  | 点；[文档](https://cesium.com/learn/cesiumjs/ref-doc/PointGraphics.html?classFilter=point) |\n| Boxes                  | 盒子；[文档](https://cesium.com/learn/cesiumjs/ref-doc/BoxGraphics.html?classFilter=box)；[示例](https://sandcastle.cesium.com/index.html?src=Box.html) |\n| Circles and Ellipses   | 圆和椭圆；[文档](https://cesium.com/learn/cesiumjs/ref-doc/EllipseGraphics.html?classFilter=elli)；[示例](https://sandcastle.cesium.com/index.html?src=Circles and Ellipses.html) |\n| Corridor               | 走廊通道；[文档](https://cesium.com/learn/cesiumjs/ref-doc/CorridorGraphics.html?classFilter=corr)；[示例](https://sandcastle.cesium.com/index.html?src=Corridor.html) |\n| Cylinder and cones     | 圆柱和圆锥；[文档](https://cesium.com/learn/cesiumjs/ref-doc/CylinderGraphics.html?classFilter=cylin)；[示例](https://sandcastle.cesium.com/index.html?src=Cylinders and Cones.html) |\n| Polygons               | 多边形；[文档](https://cesium.com/learn/cesiumjs/ref-doc/PolygonGraphics.html?classFilter=polyg)；[示例](https://sandcastle.cesium.com/index.html?src=Polygon.html) |\n| Polylines              | 折线；[文档](https://cesium.com/learn/cesiumjs/ref-doc/PolylineGraphics.html?classFilter=polyl)；[示例](https://sandcastle.cesium.com/index.html?src=Polyline.html) |\n| Polyline volumes       | 折线卷，折线体积；[文档](https://cesium.com/learn/cesiumjs/ref-doc/PolylineVolumeGraphics.html?classFilter=polyl)；[示例](https://sandcastle.cesium.com/index.html?src=Polyline Volume.html) |\n| Rectangles             | 矩形；[文档](https://cesium.com/learn/cesiumjs/ref-doc/RectangleGraphics.html?classFilter=rec)；[示例](https://sandcastle.cesium.com/index.html?src=Rectangle.html) |\n| Spheres and ellipsoids | 球体和椭圆体；[文档](https://cesium.com/learn/cesiumjs/ref-doc/EllipsoidGraphics.html)；[示例](https://sandcastle.cesium.com/?src=Spheres and Ellipsoids.html) |\n| Walls                  | 墙体；[文档](https://cesium.com/learn/cesiumjs/ref-doc/WallGraphics.html)；[示例](https://sandcastle.cesium.com/?src=Wall.html) |\n\n#### 2.1.2 primitive绘制\n\n```javascript\nvar instance = new Cesium.GeometryInstance({\n   geometry: new Cesium.BoxGeometry({\n        vertexFormat : Cesium.VertexFormat.POSITION_ONLY,\n        maximum : new Cesium.Cartesian3(250000.0, 250000.0, 250000.0),\n        minimum : new Cesium.Cartesian3(-250000.0, -250000.0, -250000.0)\n    })\n});\n\nviewer.scene.primitives.add(new Cesium.Primitive({\n      geometryInstances: instance,\n      appearance: new Cesium.EllipsoidSurfaceAppearance({\n          material:Cesium.Material.fromType('Stripe')\n\n      })\n}));\n```\n\nprimitive通过viewer中的primitives加载到场景中，primitives是primitives的集合对象。\n\n**Geometry**\nCesium支持以下几种Geometry几何图形\n\n| 几何图形                      | 说明                                                         |\n| ----------------------------- | ------------------------------------------------------------ |\n| BoxGeometry                   | 立方体                                                       |\n| BoxOutlineGeometry            | 仅有轮廓的立方体，只有外部线条的的盒子                       |\n| CircleGeometry                | 圆形或者拉伸的圆形，圆圈或挤压圆                             |\n| CircleOutlineGeometry         | 只有轮廓的圆形                                               |\n| CorridorGeometry              | 走廊：沿着地表的多段线(垂直于表面的折线)，且具有一定的宽度，可以拉伸到一定的高度 |\n| CorridorOutlineGeometry       | 只有轮廓的走廊                                               |\n| CylinderGeometry              | 圆柱、圆锥或者截断的圆锥                                     |\n| CylinderOutlineGeometry       | 只有轮廓的圆柱、圆锥或者截断的圆锥                           |\n| EllipseGeometry               | 椭圆或者拉伸的椭圆                                           |\n| EllipseOutlineGeometry        | 只有轮廓的椭圆或者拉伸的椭圆                                 |\n| EllipsoidGeometry             | 椭球体                                                       |\n| EllipsoidOutlineGeometry      | 只有轮廓的椭球体                                             |\n| RectangleGeometry             | 矩形或者拉伸的矩形                                           |\n| RectangleOutlineGeometry      | 只有轮廓的矩形或者拉伸的矩形                                 |\n| PolygonGeometry               | 多边形，可以具有空洞或者拉伸一定的高度                       |\n| PolygonOutlineGeometry        | 只有轮廓的多边形                                             |\n| PolylineGeometry              | 多段线，可以具有一定的宽度                                   |\n| SimplePolylineGeometry        | 简单的多段线                                                 |\n| PolylineVolumeGeometry        | 多段线柱体                                                   |\n| PolylineVolumeOutlineGeometry | 只有轮廓的多段线柱体                                         |\n| SphereGeometry                | 球体                                                         |\n| SphereOutlineGeometry         | 只有轮廓的球体                                               |\n| WallGeometry                  | 墙                                                           |\n| WallOutlineGeometry           | 只有轮廓的墙                                                 |\n\n在上例代码中我们用到了几何图形实例，多个实例可以公用一个geometry，通过设置GeometryInstance.modelMatrix 提供不同的信息。\n\n```javascript\nvar geometry = Cesium.BoxGeometry.fromDimensions({\n  vertexFormat : Cesium.VertexFormat.POSITION_AND_NORMAL,\n  dimensions : new Cesium.Cartesian3(1000000.0, 1000000.0, 500000.0)\n});\nvar instanceBottom = new Cesium.GeometryInstance({\n  geometry : geometry,\n  modelMatrix : Cesium.Matrix4.multiplyByTranslation(Cesium.Transforms.eastNorthUpToFixedFrame(\n    Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883)), new Cesium.Cartesian3(0.0, 0.0, 1000000.0), new Cesium.Matrix4()),\n  attributes : {\n    color : Cesium.ColorGeometryInstanceAttribute.fromColor(Cesium.Color.AQUA)\n  },\n  id : 'bottom'\n});\nvar instanceTop = new Cesium.GeometryInstance({\n  geometry : geometry,\n  modelMatrix : Cesium.Matrix4.multiplyByTranslation(Cesium.Transforms.eastNorthUpToFixedFrame(\n    Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883)), new Cesium.Cartesian3(0.0, 0.0, 3000000.0), new Cesium.Matrix4()),\n  attributes : {\n    color : Cesium.ColorGeometryInstanceAttribute.fromColor(Cesium.Color.AQUA)\n  },\n  id : 'top'\n});\n```\n\n同时多个实例也可以合并成一个primitive，节约性能。\n\n```javascript\nvar instances = [Instance1, Instance2, Instance3, ……];\nscene.primitives.add( new Cesium.Primitive( {\n    geometryInstances : instances, //合并\n    //某些外观允许每个几何图形实例分别指定某个属性，例如：\n    appearance : new Cesium.PerInstanceColorAppearance({translucent : false,closed : true})\n}));\n```\n\n**Appearance**\nCesium支持下列appearance\n\n| **外观**                   | **说明**                                                     |\n| -------------------------- | ------------------------------------------------------------ |\n| MaterialAppearance         | 支持各种Geometry类型的外观，支持使用材质来定义着色。支持材料描述阴影。 |\n| EllipsoidSurfaceAppearance | MaterialAppearance的一个版本。假设几何图形与地表是平行的，并且依此来进行顶点属性（vertex attributes）的计算。和Material Appearance一样，就像一个多边形，并且使用这个假设来通过程序上计算许多顶点属性来节省内存。 |\n| PerInstanceColorAppearance | 让每个实例使用自定义的颜色来着色，使用每个实例的颜色来遮蔽每个实例。 |\n| PolylineMaterialAppearance | 支持使用材质来着色多段线。支持材料遮蔽Polyline               |\n| PolylineColorAppearance    | 使用每顶点或者每片段（per-vertex or per-segment ）的颜色来着色多段线—使用每顶点或每段着色来遮蔽折线 |\n\nAppearance定义了需要在GPU上执行的GLSL着色器，这部分一般只有在自定义外观时需要修改。\n\n### 2.2.管理\n\n#### 2.2.1 entity管理\n\nviewer.entities属性实际上是一个EntityCollection对象，是entity的一个集合，提供了add、remove、removeAll等等接口来管理场景中的entity。\n\n![null](https://s2.loli.net/2024/01/08/xBoEJyDrGZ9SMOU.png)\nCesium.EntityCollection.collectionChangedEventCallback(collection,added, removed, changed)\nadd(entity) → Entity\ncomputeAvailability() → TimeInterval\ncontains(entity) → Boolean\ngetById(id) → Entity\ngetOrCreateEntity(id) → Entity\nremove(entity) → Boolean\nremoveAll()\nremoveById(id) → Boolean\nresumeEvents()\nsuspendEvents()\n\n#### 2.2.2 primitive管理\n\n场景通过viewer.scene.primitives属性来管理添加的primitive对象，primitives是PrimitiveCollection类型\n\n![null](https://s2.loli.net/2024/01/08/kq5UdluSYBXApTe.png)\n提供了如下接口管理primitive对象：\nadd(primitive) → Object\ncontains(primitive) → Boolean\ndestroy() → undefined\nget(index) → Object\nisDestroyed() → Boolean\nlower(primitive)\nlowerToBottom(primitive)\nraise(primitive)\nraiseToTop(primitive)\nremove(primitive) → Boolean\nremoveAll()\n\n### 2.3.拾取选择\n\n通常我们不光要绘制模型，还要跟场景进行交互，Cesium为我们提供了scene.pick接口进行拾取，具体介绍放到单独的鼠标事件一章中。\n\n### 2.4.两者对比\n\n既然已经有了entity为什么还要在提供个primitive接口呢？？？entity调用方便，封装完美，什么时候要用primitive？？？\n答案是性能问题，primitve更接近webGL的底层，加载效率更高，具体分析参考\nhttps://juejin.cn/post/6972420331982028837","slug":"cesium加载绘制3D模型","published":1,"updated":"2024-01-15T07:34:00.982Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrq64z6g000asoip92gme69k","content":"<h2 id=\"1-加载模型\"><a href=\"#1-加载模型\" class=\"headerlink\" title=\"1.加载模型\"></a>1.加载模型</h2><p>使用很简单，就是现今常用的三维建模工具（3dmax、maya、creator、sketch up等等）都不支持gltf格式文件的直接导出，需要经过中间转化。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> entity = viewer.<span class=\"property\">entities</span>.<span class=\"title function_\">add</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">id</span>: <span class=\"string\">&quot;car&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;car&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">availability</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">TimeIntervalCollection</span>([ <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">TimeInterval</span>(&#123;<span class=\"attr\">start</span>: start, <span class=\"attr\">stop</span>: stop&#125;)]),</span><br><span class=\"line\">    <span class=\"attr\">position</span>: property,</span><br><span class=\"line\">    <span class=\"attr\">orientation</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">VelocityOrientationProperty</span>(property),</span><br><span class=\"line\">    <span class=\"attr\">model</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">uri</span>: <span class=\"string\">&quot;./GroundVehicle.glb&quot;</span>, <span class=\"comment\">// 模型</span></span><br><span class=\"line\">      <span class=\"attr\">minimumPixelSize</span>: <span class=\"number\">64</span>,</span><br><span class=\"line\">      <span class=\"attr\">maximumSize</span>: <span class=\"number\">128</span>,</span><br><span class=\"line\">      <span class=\"attr\">maximumScale</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">      <span class=\"attr\">scale</span>: <span class=\"number\">16</span>,</span><br><span class=\"line\">      <span class=\"attr\">runAnimations</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  viewer.<span class=\"property\">trackedEntity</span> = entity; <span class=\"comment\">// 镜头固定到模型上</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s2.loli.net/2024/01/08/iwYOa5sIqANLHte.png\" alt=\"null\"></p>\n<h2 id=\"2-绘制模型\"><a href=\"#2-绘制模型\" class=\"headerlink\" title=\"2.绘制模型\"></a>2.绘制模型</h2><p>Cesium不只可以加载3d模型，还可以基于空间三维数据绘制模型。Cesium提供了两类接口来绘制模型，entity和primitive。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/p4N8oGC6HSuVJMj.png\" alt=\"null\"><br><img src=\"https://s2.loli.net/2024/01/08/KuwHlsGnDYLBOhx.png\" alt=\"null\"><br>两者的区别其实是：entity是个相对高级的接口，是个prmitive的封装过的语法糖；primitive更接近渲染引擎底层相对更复杂，包含geometry和appearance两部分，geometry定义primitive的几何结构，appearance定义primitive的着色。</p>\n<h3 id=\"2-1-基本绘制\"><a href=\"#2-1-基本绘制\" class=\"headerlink\" title=\"2.1.基本绘制\"></a>2.1.基本绘制</h3><h4 id=\"2-1-1-entity绘制\"><a href=\"#2-1-1-entity绘制\" class=\"headerlink\" title=\"2.1.1 entity绘制\"></a>2.1.1 entity绘制</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">viewer.<span class=\"property\">entities</span>.<span class=\"title function_\">add</span>(&#123;</span><br><span class=\"line\">   <span class=\"attr\">name</span>: <span class=\"string\">&#x27;red box&#x27;</span>,</span><br><span class=\"line\">   <span class=\"attr\">position</span>: <span class=\"title class_\">Cesium</span>.<span class=\"property\">Cartesian3</span>.<span class=\"title function_\">fromDegrees</span>(-<span class=\"number\">107.0</span>, <span class=\"number\">40.0</span>, <span class=\"number\">300000.0</span>),</span><br><span class=\"line\">   <span class=\"attr\">box</span>: &#123;</span><br><span class=\"line\">     <span class=\"attr\">dimensions</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">Cartesian3</span>(<span class=\"number\">40000</span>, <span class=\"number\">30000</span>, <span class=\"number\">50000</span>),</span><br><span class=\"line\">     <span class=\"attr\">material</span>: <span class=\"title class_\">Cesium</span>.<span class=\"property\">Color</span>.<span class=\"property\">RED</span>.<span class=\"title function_\">withAlpha</span>(<span class=\"number\">0.5</span>),</span><br><span class=\"line\">     <span class=\"attr\">outline</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">     <span class=\"attr\">outlineColor</span>: <span class=\"title class_\">Cesium</span>.<span class=\"property\">Color</span>.<span class=\"property\">BLACK</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>可以看到entity通过viewer中的entities加载到场景中，entities是entity的集合对象。<br>以下是官方支持的形状：</p>\n<table>\n<thead>\n<tr>\n<th><strong>形状</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Point</td>\n<td>点；<a href=\"https://cesium.com/learn/cesiumjs/ref-doc/PointGraphics.html?classFilter=point\">文档</a></td>\n</tr>\n<tr>\n<td>Boxes</td>\n<td>盒子；<a href=\"https://cesium.com/learn/cesiumjs/ref-doc/BoxGraphics.html?classFilter=box\">文档</a>；<a href=\"https://sandcastle.cesium.com/index.html?src=Box.html\">示例</a></td>\n</tr>\n<tr>\n<td>Circles and Ellipses</td>\n<td>圆和椭圆；<a href=\"https://cesium.com/learn/cesiumjs/ref-doc/EllipseGraphics.html?classFilter=elli\">文档</a>；[示例](<a href=\"https://sandcastle.cesium.com/index.html?src=Circles\">https://sandcastle.cesium.com/index.html?src=Circles</a> and Ellipses.html)</td>\n</tr>\n<tr>\n<td>Corridor</td>\n<td>走廊通道；<a href=\"https://cesium.com/learn/cesiumjs/ref-doc/CorridorGraphics.html?classFilter=corr\">文档</a>；<a href=\"https://sandcastle.cesium.com/index.html?src=Corridor.html\">示例</a></td>\n</tr>\n<tr>\n<td>Cylinder and cones</td>\n<td>圆柱和圆锥；<a href=\"https://cesium.com/learn/cesiumjs/ref-doc/CylinderGraphics.html?classFilter=cylin\">文档</a>；[示例](<a href=\"https://sandcastle.cesium.com/index.html?src=Cylinders\">https://sandcastle.cesium.com/index.html?src=Cylinders</a> and Cones.html)</td>\n</tr>\n<tr>\n<td>Polygons</td>\n<td>多边形；<a href=\"https://cesium.com/learn/cesiumjs/ref-doc/PolygonGraphics.html?classFilter=polyg\">文档</a>；<a href=\"https://sandcastle.cesium.com/index.html?src=Polygon.html\">示例</a></td>\n</tr>\n<tr>\n<td>Polylines</td>\n<td>折线；<a href=\"https://cesium.com/learn/cesiumjs/ref-doc/PolylineGraphics.html?classFilter=polyl\">文档</a>；<a href=\"https://sandcastle.cesium.com/index.html?src=Polyline.html\">示例</a></td>\n</tr>\n<tr>\n<td>Polyline volumes</td>\n<td>折线卷，折线体积；<a href=\"https://cesium.com/learn/cesiumjs/ref-doc/PolylineVolumeGraphics.html?classFilter=polyl\">文档</a>；[示例](<a href=\"https://sandcastle.cesium.com/index.html?src=Polyline\">https://sandcastle.cesium.com/index.html?src=Polyline</a> Volume.html)</td>\n</tr>\n<tr>\n<td>Rectangles</td>\n<td>矩形；<a href=\"https://cesium.com/learn/cesiumjs/ref-doc/RectangleGraphics.html?classFilter=rec\">文档</a>；<a href=\"https://sandcastle.cesium.com/index.html?src=Rectangle.html\">示例</a></td>\n</tr>\n<tr>\n<td>Spheres and ellipsoids</td>\n<td>球体和椭圆体；<a href=\"https://cesium.com/learn/cesiumjs/ref-doc/EllipsoidGraphics.html\">文档</a>；[示例](<a href=\"https://sandcastle.cesium.com/?src=Spheres\">https://sandcastle.cesium.com/?src=Spheres</a> and Ellipsoids.html)</td>\n</tr>\n<tr>\n<td>Walls</td>\n<td>墙体；<a href=\"https://cesium.com/learn/cesiumjs/ref-doc/WallGraphics.html\">文档</a>；<a href=\"https://sandcastle.cesium.com/?src=Wall.html\">示例</a></td>\n</tr>\n</tbody></table>\n<h4 id=\"2-1-2-primitive绘制\"><a href=\"#2-1-2-primitive绘制\" class=\"headerlink\" title=\"2.1.2 primitive绘制\"></a>2.1.2 primitive绘制</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> instance = <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">GeometryInstance</span>(&#123;</span><br><span class=\"line\">   <span class=\"attr\">geometry</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">BoxGeometry</span>(&#123;</span><br><span class=\"line\">        vertexFormat : <span class=\"title class_\">Cesium</span>.<span class=\"property\">VertexFormat</span>.<span class=\"property\">POSITION_ONLY</span>,</span><br><span class=\"line\">        maximum : <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">Cartesian3</span>(<span class=\"number\">250000.0</span>, <span class=\"number\">250000.0</span>, <span class=\"number\">250000.0</span>),</span><br><span class=\"line\">        minimum : <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">Cartesian3</span>(-<span class=\"number\">250000.0</span>, -<span class=\"number\">250000.0</span>, -<span class=\"number\">250000.0</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">viewer.<span class=\"property\">scene</span>.<span class=\"property\">primitives</span>.<span class=\"title function_\">add</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">Primitive</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">geometryInstances</span>: instance,</span><br><span class=\"line\">      <span class=\"attr\">appearance</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">EllipsoidSurfaceAppearance</span>(&#123;</span><br><span class=\"line\">          <span class=\"attr\">material</span>:<span class=\"title class_\">Cesium</span>.<span class=\"property\">Material</span>.<span class=\"title function_\">fromType</span>(<span class=\"string\">&#x27;Stripe&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n\n<p>primitive通过viewer中的primitives加载到场景中，primitives是primitives的集合对象。</p>\n<p><strong>Geometry</strong><br>Cesium支持以下几种Geometry几何图形</p>\n<table>\n<thead>\n<tr>\n<th>几何图形</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>BoxGeometry</td>\n<td>立方体</td>\n</tr>\n<tr>\n<td>BoxOutlineGeometry</td>\n<td>仅有轮廓的立方体，只有外部线条的的盒子</td>\n</tr>\n<tr>\n<td>CircleGeometry</td>\n<td>圆形或者拉伸的圆形，圆圈或挤压圆</td>\n</tr>\n<tr>\n<td>CircleOutlineGeometry</td>\n<td>只有轮廓的圆形</td>\n</tr>\n<tr>\n<td>CorridorGeometry</td>\n<td>走廊：沿着地表的多段线(垂直于表面的折线)，且具有一定的宽度，可以拉伸到一定的高度</td>\n</tr>\n<tr>\n<td>CorridorOutlineGeometry</td>\n<td>只有轮廓的走廊</td>\n</tr>\n<tr>\n<td>CylinderGeometry</td>\n<td>圆柱、圆锥或者截断的圆锥</td>\n</tr>\n<tr>\n<td>CylinderOutlineGeometry</td>\n<td>只有轮廓的圆柱、圆锥或者截断的圆锥</td>\n</tr>\n<tr>\n<td>EllipseGeometry</td>\n<td>椭圆或者拉伸的椭圆</td>\n</tr>\n<tr>\n<td>EllipseOutlineGeometry</td>\n<td>只有轮廓的椭圆或者拉伸的椭圆</td>\n</tr>\n<tr>\n<td>EllipsoidGeometry</td>\n<td>椭球体</td>\n</tr>\n<tr>\n<td>EllipsoidOutlineGeometry</td>\n<td>只有轮廓的椭球体</td>\n</tr>\n<tr>\n<td>RectangleGeometry</td>\n<td>矩形或者拉伸的矩形</td>\n</tr>\n<tr>\n<td>RectangleOutlineGeometry</td>\n<td>只有轮廓的矩形或者拉伸的矩形</td>\n</tr>\n<tr>\n<td>PolygonGeometry</td>\n<td>多边形，可以具有空洞或者拉伸一定的高度</td>\n</tr>\n<tr>\n<td>PolygonOutlineGeometry</td>\n<td>只有轮廓的多边形</td>\n</tr>\n<tr>\n<td>PolylineGeometry</td>\n<td>多段线，可以具有一定的宽度</td>\n</tr>\n<tr>\n<td>SimplePolylineGeometry</td>\n<td>简单的多段线</td>\n</tr>\n<tr>\n<td>PolylineVolumeGeometry</td>\n<td>多段线柱体</td>\n</tr>\n<tr>\n<td>PolylineVolumeOutlineGeometry</td>\n<td>只有轮廓的多段线柱体</td>\n</tr>\n<tr>\n<td>SphereGeometry</td>\n<td>球体</td>\n</tr>\n<tr>\n<td>SphereOutlineGeometry</td>\n<td>只有轮廓的球体</td>\n</tr>\n<tr>\n<td>WallGeometry</td>\n<td>墙</td>\n</tr>\n<tr>\n<td>WallOutlineGeometry</td>\n<td>只有轮廓的墙</td>\n</tr>\n</tbody></table>\n<p>在上例代码中我们用到了几何图形实例，多个实例可以公用一个geometry，通过设置GeometryInstance.modelMatrix 提供不同的信息。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> geometry = <span class=\"title class_\">Cesium</span>.<span class=\"property\">BoxGeometry</span>.<span class=\"title function_\">fromDimensions</span>(&#123;</span><br><span class=\"line\">  vertexFormat : <span class=\"title class_\">Cesium</span>.<span class=\"property\">VertexFormat</span>.<span class=\"property\">POSITION_AND_NORMAL</span>,</span><br><span class=\"line\">  dimensions : <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">Cartesian3</span>(<span class=\"number\">1000000.0</span>, <span class=\"number\">1000000.0</span>, <span class=\"number\">500000.0</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> instanceBottom = <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">GeometryInstance</span>(&#123;</span><br><span class=\"line\">  geometry : geometry,</span><br><span class=\"line\">  modelMatrix : <span class=\"title class_\">Cesium</span>.<span class=\"property\">Matrix4</span>.<span class=\"title function_\">multiplyByTranslation</span>(<span class=\"title class_\">Cesium</span>.<span class=\"property\">Transforms</span>.<span class=\"title function_\">eastNorthUpToFixedFrame</span>(</span><br><span class=\"line\">    <span class=\"title class_\">Cesium</span>.<span class=\"property\">Cartesian3</span>.<span class=\"title function_\">fromDegrees</span>(-<span class=\"number\">75.59777</span>, <span class=\"number\">40.03883</span>)), <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">Cartesian3</span>(<span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">1000000.0</span>), <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">Matrix4</span>()),</span><br><span class=\"line\">  attributes : &#123;</span><br><span class=\"line\">    color : <span class=\"title class_\">Cesium</span>.<span class=\"property\">ColorGeometryInstanceAttribute</span>.<span class=\"title function_\">fromColor</span>(<span class=\"title class_\">Cesium</span>.<span class=\"property\">Color</span>.<span class=\"property\">AQUA</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  id : <span class=\"string\">&#x27;bottom&#x27;</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> instanceTop = <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">GeometryInstance</span>(&#123;</span><br><span class=\"line\">  geometry : geometry,</span><br><span class=\"line\">  modelMatrix : <span class=\"title class_\">Cesium</span>.<span class=\"property\">Matrix4</span>.<span class=\"title function_\">multiplyByTranslation</span>(<span class=\"title class_\">Cesium</span>.<span class=\"property\">Transforms</span>.<span class=\"title function_\">eastNorthUpToFixedFrame</span>(</span><br><span class=\"line\">    <span class=\"title class_\">Cesium</span>.<span class=\"property\">Cartesian3</span>.<span class=\"title function_\">fromDegrees</span>(-<span class=\"number\">75.59777</span>, <span class=\"number\">40.03883</span>)), <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">Cartesian3</span>(<span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">3000000.0</span>), <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">Matrix4</span>()),</span><br><span class=\"line\">  attributes : &#123;</span><br><span class=\"line\">    color : <span class=\"title class_\">Cesium</span>.<span class=\"property\">ColorGeometryInstanceAttribute</span>.<span class=\"title function_\">fromColor</span>(<span class=\"title class_\">Cesium</span>.<span class=\"property\">Color</span>.<span class=\"property\">AQUA</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  id : <span class=\"string\">&#x27;top&#x27;</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>同时多个实例也可以合并成一个primitive，节约性能。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> instances = [<span class=\"title class_\">Instance1</span>, <span class=\"title class_\">Instance2</span>, <span class=\"title class_\">Instance3</span>, ……];</span><br><span class=\"line\">scene.<span class=\"property\">primitives</span>.<span class=\"title function_\">add</span>( <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">Primitive</span>( &#123;</span><br><span class=\"line\">    geometryInstances : instances, <span class=\"comment\">//合并</span></span><br><span class=\"line\">    <span class=\"comment\">//某些外观允许每个几何图形实例分别指定某个属性，例如：</span></span><br><span class=\"line\">    appearance : <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">PerInstanceColorAppearance</span>(&#123;translucent : <span class=\"literal\">false</span>,closed : <span class=\"literal\">true</span>&#125;)</span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n\n<p><strong>Appearance</strong><br>Cesium支持下列appearance</p>\n<table>\n<thead>\n<tr>\n<th><strong>外观</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>MaterialAppearance</td>\n<td>支持各种Geometry类型的外观，支持使用材质来定义着色。支持材料描述阴影。</td>\n</tr>\n<tr>\n<td>EllipsoidSurfaceAppearance</td>\n<td>MaterialAppearance的一个版本。假设几何图形与地表是平行的，并且依此来进行顶点属性（vertex attributes）的计算。和Material Appearance一样，就像一个多边形，并且使用这个假设来通过程序上计算许多顶点属性来节省内存。</td>\n</tr>\n<tr>\n<td>PerInstanceColorAppearance</td>\n<td>让每个实例使用自定义的颜色来着色，使用每个实例的颜色来遮蔽每个实例。</td>\n</tr>\n<tr>\n<td>PolylineMaterialAppearance</td>\n<td>支持使用材质来着色多段线。支持材料遮蔽Polyline</td>\n</tr>\n<tr>\n<td>PolylineColorAppearance</td>\n<td>使用每顶点或者每片段（per-vertex or per-segment ）的颜色来着色多段线—使用每顶点或每段着色来遮蔽折线</td>\n</tr>\n</tbody></table>\n<p>Appearance定义了需要在GPU上执行的GLSL着色器，这部分一般只有在自定义外观时需要修改。</p>\n<h3 id=\"2-2-管理\"><a href=\"#2-2-管理\" class=\"headerlink\" title=\"2.2.管理\"></a>2.2.管理</h3><h4 id=\"2-2-1-entity管理\"><a href=\"#2-2-1-entity管理\" class=\"headerlink\" title=\"2.2.1 entity管理\"></a>2.2.1 entity管理</h4><p>viewer.entities属性实际上是一个EntityCollection对象，是entity的一个集合，提供了add、remove、removeAll等等接口来管理场景中的entity。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/xBoEJyDrGZ9SMOU.png\" alt=\"null\"><br>Cesium.EntityCollection.collectionChangedEventCallback(collection,added, removed, changed)<br>add(entity) → Entity<br>computeAvailability() → TimeInterval<br>contains(entity) → Boolean<br>getById(id) → Entity<br>getOrCreateEntity(id) → Entity<br>remove(entity) → Boolean<br>removeAll()<br>removeById(id) → Boolean<br>resumeEvents()<br>suspendEvents()</p>\n<h4 id=\"2-2-2-primitive管理\"><a href=\"#2-2-2-primitive管理\" class=\"headerlink\" title=\"2.2.2 primitive管理\"></a>2.2.2 primitive管理</h4><p>场景通过viewer.scene.primitives属性来管理添加的primitive对象，primitives是PrimitiveCollection类型</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/kq5UdluSYBXApTe.png\" alt=\"null\"><br>提供了如下接口管理primitive对象：<br>add(primitive) → Object<br>contains(primitive) → Boolean<br>destroy() → undefined<br>get(index) → Object<br>isDestroyed() → Boolean<br>lower(primitive)<br>lowerToBottom(primitive)<br>raise(primitive)<br>raiseToTop(primitive)<br>remove(primitive) → Boolean<br>removeAll()</p>\n<h3 id=\"2-3-拾取选择\"><a href=\"#2-3-拾取选择\" class=\"headerlink\" title=\"2.3.拾取选择\"></a>2.3.拾取选择</h3><p>通常我们不光要绘制模型，还要跟场景进行交互，Cesium为我们提供了scene.pick接口进行拾取，具体介绍放到单独的鼠标事件一章中。</p>\n<h3 id=\"2-4-两者对比\"><a href=\"#2-4-两者对比\" class=\"headerlink\" title=\"2.4.两者对比\"></a>2.4.两者对比</h3><p>既然已经有了entity为什么还要在提供个primitive接口呢？？？entity调用方便，封装完美，什么时候要用primitive？？？<br>答案是性能问题，primitve更接近webGL的底层，加载效率更高，具体分析参考<br><a href=\"https://juejin.cn/post/6972420331982028837\">https://juejin.cn/post/6972420331982028837</a></p>\n","site":{"data":{}},"length":1408,"excerpt":"","more":"<h2 id=\"1-加载模型\"><a href=\"#1-加载模型\" class=\"headerlink\" title=\"1.加载模型\"></a>1.加载模型</h2><p>使用很简单，就是现今常用的三维建模工具（3dmax、maya、creator、sketch up等等）都不支持gltf格式文件的直接导出，需要经过中间转化。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> entity = viewer.<span class=\"property\">entities</span>.<span class=\"title function_\">add</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">id</span>: <span class=\"string\">&quot;car&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;car&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">availability</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">TimeIntervalCollection</span>([ <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">TimeInterval</span>(&#123;<span class=\"attr\">start</span>: start, <span class=\"attr\">stop</span>: stop&#125;)]),</span><br><span class=\"line\">    <span class=\"attr\">position</span>: property,</span><br><span class=\"line\">    <span class=\"attr\">orientation</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">VelocityOrientationProperty</span>(property),</span><br><span class=\"line\">    <span class=\"attr\">model</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">uri</span>: <span class=\"string\">&quot;./GroundVehicle.glb&quot;</span>, <span class=\"comment\">// 模型</span></span><br><span class=\"line\">      <span class=\"attr\">minimumPixelSize</span>: <span class=\"number\">64</span>,</span><br><span class=\"line\">      <span class=\"attr\">maximumSize</span>: <span class=\"number\">128</span>,</span><br><span class=\"line\">      <span class=\"attr\">maximumScale</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">      <span class=\"attr\">scale</span>: <span class=\"number\">16</span>,</span><br><span class=\"line\">      <span class=\"attr\">runAnimations</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  viewer.<span class=\"property\">trackedEntity</span> = entity; <span class=\"comment\">// 镜头固定到模型上</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s2.loli.net/2024/01/08/iwYOa5sIqANLHte.png\" alt=\"null\"></p>\n<h2 id=\"2-绘制模型\"><a href=\"#2-绘制模型\" class=\"headerlink\" title=\"2.绘制模型\"></a>2.绘制模型</h2><p>Cesium不只可以加载3d模型，还可以基于空间三维数据绘制模型。Cesium提供了两类接口来绘制模型，entity和primitive。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/p4N8oGC6HSuVJMj.png\" alt=\"null\"><br><img src=\"https://s2.loli.net/2024/01/08/KuwHlsGnDYLBOhx.png\" alt=\"null\"><br>两者的区别其实是：entity是个相对高级的接口，是个prmitive的封装过的语法糖；primitive更接近渲染引擎底层相对更复杂，包含geometry和appearance两部分，geometry定义primitive的几何结构，appearance定义primitive的着色。</p>\n<h3 id=\"2-1-基本绘制\"><a href=\"#2-1-基本绘制\" class=\"headerlink\" title=\"2.1.基本绘制\"></a>2.1.基本绘制</h3><h4 id=\"2-1-1-entity绘制\"><a href=\"#2-1-1-entity绘制\" class=\"headerlink\" title=\"2.1.1 entity绘制\"></a>2.1.1 entity绘制</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">viewer.<span class=\"property\">entities</span>.<span class=\"title function_\">add</span>(&#123;</span><br><span class=\"line\">   <span class=\"attr\">name</span>: <span class=\"string\">&#x27;red box&#x27;</span>,</span><br><span class=\"line\">   <span class=\"attr\">position</span>: <span class=\"title class_\">Cesium</span>.<span class=\"property\">Cartesian3</span>.<span class=\"title function_\">fromDegrees</span>(-<span class=\"number\">107.0</span>, <span class=\"number\">40.0</span>, <span class=\"number\">300000.0</span>),</span><br><span class=\"line\">   <span class=\"attr\">box</span>: &#123;</span><br><span class=\"line\">     <span class=\"attr\">dimensions</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">Cartesian3</span>(<span class=\"number\">40000</span>, <span class=\"number\">30000</span>, <span class=\"number\">50000</span>),</span><br><span class=\"line\">     <span class=\"attr\">material</span>: <span class=\"title class_\">Cesium</span>.<span class=\"property\">Color</span>.<span class=\"property\">RED</span>.<span class=\"title function_\">withAlpha</span>(<span class=\"number\">0.5</span>),</span><br><span class=\"line\">     <span class=\"attr\">outline</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">     <span class=\"attr\">outlineColor</span>: <span class=\"title class_\">Cesium</span>.<span class=\"property\">Color</span>.<span class=\"property\">BLACK</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>可以看到entity通过viewer中的entities加载到场景中，entities是entity的集合对象。<br>以下是官方支持的形状：</p>\n<table>\n<thead>\n<tr>\n<th><strong>形状</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Point</td>\n<td>点；<a href=\"https://cesium.com/learn/cesiumjs/ref-doc/PointGraphics.html?classFilter=point\">文档</a></td>\n</tr>\n<tr>\n<td>Boxes</td>\n<td>盒子；<a href=\"https://cesium.com/learn/cesiumjs/ref-doc/BoxGraphics.html?classFilter=box\">文档</a>；<a href=\"https://sandcastle.cesium.com/index.html?src=Box.html\">示例</a></td>\n</tr>\n<tr>\n<td>Circles and Ellipses</td>\n<td>圆和椭圆；<a href=\"https://cesium.com/learn/cesiumjs/ref-doc/EllipseGraphics.html?classFilter=elli\">文档</a>；[示例](<a href=\"https://sandcastle.cesium.com/index.html?src=Circles\">https://sandcastle.cesium.com/index.html?src=Circles</a> and Ellipses.html)</td>\n</tr>\n<tr>\n<td>Corridor</td>\n<td>走廊通道；<a href=\"https://cesium.com/learn/cesiumjs/ref-doc/CorridorGraphics.html?classFilter=corr\">文档</a>；<a href=\"https://sandcastle.cesium.com/index.html?src=Corridor.html\">示例</a></td>\n</tr>\n<tr>\n<td>Cylinder and cones</td>\n<td>圆柱和圆锥；<a href=\"https://cesium.com/learn/cesiumjs/ref-doc/CylinderGraphics.html?classFilter=cylin\">文档</a>；[示例](<a href=\"https://sandcastle.cesium.com/index.html?src=Cylinders\">https://sandcastle.cesium.com/index.html?src=Cylinders</a> and Cones.html)</td>\n</tr>\n<tr>\n<td>Polygons</td>\n<td>多边形；<a href=\"https://cesium.com/learn/cesiumjs/ref-doc/PolygonGraphics.html?classFilter=polyg\">文档</a>；<a href=\"https://sandcastle.cesium.com/index.html?src=Polygon.html\">示例</a></td>\n</tr>\n<tr>\n<td>Polylines</td>\n<td>折线；<a href=\"https://cesium.com/learn/cesiumjs/ref-doc/PolylineGraphics.html?classFilter=polyl\">文档</a>；<a href=\"https://sandcastle.cesium.com/index.html?src=Polyline.html\">示例</a></td>\n</tr>\n<tr>\n<td>Polyline volumes</td>\n<td>折线卷，折线体积；<a href=\"https://cesium.com/learn/cesiumjs/ref-doc/PolylineVolumeGraphics.html?classFilter=polyl\">文档</a>；[示例](<a href=\"https://sandcastle.cesium.com/index.html?src=Polyline\">https://sandcastle.cesium.com/index.html?src=Polyline</a> Volume.html)</td>\n</tr>\n<tr>\n<td>Rectangles</td>\n<td>矩形；<a href=\"https://cesium.com/learn/cesiumjs/ref-doc/RectangleGraphics.html?classFilter=rec\">文档</a>；<a href=\"https://sandcastle.cesium.com/index.html?src=Rectangle.html\">示例</a></td>\n</tr>\n<tr>\n<td>Spheres and ellipsoids</td>\n<td>球体和椭圆体；<a href=\"https://cesium.com/learn/cesiumjs/ref-doc/EllipsoidGraphics.html\">文档</a>；[示例](<a href=\"https://sandcastle.cesium.com/?src=Spheres\">https://sandcastle.cesium.com/?src=Spheres</a> and Ellipsoids.html)</td>\n</tr>\n<tr>\n<td>Walls</td>\n<td>墙体；<a href=\"https://cesium.com/learn/cesiumjs/ref-doc/WallGraphics.html\">文档</a>；<a href=\"https://sandcastle.cesium.com/?src=Wall.html\">示例</a></td>\n</tr>\n</tbody></table>\n<h4 id=\"2-1-2-primitive绘制\"><a href=\"#2-1-2-primitive绘制\" class=\"headerlink\" title=\"2.1.2 primitive绘制\"></a>2.1.2 primitive绘制</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> instance = <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">GeometryInstance</span>(&#123;</span><br><span class=\"line\">   <span class=\"attr\">geometry</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">BoxGeometry</span>(&#123;</span><br><span class=\"line\">        vertexFormat : <span class=\"title class_\">Cesium</span>.<span class=\"property\">VertexFormat</span>.<span class=\"property\">POSITION_ONLY</span>,</span><br><span class=\"line\">        maximum : <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">Cartesian3</span>(<span class=\"number\">250000.0</span>, <span class=\"number\">250000.0</span>, <span class=\"number\">250000.0</span>),</span><br><span class=\"line\">        minimum : <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">Cartesian3</span>(-<span class=\"number\">250000.0</span>, -<span class=\"number\">250000.0</span>, -<span class=\"number\">250000.0</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">viewer.<span class=\"property\">scene</span>.<span class=\"property\">primitives</span>.<span class=\"title function_\">add</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">Primitive</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">geometryInstances</span>: instance,</span><br><span class=\"line\">      <span class=\"attr\">appearance</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">EllipsoidSurfaceAppearance</span>(&#123;</span><br><span class=\"line\">          <span class=\"attr\">material</span>:<span class=\"title class_\">Cesium</span>.<span class=\"property\">Material</span>.<span class=\"title function_\">fromType</span>(<span class=\"string\">&#x27;Stripe&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n\n<p>primitive通过viewer中的primitives加载到场景中，primitives是primitives的集合对象。</p>\n<p><strong>Geometry</strong><br>Cesium支持以下几种Geometry几何图形</p>\n<table>\n<thead>\n<tr>\n<th>几何图形</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>BoxGeometry</td>\n<td>立方体</td>\n</tr>\n<tr>\n<td>BoxOutlineGeometry</td>\n<td>仅有轮廓的立方体，只有外部线条的的盒子</td>\n</tr>\n<tr>\n<td>CircleGeometry</td>\n<td>圆形或者拉伸的圆形，圆圈或挤压圆</td>\n</tr>\n<tr>\n<td>CircleOutlineGeometry</td>\n<td>只有轮廓的圆形</td>\n</tr>\n<tr>\n<td>CorridorGeometry</td>\n<td>走廊：沿着地表的多段线(垂直于表面的折线)，且具有一定的宽度，可以拉伸到一定的高度</td>\n</tr>\n<tr>\n<td>CorridorOutlineGeometry</td>\n<td>只有轮廓的走廊</td>\n</tr>\n<tr>\n<td>CylinderGeometry</td>\n<td>圆柱、圆锥或者截断的圆锥</td>\n</tr>\n<tr>\n<td>CylinderOutlineGeometry</td>\n<td>只有轮廓的圆柱、圆锥或者截断的圆锥</td>\n</tr>\n<tr>\n<td>EllipseGeometry</td>\n<td>椭圆或者拉伸的椭圆</td>\n</tr>\n<tr>\n<td>EllipseOutlineGeometry</td>\n<td>只有轮廓的椭圆或者拉伸的椭圆</td>\n</tr>\n<tr>\n<td>EllipsoidGeometry</td>\n<td>椭球体</td>\n</tr>\n<tr>\n<td>EllipsoidOutlineGeometry</td>\n<td>只有轮廓的椭球体</td>\n</tr>\n<tr>\n<td>RectangleGeometry</td>\n<td>矩形或者拉伸的矩形</td>\n</tr>\n<tr>\n<td>RectangleOutlineGeometry</td>\n<td>只有轮廓的矩形或者拉伸的矩形</td>\n</tr>\n<tr>\n<td>PolygonGeometry</td>\n<td>多边形，可以具有空洞或者拉伸一定的高度</td>\n</tr>\n<tr>\n<td>PolygonOutlineGeometry</td>\n<td>只有轮廓的多边形</td>\n</tr>\n<tr>\n<td>PolylineGeometry</td>\n<td>多段线，可以具有一定的宽度</td>\n</tr>\n<tr>\n<td>SimplePolylineGeometry</td>\n<td>简单的多段线</td>\n</tr>\n<tr>\n<td>PolylineVolumeGeometry</td>\n<td>多段线柱体</td>\n</tr>\n<tr>\n<td>PolylineVolumeOutlineGeometry</td>\n<td>只有轮廓的多段线柱体</td>\n</tr>\n<tr>\n<td>SphereGeometry</td>\n<td>球体</td>\n</tr>\n<tr>\n<td>SphereOutlineGeometry</td>\n<td>只有轮廓的球体</td>\n</tr>\n<tr>\n<td>WallGeometry</td>\n<td>墙</td>\n</tr>\n<tr>\n<td>WallOutlineGeometry</td>\n<td>只有轮廓的墙</td>\n</tr>\n</tbody></table>\n<p>在上例代码中我们用到了几何图形实例，多个实例可以公用一个geometry，通过设置GeometryInstance.modelMatrix 提供不同的信息。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> geometry = <span class=\"title class_\">Cesium</span>.<span class=\"property\">BoxGeometry</span>.<span class=\"title function_\">fromDimensions</span>(&#123;</span><br><span class=\"line\">  vertexFormat : <span class=\"title class_\">Cesium</span>.<span class=\"property\">VertexFormat</span>.<span class=\"property\">POSITION_AND_NORMAL</span>,</span><br><span class=\"line\">  dimensions : <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">Cartesian3</span>(<span class=\"number\">1000000.0</span>, <span class=\"number\">1000000.0</span>, <span class=\"number\">500000.0</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> instanceBottom = <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">GeometryInstance</span>(&#123;</span><br><span class=\"line\">  geometry : geometry,</span><br><span class=\"line\">  modelMatrix : <span class=\"title class_\">Cesium</span>.<span class=\"property\">Matrix4</span>.<span class=\"title function_\">multiplyByTranslation</span>(<span class=\"title class_\">Cesium</span>.<span class=\"property\">Transforms</span>.<span class=\"title function_\">eastNorthUpToFixedFrame</span>(</span><br><span class=\"line\">    <span class=\"title class_\">Cesium</span>.<span class=\"property\">Cartesian3</span>.<span class=\"title function_\">fromDegrees</span>(-<span class=\"number\">75.59777</span>, <span class=\"number\">40.03883</span>)), <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">Cartesian3</span>(<span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">1000000.0</span>), <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">Matrix4</span>()),</span><br><span class=\"line\">  attributes : &#123;</span><br><span class=\"line\">    color : <span class=\"title class_\">Cesium</span>.<span class=\"property\">ColorGeometryInstanceAttribute</span>.<span class=\"title function_\">fromColor</span>(<span class=\"title class_\">Cesium</span>.<span class=\"property\">Color</span>.<span class=\"property\">AQUA</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  id : <span class=\"string\">&#x27;bottom&#x27;</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> instanceTop = <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">GeometryInstance</span>(&#123;</span><br><span class=\"line\">  geometry : geometry,</span><br><span class=\"line\">  modelMatrix : <span class=\"title class_\">Cesium</span>.<span class=\"property\">Matrix4</span>.<span class=\"title function_\">multiplyByTranslation</span>(<span class=\"title class_\">Cesium</span>.<span class=\"property\">Transforms</span>.<span class=\"title function_\">eastNorthUpToFixedFrame</span>(</span><br><span class=\"line\">    <span class=\"title class_\">Cesium</span>.<span class=\"property\">Cartesian3</span>.<span class=\"title function_\">fromDegrees</span>(-<span class=\"number\">75.59777</span>, <span class=\"number\">40.03883</span>)), <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">Cartesian3</span>(<span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">3000000.0</span>), <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">Matrix4</span>()),</span><br><span class=\"line\">  attributes : &#123;</span><br><span class=\"line\">    color : <span class=\"title class_\">Cesium</span>.<span class=\"property\">ColorGeometryInstanceAttribute</span>.<span class=\"title function_\">fromColor</span>(<span class=\"title class_\">Cesium</span>.<span class=\"property\">Color</span>.<span class=\"property\">AQUA</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  id : <span class=\"string\">&#x27;top&#x27;</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>同时多个实例也可以合并成一个primitive，节约性能。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> instances = [<span class=\"title class_\">Instance1</span>, <span class=\"title class_\">Instance2</span>, <span class=\"title class_\">Instance3</span>, ……];</span><br><span class=\"line\">scene.<span class=\"property\">primitives</span>.<span class=\"title function_\">add</span>( <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">Primitive</span>( &#123;</span><br><span class=\"line\">    geometryInstances : instances, <span class=\"comment\">//合并</span></span><br><span class=\"line\">    <span class=\"comment\">//某些外观允许每个几何图形实例分别指定某个属性，例如：</span></span><br><span class=\"line\">    appearance : <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">PerInstanceColorAppearance</span>(&#123;translucent : <span class=\"literal\">false</span>,closed : <span class=\"literal\">true</span>&#125;)</span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n\n<p><strong>Appearance</strong><br>Cesium支持下列appearance</p>\n<table>\n<thead>\n<tr>\n<th><strong>外观</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>MaterialAppearance</td>\n<td>支持各种Geometry类型的外观，支持使用材质来定义着色。支持材料描述阴影。</td>\n</tr>\n<tr>\n<td>EllipsoidSurfaceAppearance</td>\n<td>MaterialAppearance的一个版本。假设几何图形与地表是平行的，并且依此来进行顶点属性（vertex attributes）的计算。和Material Appearance一样，就像一个多边形，并且使用这个假设来通过程序上计算许多顶点属性来节省内存。</td>\n</tr>\n<tr>\n<td>PerInstanceColorAppearance</td>\n<td>让每个实例使用自定义的颜色来着色，使用每个实例的颜色来遮蔽每个实例。</td>\n</tr>\n<tr>\n<td>PolylineMaterialAppearance</td>\n<td>支持使用材质来着色多段线。支持材料遮蔽Polyline</td>\n</tr>\n<tr>\n<td>PolylineColorAppearance</td>\n<td>使用每顶点或者每片段（per-vertex or per-segment ）的颜色来着色多段线—使用每顶点或每段着色来遮蔽折线</td>\n</tr>\n</tbody></table>\n<p>Appearance定义了需要在GPU上执行的GLSL着色器，这部分一般只有在自定义外观时需要修改。</p>\n<h3 id=\"2-2-管理\"><a href=\"#2-2-管理\" class=\"headerlink\" title=\"2.2.管理\"></a>2.2.管理</h3><h4 id=\"2-2-1-entity管理\"><a href=\"#2-2-1-entity管理\" class=\"headerlink\" title=\"2.2.1 entity管理\"></a>2.2.1 entity管理</h4><p>viewer.entities属性实际上是一个EntityCollection对象，是entity的一个集合，提供了add、remove、removeAll等等接口来管理场景中的entity。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/xBoEJyDrGZ9SMOU.png\" alt=\"null\"><br>Cesium.EntityCollection.collectionChangedEventCallback(collection,added, removed, changed)<br>add(entity) → Entity<br>computeAvailability() → TimeInterval<br>contains(entity) → Boolean<br>getById(id) → Entity<br>getOrCreateEntity(id) → Entity<br>remove(entity) → Boolean<br>removeAll()<br>removeById(id) → Boolean<br>resumeEvents()<br>suspendEvents()</p>\n<h4 id=\"2-2-2-primitive管理\"><a href=\"#2-2-2-primitive管理\" class=\"headerlink\" title=\"2.2.2 primitive管理\"></a>2.2.2 primitive管理</h4><p>场景通过viewer.scene.primitives属性来管理添加的primitive对象，primitives是PrimitiveCollection类型</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/kq5UdluSYBXApTe.png\" alt=\"null\"><br>提供了如下接口管理primitive对象：<br>add(primitive) → Object<br>contains(primitive) → Boolean<br>destroy() → undefined<br>get(index) → Object<br>isDestroyed() → Boolean<br>lower(primitive)<br>lowerToBottom(primitive)<br>raise(primitive)<br>raiseToTop(primitive)<br>remove(primitive) → Boolean<br>removeAll()</p>\n<h3 id=\"2-3-拾取选择\"><a href=\"#2-3-拾取选择\" class=\"headerlink\" title=\"2.3.拾取选择\"></a>2.3.拾取选择</h3><p>通常我们不光要绘制模型，还要跟场景进行交互，Cesium为我们提供了scene.pick接口进行拾取，具体介绍放到单独的鼠标事件一章中。</p>\n<h3 id=\"2-4-两者对比\"><a href=\"#2-4-两者对比\" class=\"headerlink\" title=\"2.4.两者对比\"></a>2.4.两者对比</h3><p>既然已经有了entity为什么还要在提供个primitive接口呢？？？entity调用方便，封装完美，什么时候要用primitive？？？<br>答案是性能问题，primitve更接近webGL的底层，加载效率更高，具体分析参考<br><a href=\"https://juejin.cn/post/6972420331982028837\">https://juejin.cn/post/6972420331982028837</a></p>\n"},{"title":"cesium坐标系转化","date":"2022-03-14T09:16:51.000Z","_content":"\n## 前言\n\n涉及到地图开发肯定离不开坐标系相关知识，关于国内的坐标系转换和常用坐标系自行查询资料。\n[地理坐标系](https://juejin.cn/post/6930539078488326152#heading-17)、[投影坐标系](https://juejin.cn/post/6940684126282317861)\n\nCesium中常用的坐标有两种：WGS84坐标和笛卡尔空间坐标，我们平时以经纬度来指向一个地点用的就是WGS84坐标，笛卡尔空间坐标则常用来做一些空间位置的变换，如平移、缩放等。\n\n## 坐标系转化\n\n### 经纬度和弧度的转化\n\n```json\nvar radians=Cesium.Math.toRadians（degrees）;//经纬度转弧度\nvar degrees=Cesium.Math.toDegrees（radians）;//弧度转经纬度\n```\n\n### WGS84经纬度坐标和WGS84弧度坐标系转化\n\n```json\n//方法一：\nvar longitude = Cesium.Math.toRadians(longitude1); //其中 longitude1为角度\nvar latitude= Cesium.Math.toRadians(latitude1); //其中 latitude1为角度\nvar cartographic = new Cesium.Cartographic(longitude, latitude, height)；\n\n//方法二：其中，longitude和latitude为经纬度\nvar cartographic= Cesium.Cartographic.fromDegrees(longitude, latitude, height);\n\n//方法三：其中，longitude和latitude为弧度\nvar cartographic= Cesium.Cartographic.fromRadians(longitude, latitude, height);\n```\n\n### WGS84坐标系和笛卡尔空间直角坐标系转化\n\n```json\nvar position = Cesium.Cartesian3.fromDegrees(longitude, latitude, height)；//其中，高度默认值为0，可以不用填写；longitude和latitude为经纬度\n\nvar positions = Cesium.Cartesian3.fromDegreesArray(coordinates);//其中，coordinates格式为不带高度的数组。例如：[-115.0, 37.0, -107.0, 33.0]\n\nvar positions = Cesium.Cartesian3.fromDegreesArrayHeights(coordinates);//coordinates格式为带有高度的数组。例如：[-115.0, 37.0, 100000.0, -107.0, 33.0, 150000.0]\n\n//同理，通过弧度转换，用法相同，具体有Cesium.Cartesian3.fromRadians，Cesium.Cartesian3.fromRadiansArray，Cesium.Cartesian3.fromRadiansArrayHeights等方法\n```\n\n### 笛卡尔空间直角坐标系转换WGS84转化\n\n```json\nvar cartographic= Cesium.Cartographic.fromCartesian(cartesian3)；\n```\n","source":"_posts/cesium坐标系转化.md","raw":"---\ntitle: cesium坐标系转化\ndate: 2022-03-14 17:16:51\ntags:\n    - webgl\n    - cesium\n---\n\n## 前言\n\n涉及到地图开发肯定离不开坐标系相关知识，关于国内的坐标系转换和常用坐标系自行查询资料。\n[地理坐标系](https://juejin.cn/post/6930539078488326152#heading-17)、[投影坐标系](https://juejin.cn/post/6940684126282317861)\n\nCesium中常用的坐标有两种：WGS84坐标和笛卡尔空间坐标，我们平时以经纬度来指向一个地点用的就是WGS84坐标，笛卡尔空间坐标则常用来做一些空间位置的变换，如平移、缩放等。\n\n## 坐标系转化\n\n### 经纬度和弧度的转化\n\n```json\nvar radians=Cesium.Math.toRadians（degrees）;//经纬度转弧度\nvar degrees=Cesium.Math.toDegrees（radians）;//弧度转经纬度\n```\n\n### WGS84经纬度坐标和WGS84弧度坐标系转化\n\n```json\n//方法一：\nvar longitude = Cesium.Math.toRadians(longitude1); //其中 longitude1为角度\nvar latitude= Cesium.Math.toRadians(latitude1); //其中 latitude1为角度\nvar cartographic = new Cesium.Cartographic(longitude, latitude, height)；\n\n//方法二：其中，longitude和latitude为经纬度\nvar cartographic= Cesium.Cartographic.fromDegrees(longitude, latitude, height);\n\n//方法三：其中，longitude和latitude为弧度\nvar cartographic= Cesium.Cartographic.fromRadians(longitude, latitude, height);\n```\n\n### WGS84坐标系和笛卡尔空间直角坐标系转化\n\n```json\nvar position = Cesium.Cartesian3.fromDegrees(longitude, latitude, height)；//其中，高度默认值为0，可以不用填写；longitude和latitude为经纬度\n\nvar positions = Cesium.Cartesian3.fromDegreesArray(coordinates);//其中，coordinates格式为不带高度的数组。例如：[-115.0, 37.0, -107.0, 33.0]\n\nvar positions = Cesium.Cartesian3.fromDegreesArrayHeights(coordinates);//coordinates格式为带有高度的数组。例如：[-115.0, 37.0, 100000.0, -107.0, 33.0, 150000.0]\n\n//同理，通过弧度转换，用法相同，具体有Cesium.Cartesian3.fromRadians，Cesium.Cartesian3.fromRadiansArray，Cesium.Cartesian3.fromRadiansArrayHeights等方法\n```\n\n### 笛卡尔空间直角坐标系转换WGS84转化\n\n```json\nvar cartographic= Cesium.Cartographic.fromCartesian(cartesian3)；\n```\n","slug":"cesium坐标系转化","published":1,"updated":"2024-01-15T07:33:45.299Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrq64z6h000csoipe28k15rr","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>涉及到地图开发肯定离不开坐标系相关知识，关于国内的坐标系转换和常用坐标系自行查询资料。<br><a href=\"https://juejin.cn/post/6930539078488326152#heading-17\">地理坐标系</a>、<a href=\"https://juejin.cn/post/6940684126282317861\">投影坐标系</a></p>\n<p>Cesium中常用的坐标有两种：WGS84坐标和笛卡尔空间坐标，我们平时以经纬度来指向一个地点用的就是WGS84坐标，笛卡尔空间坐标则常用来做一些空间位置的变换，如平移、缩放等。</p>\n<h2 id=\"坐标系转化\"><a href=\"#坐标系转化\" class=\"headerlink\" title=\"坐标系转化\"></a>坐标系转化</h2><h3 id=\"经纬度和弧度的转化\"><a href=\"#经纬度和弧度的转化\" class=\"headerlink\" title=\"经纬度和弧度的转化\"></a>经纬度和弧度的转化</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var radians=Cesium.Math.toRadians（degrees）;<span class=\"comment\">//经纬度转弧度</span></span><br><span class=\"line\">var degrees=Cesium.Math.toDegrees（radians）;<span class=\"comment\">//弧度转经纬度</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"WGS84经纬度坐标和WGS84弧度坐标系转化\"><a href=\"#WGS84经纬度坐标和WGS84弧度坐标系转化\" class=\"headerlink\" title=\"WGS84经纬度坐标和WGS84弧度坐标系转化\"></a>WGS84经纬度坐标和WGS84弧度坐标系转化</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//方法一：</span></span><br><span class=\"line\">var longitude = Cesium.Math.toRadians(longitude1); <span class=\"comment\">//其中 longitude1为角度</span></span><br><span class=\"line\">var latitude= Cesium.Math.toRadians(latitude1); <span class=\"comment\">//其中 latitude1为角度</span></span><br><span class=\"line\">var cartographic = new Cesium.Cartographic(longitude<span class=\"punctuation\">,</span> latitude<span class=\"punctuation\">,</span> height)；</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//方法二：其中，longitude和latitude为经纬度</span></span><br><span class=\"line\">var cartographic= Cesium.Cartographic.fromDegrees(longitude<span class=\"punctuation\">,</span> latitude<span class=\"punctuation\">,</span> height);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//方法三：其中，longitude和latitude为弧度</span></span><br><span class=\"line\">var cartographic= Cesium.Cartographic.fromRadians(longitude<span class=\"punctuation\">,</span> latitude<span class=\"punctuation\">,</span> height);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"WGS84坐标系和笛卡尔空间直角坐标系转化\"><a href=\"#WGS84坐标系和笛卡尔空间直角坐标系转化\" class=\"headerlink\" title=\"WGS84坐标系和笛卡尔空间直角坐标系转化\"></a>WGS84坐标系和笛卡尔空间直角坐标系转化</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var position = Cesium.Cartesian3.fromDegrees(longitude<span class=\"punctuation\">,</span> latitude<span class=\"punctuation\">,</span> height)；<span class=\"comment\">//其中，高度默认值为0，可以不用填写；longitude和latitude为经纬度</span></span><br><span class=\"line\"></span><br><span class=\"line\">var positions = Cesium.Cartesian3.fromDegreesArray(coordinates);<span class=\"comment\">//其中，coordinates格式为不带高度的数组。例如：[-115.0, 37.0, -107.0, 33.0]</span></span><br><span class=\"line\"></span><br><span class=\"line\">var positions = Cesium.Cartesian3.fromDegreesArrayHeights(coordinates);<span class=\"comment\">//coordinates格式为带有高度的数组。例如：[-115.0, 37.0, 100000.0, -107.0, 33.0, 150000.0]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//同理，通过弧度转换，用法相同，具体有Cesium.Cartesian3.fromRadians，Cesium.Cartesian3.fromRadiansArray，Cesium.Cartesian3.fromRadiansArrayHeights等方法</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"笛卡尔空间直角坐标系转换WGS84转化\"><a href=\"#笛卡尔空间直角坐标系转换WGS84转化\" class=\"headerlink\" title=\"笛卡尔空间直角坐标系转换WGS84转化\"></a>笛卡尔空间直角坐标系转换WGS84转化</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var cartographic= Cesium.Cartographic.fromCartesian(cartesian3)；</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":378,"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>涉及到地图开发肯定离不开坐标系相关知识，关于国内的坐标系转换和常用坐标系自行查询资料。<br><a href=\"https://juejin.cn/post/6930539078488326152#heading-17\">地理坐标系</a>、<a href=\"https://juejin.cn/post/6940684126282317861\">投影坐标系</a></p>\n<p>Cesium中常用的坐标有两种：WGS84坐标和笛卡尔空间坐标，我们平时以经纬度来指向一个地点用的就是WGS84坐标，笛卡尔空间坐标则常用来做一些空间位置的变换，如平移、缩放等。</p>\n<h2 id=\"坐标系转化\"><a href=\"#坐标系转化\" class=\"headerlink\" title=\"坐标系转化\"></a>坐标系转化</h2><h3 id=\"经纬度和弧度的转化\"><a href=\"#经纬度和弧度的转化\" class=\"headerlink\" title=\"经纬度和弧度的转化\"></a>经纬度和弧度的转化</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var radians=Cesium.Math.toRadians（degrees）;<span class=\"comment\">//经纬度转弧度</span></span><br><span class=\"line\">var degrees=Cesium.Math.toDegrees（radians）;<span class=\"comment\">//弧度转经纬度</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"WGS84经纬度坐标和WGS84弧度坐标系转化\"><a href=\"#WGS84经纬度坐标和WGS84弧度坐标系转化\" class=\"headerlink\" title=\"WGS84经纬度坐标和WGS84弧度坐标系转化\"></a>WGS84经纬度坐标和WGS84弧度坐标系转化</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//方法一：</span></span><br><span class=\"line\">var longitude = Cesium.Math.toRadians(longitude1); <span class=\"comment\">//其中 longitude1为角度</span></span><br><span class=\"line\">var latitude= Cesium.Math.toRadians(latitude1); <span class=\"comment\">//其中 latitude1为角度</span></span><br><span class=\"line\">var cartographic = new Cesium.Cartographic(longitude<span class=\"punctuation\">,</span> latitude<span class=\"punctuation\">,</span> height)；</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//方法二：其中，longitude和latitude为经纬度</span></span><br><span class=\"line\">var cartographic= Cesium.Cartographic.fromDegrees(longitude<span class=\"punctuation\">,</span> latitude<span class=\"punctuation\">,</span> height);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//方法三：其中，longitude和latitude为弧度</span></span><br><span class=\"line\">var cartographic= Cesium.Cartographic.fromRadians(longitude<span class=\"punctuation\">,</span> latitude<span class=\"punctuation\">,</span> height);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"WGS84坐标系和笛卡尔空间直角坐标系转化\"><a href=\"#WGS84坐标系和笛卡尔空间直角坐标系转化\" class=\"headerlink\" title=\"WGS84坐标系和笛卡尔空间直角坐标系转化\"></a>WGS84坐标系和笛卡尔空间直角坐标系转化</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var position = Cesium.Cartesian3.fromDegrees(longitude<span class=\"punctuation\">,</span> latitude<span class=\"punctuation\">,</span> height)；<span class=\"comment\">//其中，高度默认值为0，可以不用填写；longitude和latitude为经纬度</span></span><br><span class=\"line\"></span><br><span class=\"line\">var positions = Cesium.Cartesian3.fromDegreesArray(coordinates);<span class=\"comment\">//其中，coordinates格式为不带高度的数组。例如：[-115.0, 37.0, -107.0, 33.0]</span></span><br><span class=\"line\"></span><br><span class=\"line\">var positions = Cesium.Cartesian3.fromDegreesArrayHeights(coordinates);<span class=\"comment\">//coordinates格式为带有高度的数组。例如：[-115.0, 37.0, 100000.0, -107.0, 33.0, 150000.0]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//同理，通过弧度转换，用法相同，具体有Cesium.Cartesian3.fromRadians，Cesium.Cartesian3.fromRadiansArray，Cesium.Cartesian3.fromRadiansArrayHeights等方法</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"笛卡尔空间直角坐标系转换WGS84转化\"><a href=\"#笛卡尔空间直角坐标系转换WGS84转化\" class=\"headerlink\" title=\"笛卡尔空间直角坐标系转换WGS84转化\"></a>笛卡尔空间直角坐标系转换WGS84转化</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var cartographic= Cesium.Cartographic.fromCartesian(cartesian3)；</span><br></pre></td></tr></table></figure>\n"},{"title":"cesium鼠标交互事件","date":"2022-03-08T09:31:33.000Z","_content":"\n## 前言\n\n前面几章我们学过了影像加载、地形加载、模型加载，基于这些已经可以构建一个基本的三维场景，但是光有场景肯定不行，还需要跟场景交互操作，这就轮到鼠标事件出场了，下面是鼠标事件的具体介绍。\n\n## 基础\n\n刚开始查看文档居然没找到鼠标事件，后来查找示例才发现Cesium中鼠标事件是依赖于ScreenSpaceEventHandler对象。\n\n![null](https://s2.loli.net/2024/01/08/iIYfqZ3TtvlALw7.png)\n\n![null](https://s2.loli.net/2024/01/08/lJ7T4a5zmhVAOKZ.png)\nScreenSpaceEventHandler可以监听用户输入事件，所以我们可以设置element为cesium的父容器canvas来实现监听整个页面的效果。\n\n![null](https://s2.loli.net/2024/01/08/mJNUx2FvXLC1O5l.png)\nsetInputAction可以响应用户的操作，其中第二个参数就是事件类型，查看文档可以发现所有鼠标事件都支持。\n\n![null](https://s2.loli.net/2024/01/08/jAuY3xK41VFyJhr.png)\n第三个参数是CTRL、ALT、SHIFT键盘修饰符。\nOK，以上就是鼠标事件的基本内容，下面就可以实现具体逻辑了。\n\n```javascript\n/**\n * 默认鼠标左键点击事件\n */\nconst clickHandler = viewer.screenSpaceEventHandler.getInputAction(\n  Cesium.ScreenSpaceEventType.LEFT_CLICK\n);\n// 监听canvas\nconst handler = new Cesium.ScreenSpaceEventHandler(viewer.scene.canvas);\n\nhandler.setInputAction(function (movement) {\n  // scene.pick 鼠标选择事件\n  const feature =\n    viewer.scene.pick(movement.position) &&\n    viewer.scene.pick(movement.position).id;\n  // 选中对象在cesium中未定义\n  if (!Cesium.defined(feature)) {\n    clickHandler(movement);\n    return;  \n  }\n  let entities = [x, y, z];\n  // 选择模型高亮\n  for (let i = 0; i < entities.length; i++) {\n    let entity = entities[i];\n    entity.polygon.material.color.setValue(that.colorHash[entity.name]);\n  }\n  feature.polygon.material.color.setValue(Cesium.Color.BLUE);\n}, Cesium.ScreenSpaceEventType.LEFT_CLICK);\n```\n\n上面代码实现一个简单的点击选择高亮的逻辑，其他鼠标事件都可以照猫画虎实现，没什么难点主要还是响应事件的逻辑不同。\n\n![null](https://s2.loli.net/2024/01/08/2E8pkATuFY3idjH.png)\n","source":"_posts/cesium鼠标交互事件.md","raw":"---\ntitle: cesium鼠标交互事件\ndate: 2022-03-08 17:31:33\ntags:\n    - webgl\n    - cesium\n---\n\n## 前言\n\n前面几章我们学过了影像加载、地形加载、模型加载，基于这些已经可以构建一个基本的三维场景，但是光有场景肯定不行，还需要跟场景交互操作，这就轮到鼠标事件出场了，下面是鼠标事件的具体介绍。\n\n## 基础\n\n刚开始查看文档居然没找到鼠标事件，后来查找示例才发现Cesium中鼠标事件是依赖于ScreenSpaceEventHandler对象。\n\n![null](https://s2.loli.net/2024/01/08/iIYfqZ3TtvlALw7.png)\n\n![null](https://s2.loli.net/2024/01/08/lJ7T4a5zmhVAOKZ.png)\nScreenSpaceEventHandler可以监听用户输入事件，所以我们可以设置element为cesium的父容器canvas来实现监听整个页面的效果。\n\n![null](https://s2.loli.net/2024/01/08/mJNUx2FvXLC1O5l.png)\nsetInputAction可以响应用户的操作，其中第二个参数就是事件类型，查看文档可以发现所有鼠标事件都支持。\n\n![null](https://s2.loli.net/2024/01/08/jAuY3xK41VFyJhr.png)\n第三个参数是CTRL、ALT、SHIFT键盘修饰符。\nOK，以上就是鼠标事件的基本内容，下面就可以实现具体逻辑了。\n\n```javascript\n/**\n * 默认鼠标左键点击事件\n */\nconst clickHandler = viewer.screenSpaceEventHandler.getInputAction(\n  Cesium.ScreenSpaceEventType.LEFT_CLICK\n);\n// 监听canvas\nconst handler = new Cesium.ScreenSpaceEventHandler(viewer.scene.canvas);\n\nhandler.setInputAction(function (movement) {\n  // scene.pick 鼠标选择事件\n  const feature =\n    viewer.scene.pick(movement.position) &&\n    viewer.scene.pick(movement.position).id;\n  // 选中对象在cesium中未定义\n  if (!Cesium.defined(feature)) {\n    clickHandler(movement);\n    return;  \n  }\n  let entities = [x, y, z];\n  // 选择模型高亮\n  for (let i = 0; i < entities.length; i++) {\n    let entity = entities[i];\n    entity.polygon.material.color.setValue(that.colorHash[entity.name]);\n  }\n  feature.polygon.material.color.setValue(Cesium.Color.BLUE);\n}, Cesium.ScreenSpaceEventType.LEFT_CLICK);\n```\n\n上面代码实现一个简单的点击选择高亮的逻辑，其他鼠标事件都可以照猫画虎实现，没什么难点主要还是响应事件的逻辑不同。\n\n![null](https://s2.loli.net/2024/01/08/2E8pkATuFY3idjH.png)\n","slug":"cesium鼠标交互事件","published":1,"updated":"2024-01-15T07:33:49.939Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrq64z6i000fsoip5cw1372x","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>前面几章我们学过了影像加载、地形加载、模型加载，基于这些已经可以构建一个基本的三维场景，但是光有场景肯定不行，还需要跟场景交互操作，这就轮到鼠标事件出场了，下面是鼠标事件的具体介绍。</p>\n<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><p>刚开始查看文档居然没找到鼠标事件，后来查找示例才发现Cesium中鼠标事件是依赖于ScreenSpaceEventHandler对象。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/iIYfqZ3TtvlALw7.png\" alt=\"null\"></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/lJ7T4a5zmhVAOKZ.png\" alt=\"null\"><br>ScreenSpaceEventHandler可以监听用户输入事件，所以我们可以设置element为cesium的父容器canvas来实现监听整个页面的效果。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/mJNUx2FvXLC1O5l.png\" alt=\"null\"><br>setInputAction可以响应用户的操作，其中第二个参数就是事件类型，查看文档可以发现所有鼠标事件都支持。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/jAuY3xK41VFyJhr.png\" alt=\"null\"><br>第三个参数是CTRL、ALT、SHIFT键盘修饰符。<br>OK，以上就是鼠标事件的基本内容，下面就可以实现具体逻辑了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 默认鼠标左键点击事件</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> clickHandler = viewer.<span class=\"property\">screenSpaceEventHandler</span>.<span class=\"title function_\">getInputAction</span>(</span><br><span class=\"line\">  <span class=\"title class_\">Cesium</span>.<span class=\"property\">ScreenSpaceEventType</span>.<span class=\"property\">LEFT_CLICK</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">// 监听canvas</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> handler = <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">ScreenSpaceEventHandler</span>(viewer.<span class=\"property\">scene</span>.<span class=\"property\">canvas</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">handler.<span class=\"title function_\">setInputAction</span>(<span class=\"keyword\">function</span> (<span class=\"params\">movement</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// scene.pick 鼠标选择事件</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> feature =</span><br><span class=\"line\">    viewer.<span class=\"property\">scene</span>.<span class=\"title function_\">pick</span>(movement.<span class=\"property\">position</span>) &amp;&amp;</span><br><span class=\"line\">    viewer.<span class=\"property\">scene</span>.<span class=\"title function_\">pick</span>(movement.<span class=\"property\">position</span>).<span class=\"property\">id</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 选中对象在cesium中未定义</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"title class_\">Cesium</span>.<span class=\"title function_\">defined</span>(feature)) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">clickHandler</span>(movement);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> entities = [x, y, z];</span><br><span class=\"line\">  <span class=\"comment\">// 选择模型高亮</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; entities.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> entity = entities[i];</span><br><span class=\"line\">    entity.<span class=\"property\">polygon</span>.<span class=\"property\">material</span>.<span class=\"property\">color</span>.<span class=\"title function_\">setValue</span>(that.<span class=\"property\">colorHash</span>[entity.<span class=\"property\">name</span>]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  feature.<span class=\"property\">polygon</span>.<span class=\"property\">material</span>.<span class=\"property\">color</span>.<span class=\"title function_\">setValue</span>(<span class=\"title class_\">Cesium</span>.<span class=\"property\">Color</span>.<span class=\"property\">BLUE</span>);</span><br><span class=\"line\">&#125;, <span class=\"title class_\">Cesium</span>.<span class=\"property\">ScreenSpaceEventType</span>.<span class=\"property\">LEFT_CLICK</span>);</span><br></pre></td></tr></table></figure>\n\n<p>上面代码实现一个简单的点击选择高亮的逻辑，其他鼠标事件都可以照猫画虎实现，没什么难点主要还是响应事件的逻辑不同。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/2E8pkATuFY3idjH.png\" alt=\"null\"></p>\n","site":{"data":{}},"length":386,"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>前面几章我们学过了影像加载、地形加载、模型加载，基于这些已经可以构建一个基本的三维场景，但是光有场景肯定不行，还需要跟场景交互操作，这就轮到鼠标事件出场了，下面是鼠标事件的具体介绍。</p>\n<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><p>刚开始查看文档居然没找到鼠标事件，后来查找示例才发现Cesium中鼠标事件是依赖于ScreenSpaceEventHandler对象。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/iIYfqZ3TtvlALw7.png\" alt=\"null\"></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/lJ7T4a5zmhVAOKZ.png\" alt=\"null\"><br>ScreenSpaceEventHandler可以监听用户输入事件，所以我们可以设置element为cesium的父容器canvas来实现监听整个页面的效果。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/mJNUx2FvXLC1O5l.png\" alt=\"null\"><br>setInputAction可以响应用户的操作，其中第二个参数就是事件类型，查看文档可以发现所有鼠标事件都支持。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/jAuY3xK41VFyJhr.png\" alt=\"null\"><br>第三个参数是CTRL、ALT、SHIFT键盘修饰符。<br>OK，以上就是鼠标事件的基本内容，下面就可以实现具体逻辑了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 默认鼠标左键点击事件</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> clickHandler = viewer.<span class=\"property\">screenSpaceEventHandler</span>.<span class=\"title function_\">getInputAction</span>(</span><br><span class=\"line\">  <span class=\"title class_\">Cesium</span>.<span class=\"property\">ScreenSpaceEventType</span>.<span class=\"property\">LEFT_CLICK</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">// 监听canvas</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> handler = <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">ScreenSpaceEventHandler</span>(viewer.<span class=\"property\">scene</span>.<span class=\"property\">canvas</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">handler.<span class=\"title function_\">setInputAction</span>(<span class=\"keyword\">function</span> (<span class=\"params\">movement</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// scene.pick 鼠标选择事件</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> feature =</span><br><span class=\"line\">    viewer.<span class=\"property\">scene</span>.<span class=\"title function_\">pick</span>(movement.<span class=\"property\">position</span>) &amp;&amp;</span><br><span class=\"line\">    viewer.<span class=\"property\">scene</span>.<span class=\"title function_\">pick</span>(movement.<span class=\"property\">position</span>).<span class=\"property\">id</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 选中对象在cesium中未定义</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"title class_\">Cesium</span>.<span class=\"title function_\">defined</span>(feature)) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">clickHandler</span>(movement);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> entities = [x, y, z];</span><br><span class=\"line\">  <span class=\"comment\">// 选择模型高亮</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; entities.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> entity = entities[i];</span><br><span class=\"line\">    entity.<span class=\"property\">polygon</span>.<span class=\"property\">material</span>.<span class=\"property\">color</span>.<span class=\"title function_\">setValue</span>(that.<span class=\"property\">colorHash</span>[entity.<span class=\"property\">name</span>]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  feature.<span class=\"property\">polygon</span>.<span class=\"property\">material</span>.<span class=\"property\">color</span>.<span class=\"title function_\">setValue</span>(<span class=\"title class_\">Cesium</span>.<span class=\"property\">Color</span>.<span class=\"property\">BLUE</span>);</span><br><span class=\"line\">&#125;, <span class=\"title class_\">Cesium</span>.<span class=\"property\">ScreenSpaceEventType</span>.<span class=\"property\">LEFT_CLICK</span>);</span><br></pre></td></tr></table></figure>\n\n<p>上面代码实现一个简单的点击选择高亮的逻辑，其他鼠标事件都可以照猫画虎实现，没什么难点主要还是响应事件的逻辑不同。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/2E8pkATuFY3idjH.png\" alt=\"null\"></p>\n"},{"title":"cordova开发环境搭建","date":"2019-07-27T06:33:48.000Z","_content":"\n工作中接触过几次混合 APP 开发，所以将一些用得到的内容记录下来，乙方遗忘。\n\n# hybrid 简易开发环境搭建\n\n## 软件安装\n\n### JDK\n\n[Java SE Downloads](http://www.oracle.com/technetwork/java/javase/downloads/index.html)\n\n#### 环境变量\n\nJDK\n\n```\nJAVA_HOME\nD:\\Program Files\\Java\\jdk1.8.0_172\nPATH\n%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;\nCLASSPATH\n.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;\n```\n\n### Android Studio\n\n[Download Android Studio](https://developer.android.google.cn/studio/)\n\n[安装 Android Studio](https://developer.android.com/studio/install?hl=zh-cn)\n\n#### 配置代理\n\n安装过程中弹出配置代理的提示框\n选择手动配置代理\n安装过程中的提示框配置，与下图(下图为安装完成后 File->Settings 的截图)，类似\n\n![2018-07-06-10-08-14](https://s2.loli.net/2024/01/08/owZVFf8Herh1s6T.png)\n\n**Android Studio 在构建应用的过程中需要下载 SDK, Gradle, build tools 等等**\n\n#### 环境变量\n\n![2018-07-06-10-26-01](https://s2.loli.net/2024/01/08/NOKYvXAz7tb218i.png)\n\n![2018-07-06-10-26-44](https://s2.loli.net/2024/01/08/21IhpnBut8HWAGo.png)\n\nAndroid\n\n```\nANDROID_HOME\nC:\\Users\\Administrator\\AppData\\Local\\Android\\Sdk\nPATH\n%ANDROID_HOME%\\tools;%ANDROID_HOME%\\tools\\bin;%ANDROID_HOME%\\platform-tools;\n```\n\nGradle\n\n```\nGRADLE_HOME\nD:\\Program Files\\Android\\Android Studio\\gradle\\gradle-4.4\nPATH\n%GRADLE_HOME%\\bin;\n```\n\n### Genymotion\n\n[Genymotion Desktop](https://www.genymotion.com/desktop/)\n\n个人版\n\nhttps://www.genymotion.com/fun-zone/\n\n完整版\n\nhttps://www.genymotion.com/get-full-version/\n\n上面都是下载的同一个安装文件\n\n![2018-07-11-16-20-31](https://s2.loli.net/2024/01/08/JioAtjVNkygaRFM.png)\n\n下载个人版\n\n![2018-07-11-16-28-00](https://s2.loli.net/2024/01/08/WCuVLpgrDFOUE53.png)\n\n前面 virtual box 已经单独安装过了\n\n所以选择不带 virtualbox 的\n\n![2018-07-11-16-33-24](https://s2.loli.net/2024/01/08/qaCjYtoMSvBAnr1.png)\n\n可以 personal use\n\n但是 Add 模拟器的时候需要登陆![2018-07-11-16-36-05](https://s2.loli.net/2024/01/08/mKWc3e7ZagFGpqd.png)\n\n\n\n创建完模拟器后可以 退出账号，不影响一般使用\n\n![2018-07-11-16-40-45](https://s2.loli.net/2024/01/08/6DR7aAOYenzmHFf.png)\n\n没有登陆的情况下，选择 Personal use，模拟器底部会又这个水印\n\n登陆的情况下，账号的试用期超过 30 天就用不了吧。\n\n#### 在 Genymotion 中配置使用 Android Studio 的 tools\n\n![2018-07-06-11-00-39](https://s2.loli.net/2024/01/08/afHYZNqBmQKFUGO.png)\n\n#### 在 Android Studio 中配置 Genymotion\n\n安装 Genymotion 的插件\n\n![2018-07-06-10-20-38](https://s2.loli.net/2024/01/08/mAU1jqLhgEDrwzT.png)\n\n指定 Genymotion 的安装目录\n\n![2018-07-06-10-21-22](E:\\demo\\blog\\source\\_posts\\cordova开发环境搭建\\2018-07-06-10-21-22.png)\n\n#### 配置代理\n\n![2018-07-06-10-23-44](https://s2.loli.net/2024/01/08/OjBRycZMAlu5iqT.png)\n\n#### 新建模拟器\n\n![2018-07-06-10-35-47](https://s2.loli.net/2024/01/08/HYukVGnA6JK3yDP.png)\n\n\n\n![2018-07-06-10-36-51](https://s2.loli.net/2024/01/08/AULBmcHTYJMFDal.png)\n\n#### 在 Android Studio 中新建项目\n\n新建项目\n\n![2018-07-06-10-39-13](https://s2.loli.net/2024/01/08/vJCDybTpPUF71tm.png)\n\n指定包名\n\n![2018-07-06-10-40-34](https://s2.loli.net/2024/01/08/eoJ4uLBpMIYK75q.png)\n\n目标 API 版本\n\n![2018-07-06-10-41-46](https://s2.loli.net/2024/01/08/VbksDL8UepugK6M.png)\n\n添加一个 Activity\n\n![2018-07-06-10-43-08](https://s2.loli.net/2024/01/08/qhF8M73zwJVfUCA.png)\n![2018-07-06-10-43-21](https://s2.loli.net/2024/01/08/uhoxj82aqRW5tzQ.png)\n\n新建项目完成\n\n![2018-07-06-10-45-08](https://s2.loli.net/2024/01/08/wlu9fG3rBc4p8Ot.png)\n\n运行\n\n![2018-07-06-10-45-54](https://s2.loli.net/2024/01/08/V3zxQhH6YPfUs2d.png)\n![2018-07-06-10-49-52](https://s2.loli.net/2024/01/08/iMzFCusQaX8lNtK.png)\n![2018-07-06-10-50-05](https://s2.loli.net/2024/01/08/3g2OQHVdbZ6Dpxo.png)\n\n修改\n\n![2018-07-06-10-49-31](https://s2.loli.net/2024/01/08/eI3B7RGc2TYJpaC.png)\n![2018-07-06-10-51-43](https://s2.loli.net/2024/01/08/AnyVHgmv6QRbtDe.png)\n![2018-07-06-10-51-51](https://s2.loli.net/2024/01/08/6rMQXmhRkFNJfxI.png)\n\n### nodejs\n\nhttps://nodejs.org/zh-cn/\n\n#### 配置国内镜像源\n\n```bash\nnode -v\nnpm config -g set registry \"https://registry.npm.taobao.org\"\nnpm config list -g\n```\n\n![2018-07-06-11-10-58](https://s2.loli.net/2024/01/08/z12lE5VSvJ4Rqte.png)\n\n### Cordova\n\nhttps://cordova.apache.org/#getstarted\n\n```bash\nnpm i -g cordova\n```\n\n#### 新建项目\n\n```bash\ncordova create RunningMan\ncd RunningMan\ncordova platform add android\ncordova platform ls\ncordova run android\n```\n\nGenymotion 的模拟器正在运行的情况下，Cordova 会把打包好的 apk push 过去\n\n![2018-07-06-14-28-50](https://s2.loli.net/2024/01/08/mH8jvGZDASqnpi6.png)\n\n#### 打包例子 [vue-tetris](https://github.com/Binaryify/vue-tetris/)\n\n把 vue-tetris 项目 clone 到本机，修改配置，安装依赖，build\n\n![2018-07-06-11-52-35](https://s2.loli.net/2024/01/08/BqZPEAQle3DKIM6.png)\n\n修改 `config/index.js => build => assetsPublicPath`\n\n```javascript\nassetsPublicPath: './',\n```\n\n![2018-07-06-11-49-12](https://s2.loli.net/2024/01/08/uObgAihdLNM4scT.png)\n\n把`npm run build` 生成的 dist 目录下的文件全部复制到 Cordova 项目的 www 文件下\n在 Cordova 项目下运行 `cordova run android`\n发现 Genymotion 模拟器中运行了，但一直是加载的画面\n\n浏览器中连接 Android\n`chrome://inspect/#devices`![2018-07-06-13-37-46](https://s2.loli.net/2024/01/08/rIOivUcMowEnLsJ.png)\n\n\nconsole 报错 `navigator.languages.find is not a function`\n\n搜索后定位到 `src/unit/const.js`\n\n![2018-07-06-11-48-14](https://s2.loli.net/2024/01/08/Cq8wiQpFZs4BGfd.png)\n\n修改源码后重新 `npm run build`\n把生成的 dist 目录下的文件全部复制到 Cordova 项目的 www 文件下\n在 Cordova 项目下运行 `cordova run android`\n\n![2018-07-06-13-39-15](https://s2.loli.net/2024/01/08/pBozc1RVLYKvkng.png)\n\n#### 打包例子 [Vux](\"https://doc.vux.li/zh-CN/install/biolerplate.html\")\n\n```bash\nnpm install vue-cli -g # 如果还没安装\nvue init airyland/vux2 projectPath\n\ncd projectPath\nnpm i # 安装依赖 或者 yarn\nnpm run dev # 或者 yarn dev\nnpm run build # 或者 yarn build\n```\n\n```bash\n#  不使用 yarn 可以忽略\nnpm i -g yarn\nyarn config set registry https://registry.npm.taobao.org\n```\n\n修改 `config/index.js => build => assetsPublicPath`\n\n```javascript\nassetsPublicPath: './',\n```\n\n把生成的 dist 目录下的文件全部复制到 Cordova 项目的 www 文件下\n在 Cordova 项目下运行 `cordova run android`\n\n![2018-07-06-14-08-30](https://s2.loli.net/2024/01/08/HuMT8YfaLWEorGO.png)\n\n#### Camera\n\n[cordova-plugin-camera](https://cordova.apache.org/docs/en/latest/reference/cordova-plugin-camera/index.html)\n\n```bash\ncd cordova8\ncordova plugin add cordova-plugin-camera\ncordova plugin ls\n```\n\n[Cordova 结合 Vue 学习 Camera](https://www.jianshu.com/p/2370548b25ab)\n\n![indexhtmladdcordovajs](https://s2.loli.net/2024/01/08/oQP1UKHWrfI8lGd.png)\n![indexhtmladdcordova](https://s2.loli.net/2024/01/08/T6oPp5eACMhOnc1.png)\n\n>     别忘了在cordova项目下添加camera插件\n>     vuejs工程build出来的dist/index.html里面加上cordova.js\n>     否则调用不到相机插件\n>     看看那个cordova framework7 的模板build出来的dist/index.html是不是被模板自动加上了cordova.js\n\n---\n\n### Android APK 手动打包流程\n\nAndroid app 的打包流程大致分为 **build** ,**sign** , **align** 三部分。\n\n**build** 是构建 APK 的过程，分为 debug 和 release 两种。release 是发布到应用商店的版本。\n\n**sign** 是为 APK 签名。不管是哪一种 APK 都必须经过数字签名后才能安装到设备上，签名需要对应的证书（keystore），大部分情况下 APK 都采用的自签名证书，就是自己生成证书然后给应用签名。\n\n**align** 是压缩和优化的步骤，优化后会减少 app 运行时的内存开销。\n\nCordova 作为 hybrid app 的框架不像纯 Android 开发那么自动化，所以第一次打 release 包我们需要了解一下手动打包的过程。\n\n#### Build\n\n首先，我们生成一个 release APK 。这点在 cordova build 命令后加一个 --release 参数局可以。如果成功，你可以在 android 的 apk 目录下看到一个 android-release-unsigned.apk 文件。\n\n```bash\ncordova build android --release\n```\n\n#### Sign\n\n我们需要先生成一个数字签名文件（keystore）。这个文件只需要生成一次。以后每次 sign 都用它。\n\n```bash\nkeytool -genkey -v -keystore release-key.keystore -alias cordova-demo -keyalg RSA -keysize 2048 -validity 10000\n```\n\n上面的命令意思是，生成一个 release-key.keystore 的文件，别名（alias）为 cordova-demo 。\n过程中会要求设置 keystore 的密码和 key 的密码。我们分别设置为 testing 和 testing2。这四个属性要记牢，下一步有用。\n\n然后我们就可以用下面的命令对 APK 签名了\n\n```bash\njarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore release-key.keystore android-apk/android-release-unsigned.apk cordova-demo\n```\n\n这个命令中需要传入证书名 release-key.keystore，要签名的 APK android-release-unsigned.apk，和别名 cordova-demo。签名过程中需要先后输入 keystore 和 key 的密码。命令运行完后，这个 APK 就已经改变了。注意这个过程没有生成新文件。\n\n#### Align\n\n最后我们要用 zipalign 压缩和优化 APK\n\n```bash\nzipalign -v 4 android-apk/android-release-unsigned.apk android-apk/cordova-demo.apk\n```\n\n这一步会生成最终的 APK，我们把它命名为 cordova-demo.apk 。它就是可以直接上传到应用商店的版本。\n\n### 自动打包\n\n一旦有了 keystore 文件，下次打包就可以很快了。你可以在 cordova build 中指定所有参数来快速打包。这会直接生成一个 android-release.apk 给你。\n\n```bash\ncordova build android --release -- --keystore=\"release-key.keystore\" --alias=cordova-demo --storePassword=testing --password=testing2\n```\n\n但每次输入命令行参数是很重复的，Cordova 允许我们建立一个 build.json 配置文件来简化操作。文件内容如下\n\n```bash\n{\n  \"android\": {\n    \"release\": {\n      \"keystore\": \"release-key.keystore\",\n      \"alias\": \"cordova-demo\",\n      \"storePassword\": \"testing\",\n      \"password\": \"testing2\"\n    }\n  }\n}\n```\n\n下次就可以直接用 cordova build --release 了。\n\n为了安全性考虑，建议不要把密码放在在配置文件或者命令行中，而是手动输入。你可以把密码相关的配置去掉，下次 build 过程中会弹出一个 Java 小窗口，提示你输入密码。\n\n好了，到这里，cordova 的环境配置打包发布一整套流程全部讲完了。\n","source":"_posts/cordova开发环境搭建.md","raw":"---\ntitle: cordova开发环境搭建\ndate: 2019-07-27 14:33:48\ntags:\n  - app\n  - web\n  - cordova\n---\n\n工作中接触过几次混合 APP 开发，所以将一些用得到的内容记录下来，乙方遗忘。\n\n# hybrid 简易开发环境搭建\n\n## 软件安装\n\n### JDK\n\n[Java SE Downloads](http://www.oracle.com/technetwork/java/javase/downloads/index.html)\n\n#### 环境变量\n\nJDK\n\n```\nJAVA_HOME\nD:\\Program Files\\Java\\jdk1.8.0_172\nPATH\n%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;\nCLASSPATH\n.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;\n```\n\n### Android Studio\n\n[Download Android Studio](https://developer.android.google.cn/studio/)\n\n[安装 Android Studio](https://developer.android.com/studio/install?hl=zh-cn)\n\n#### 配置代理\n\n安装过程中弹出配置代理的提示框\n选择手动配置代理\n安装过程中的提示框配置，与下图(下图为安装完成后 File->Settings 的截图)，类似\n\n![2018-07-06-10-08-14](https://s2.loli.net/2024/01/08/owZVFf8Herh1s6T.png)\n\n**Android Studio 在构建应用的过程中需要下载 SDK, Gradle, build tools 等等**\n\n#### 环境变量\n\n![2018-07-06-10-26-01](https://s2.loli.net/2024/01/08/NOKYvXAz7tb218i.png)\n\n![2018-07-06-10-26-44](https://s2.loli.net/2024/01/08/21IhpnBut8HWAGo.png)\n\nAndroid\n\n```\nANDROID_HOME\nC:\\Users\\Administrator\\AppData\\Local\\Android\\Sdk\nPATH\n%ANDROID_HOME%\\tools;%ANDROID_HOME%\\tools\\bin;%ANDROID_HOME%\\platform-tools;\n```\n\nGradle\n\n```\nGRADLE_HOME\nD:\\Program Files\\Android\\Android Studio\\gradle\\gradle-4.4\nPATH\n%GRADLE_HOME%\\bin;\n```\n\n### Genymotion\n\n[Genymotion Desktop](https://www.genymotion.com/desktop/)\n\n个人版\n\nhttps://www.genymotion.com/fun-zone/\n\n完整版\n\nhttps://www.genymotion.com/get-full-version/\n\n上面都是下载的同一个安装文件\n\n![2018-07-11-16-20-31](https://s2.loli.net/2024/01/08/JioAtjVNkygaRFM.png)\n\n下载个人版\n\n![2018-07-11-16-28-00](https://s2.loli.net/2024/01/08/WCuVLpgrDFOUE53.png)\n\n前面 virtual box 已经单独安装过了\n\n所以选择不带 virtualbox 的\n\n![2018-07-11-16-33-24](https://s2.loli.net/2024/01/08/qaCjYtoMSvBAnr1.png)\n\n可以 personal use\n\n但是 Add 模拟器的时候需要登陆![2018-07-11-16-36-05](https://s2.loli.net/2024/01/08/mKWc3e7ZagFGpqd.png)\n\n\n\n创建完模拟器后可以 退出账号，不影响一般使用\n\n![2018-07-11-16-40-45](https://s2.loli.net/2024/01/08/6DR7aAOYenzmHFf.png)\n\n没有登陆的情况下，选择 Personal use，模拟器底部会又这个水印\n\n登陆的情况下，账号的试用期超过 30 天就用不了吧。\n\n#### 在 Genymotion 中配置使用 Android Studio 的 tools\n\n![2018-07-06-11-00-39](https://s2.loli.net/2024/01/08/afHYZNqBmQKFUGO.png)\n\n#### 在 Android Studio 中配置 Genymotion\n\n安装 Genymotion 的插件\n\n![2018-07-06-10-20-38](https://s2.loli.net/2024/01/08/mAU1jqLhgEDrwzT.png)\n\n指定 Genymotion 的安装目录\n\n![2018-07-06-10-21-22](E:\\demo\\blog\\source\\_posts\\cordova开发环境搭建\\2018-07-06-10-21-22.png)\n\n#### 配置代理\n\n![2018-07-06-10-23-44](https://s2.loli.net/2024/01/08/OjBRycZMAlu5iqT.png)\n\n#### 新建模拟器\n\n![2018-07-06-10-35-47](https://s2.loli.net/2024/01/08/HYukVGnA6JK3yDP.png)\n\n\n\n![2018-07-06-10-36-51](https://s2.loli.net/2024/01/08/AULBmcHTYJMFDal.png)\n\n#### 在 Android Studio 中新建项目\n\n新建项目\n\n![2018-07-06-10-39-13](https://s2.loli.net/2024/01/08/vJCDybTpPUF71tm.png)\n\n指定包名\n\n![2018-07-06-10-40-34](https://s2.loli.net/2024/01/08/eoJ4uLBpMIYK75q.png)\n\n目标 API 版本\n\n![2018-07-06-10-41-46](https://s2.loli.net/2024/01/08/VbksDL8UepugK6M.png)\n\n添加一个 Activity\n\n![2018-07-06-10-43-08](https://s2.loli.net/2024/01/08/qhF8M73zwJVfUCA.png)\n![2018-07-06-10-43-21](https://s2.loli.net/2024/01/08/uhoxj82aqRW5tzQ.png)\n\n新建项目完成\n\n![2018-07-06-10-45-08](https://s2.loli.net/2024/01/08/wlu9fG3rBc4p8Ot.png)\n\n运行\n\n![2018-07-06-10-45-54](https://s2.loli.net/2024/01/08/V3zxQhH6YPfUs2d.png)\n![2018-07-06-10-49-52](https://s2.loli.net/2024/01/08/iMzFCusQaX8lNtK.png)\n![2018-07-06-10-50-05](https://s2.loli.net/2024/01/08/3g2OQHVdbZ6Dpxo.png)\n\n修改\n\n![2018-07-06-10-49-31](https://s2.loli.net/2024/01/08/eI3B7RGc2TYJpaC.png)\n![2018-07-06-10-51-43](https://s2.loli.net/2024/01/08/AnyVHgmv6QRbtDe.png)\n![2018-07-06-10-51-51](https://s2.loli.net/2024/01/08/6rMQXmhRkFNJfxI.png)\n\n### nodejs\n\nhttps://nodejs.org/zh-cn/\n\n#### 配置国内镜像源\n\n```bash\nnode -v\nnpm config -g set registry \"https://registry.npm.taobao.org\"\nnpm config list -g\n```\n\n![2018-07-06-11-10-58](https://s2.loli.net/2024/01/08/z12lE5VSvJ4Rqte.png)\n\n### Cordova\n\nhttps://cordova.apache.org/#getstarted\n\n```bash\nnpm i -g cordova\n```\n\n#### 新建项目\n\n```bash\ncordova create RunningMan\ncd RunningMan\ncordova platform add android\ncordova platform ls\ncordova run android\n```\n\nGenymotion 的模拟器正在运行的情况下，Cordova 会把打包好的 apk push 过去\n\n![2018-07-06-14-28-50](https://s2.loli.net/2024/01/08/mH8jvGZDASqnpi6.png)\n\n#### 打包例子 [vue-tetris](https://github.com/Binaryify/vue-tetris/)\n\n把 vue-tetris 项目 clone 到本机，修改配置，安装依赖，build\n\n![2018-07-06-11-52-35](https://s2.loli.net/2024/01/08/BqZPEAQle3DKIM6.png)\n\n修改 `config/index.js => build => assetsPublicPath`\n\n```javascript\nassetsPublicPath: './',\n```\n\n![2018-07-06-11-49-12](https://s2.loli.net/2024/01/08/uObgAihdLNM4scT.png)\n\n把`npm run build` 生成的 dist 目录下的文件全部复制到 Cordova 项目的 www 文件下\n在 Cordova 项目下运行 `cordova run android`\n发现 Genymotion 模拟器中运行了，但一直是加载的画面\n\n浏览器中连接 Android\n`chrome://inspect/#devices`![2018-07-06-13-37-46](https://s2.loli.net/2024/01/08/rIOivUcMowEnLsJ.png)\n\n\nconsole 报错 `navigator.languages.find is not a function`\n\n搜索后定位到 `src/unit/const.js`\n\n![2018-07-06-11-48-14](https://s2.loli.net/2024/01/08/Cq8wiQpFZs4BGfd.png)\n\n修改源码后重新 `npm run build`\n把生成的 dist 目录下的文件全部复制到 Cordova 项目的 www 文件下\n在 Cordova 项目下运行 `cordova run android`\n\n![2018-07-06-13-39-15](https://s2.loli.net/2024/01/08/pBozc1RVLYKvkng.png)\n\n#### 打包例子 [Vux](\"https://doc.vux.li/zh-CN/install/biolerplate.html\")\n\n```bash\nnpm install vue-cli -g # 如果还没安装\nvue init airyland/vux2 projectPath\n\ncd projectPath\nnpm i # 安装依赖 或者 yarn\nnpm run dev # 或者 yarn dev\nnpm run build # 或者 yarn build\n```\n\n```bash\n#  不使用 yarn 可以忽略\nnpm i -g yarn\nyarn config set registry https://registry.npm.taobao.org\n```\n\n修改 `config/index.js => build => assetsPublicPath`\n\n```javascript\nassetsPublicPath: './',\n```\n\n把生成的 dist 目录下的文件全部复制到 Cordova 项目的 www 文件下\n在 Cordova 项目下运行 `cordova run android`\n\n![2018-07-06-14-08-30](https://s2.loli.net/2024/01/08/HuMT8YfaLWEorGO.png)\n\n#### Camera\n\n[cordova-plugin-camera](https://cordova.apache.org/docs/en/latest/reference/cordova-plugin-camera/index.html)\n\n```bash\ncd cordova8\ncordova plugin add cordova-plugin-camera\ncordova plugin ls\n```\n\n[Cordova 结合 Vue 学习 Camera](https://www.jianshu.com/p/2370548b25ab)\n\n![indexhtmladdcordovajs](https://s2.loli.net/2024/01/08/oQP1UKHWrfI8lGd.png)\n![indexhtmladdcordova](https://s2.loli.net/2024/01/08/T6oPp5eACMhOnc1.png)\n\n>     别忘了在cordova项目下添加camera插件\n>     vuejs工程build出来的dist/index.html里面加上cordova.js\n>     否则调用不到相机插件\n>     看看那个cordova framework7 的模板build出来的dist/index.html是不是被模板自动加上了cordova.js\n\n---\n\n### Android APK 手动打包流程\n\nAndroid app 的打包流程大致分为 **build** ,**sign** , **align** 三部分。\n\n**build** 是构建 APK 的过程，分为 debug 和 release 两种。release 是发布到应用商店的版本。\n\n**sign** 是为 APK 签名。不管是哪一种 APK 都必须经过数字签名后才能安装到设备上，签名需要对应的证书（keystore），大部分情况下 APK 都采用的自签名证书，就是自己生成证书然后给应用签名。\n\n**align** 是压缩和优化的步骤，优化后会减少 app 运行时的内存开销。\n\nCordova 作为 hybrid app 的框架不像纯 Android 开发那么自动化，所以第一次打 release 包我们需要了解一下手动打包的过程。\n\n#### Build\n\n首先，我们生成一个 release APK 。这点在 cordova build 命令后加一个 --release 参数局可以。如果成功，你可以在 android 的 apk 目录下看到一个 android-release-unsigned.apk 文件。\n\n```bash\ncordova build android --release\n```\n\n#### Sign\n\n我们需要先生成一个数字签名文件（keystore）。这个文件只需要生成一次。以后每次 sign 都用它。\n\n```bash\nkeytool -genkey -v -keystore release-key.keystore -alias cordova-demo -keyalg RSA -keysize 2048 -validity 10000\n```\n\n上面的命令意思是，生成一个 release-key.keystore 的文件，别名（alias）为 cordova-demo 。\n过程中会要求设置 keystore 的密码和 key 的密码。我们分别设置为 testing 和 testing2。这四个属性要记牢，下一步有用。\n\n然后我们就可以用下面的命令对 APK 签名了\n\n```bash\njarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore release-key.keystore android-apk/android-release-unsigned.apk cordova-demo\n```\n\n这个命令中需要传入证书名 release-key.keystore，要签名的 APK android-release-unsigned.apk，和别名 cordova-demo。签名过程中需要先后输入 keystore 和 key 的密码。命令运行完后，这个 APK 就已经改变了。注意这个过程没有生成新文件。\n\n#### Align\n\n最后我们要用 zipalign 压缩和优化 APK\n\n```bash\nzipalign -v 4 android-apk/android-release-unsigned.apk android-apk/cordova-demo.apk\n```\n\n这一步会生成最终的 APK，我们把它命名为 cordova-demo.apk 。它就是可以直接上传到应用商店的版本。\n\n### 自动打包\n\n一旦有了 keystore 文件，下次打包就可以很快了。你可以在 cordova build 中指定所有参数来快速打包。这会直接生成一个 android-release.apk 给你。\n\n```bash\ncordova build android --release -- --keystore=\"release-key.keystore\" --alias=cordova-demo --storePassword=testing --password=testing2\n```\n\n但每次输入命令行参数是很重复的，Cordova 允许我们建立一个 build.json 配置文件来简化操作。文件内容如下\n\n```bash\n{\n  \"android\": {\n    \"release\": {\n      \"keystore\": \"release-key.keystore\",\n      \"alias\": \"cordova-demo\",\n      \"storePassword\": \"testing\",\n      \"password\": \"testing2\"\n    }\n  }\n}\n```\n\n下次就可以直接用 cordova build --release 了。\n\n为了安全性考虑，建议不要把密码放在在配置文件或者命令行中，而是手动输入。你可以把密码相关的配置去掉，下次 build 过程中会弹出一个 Java 小窗口，提示你输入密码。\n\n好了，到这里，cordova 的环境配置打包发布一整套流程全部讲完了。\n","slug":"cordova开发环境搭建","published":1,"updated":"2024-01-08T06:32:51.139Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrq64z6j000gsoip5hglabw0","content":"<p>工作中接触过几次混合 APP 开发，所以将一些用得到的内容记录下来，乙方遗忘。</p>\n<h1 id=\"hybrid-简易开发环境搭建\"><a href=\"#hybrid-简易开发环境搭建\" class=\"headerlink\" title=\"hybrid 简易开发环境搭建\"></a>hybrid 简易开发环境搭建</h1><h2 id=\"软件安装\"><a href=\"#软件安装\" class=\"headerlink\" title=\"软件安装\"></a>软件安装</h2><h3 id=\"JDK\"><a href=\"#JDK\" class=\"headerlink\" title=\"JDK\"></a>JDK</h3><p><a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\">Java SE Downloads</a></p>\n<h4 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h4><p>JDK</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JAVA_HOME</span><br><span class=\"line\">D:\\Program Files\\Java\\jdk1.8.0_172</span><br><span class=\"line\">PATH</span><br><span class=\"line\">%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;</span><br><span class=\"line\">CLASSPATH</span><br><span class=\"line\">.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Android-Studio\"><a href=\"#Android-Studio\" class=\"headerlink\" title=\"Android Studio\"></a>Android Studio</h3><p><a href=\"https://developer.android.google.cn/studio/\">Download Android Studio</a></p>\n<p><a href=\"https://developer.android.com/studio/install?hl=zh-cn\">安装 Android Studio</a></p>\n<h4 id=\"配置代理\"><a href=\"#配置代理\" class=\"headerlink\" title=\"配置代理\"></a>配置代理</h4><p>安装过程中弹出配置代理的提示框<br>选择手动配置代理<br>安装过程中的提示框配置，与下图(下图为安装完成后 File-&gt;Settings 的截图)，类似</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/owZVFf8Herh1s6T.png\" alt=\"2018-07-06-10-08-14\"></p>\n<p><strong>Android Studio 在构建应用的过程中需要下载 SDK, Gradle, build tools 等等</strong></p>\n<h4 id=\"环境变量-1\"><a href=\"#环境变量-1\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h4><p><img src=\"https://s2.loli.net/2024/01/08/NOKYvXAz7tb218i.png\" alt=\"2018-07-06-10-26-01\"></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/21IhpnBut8HWAGo.png\" alt=\"2018-07-06-10-26-44\"></p>\n<p>Android</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ANDROID_HOME</span><br><span class=\"line\">C:\\Users\\Administrator\\AppData\\Local\\Android\\Sdk</span><br><span class=\"line\">PATH</span><br><span class=\"line\">%ANDROID_HOME%\\tools;%ANDROID_HOME%\\tools\\bin;%ANDROID_HOME%\\platform-tools;</span><br></pre></td></tr></table></figure>\n\n<p>Gradle</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRADLE_HOME</span><br><span class=\"line\">D:\\Program Files\\Android\\Android Studio\\gradle\\gradle-4.4</span><br><span class=\"line\">PATH</span><br><span class=\"line\">%GRADLE_HOME%\\bin;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Genymotion\"><a href=\"#Genymotion\" class=\"headerlink\" title=\"Genymotion\"></a>Genymotion</h3><p><a href=\"https://www.genymotion.com/desktop/\">Genymotion Desktop</a></p>\n<p>个人版</p>\n<p><a href=\"https://www.genymotion.com/fun-zone/\">https://www.genymotion.com/fun-zone/</a></p>\n<p>完整版</p>\n<p><a href=\"https://www.genymotion.com/get-full-version/\">https://www.genymotion.com/get-full-version/</a></p>\n<p>上面都是下载的同一个安装文件</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/JioAtjVNkygaRFM.png\" alt=\"2018-07-11-16-20-31\"></p>\n<p>下载个人版</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/WCuVLpgrDFOUE53.png\" alt=\"2018-07-11-16-28-00\"></p>\n<p>前面 virtual box 已经单独安装过了</p>\n<p>所以选择不带 virtualbox 的</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/qaCjYtoMSvBAnr1.png\" alt=\"2018-07-11-16-33-24\"></p>\n<p>可以 personal use</p>\n<p>但是 Add 模拟器的时候需要登陆<img src=\"https://s2.loli.net/2024/01/08/mKWc3e7ZagFGpqd.png\" alt=\"2018-07-11-16-36-05\"></p>\n<p>创建完模拟器后可以 退出账号，不影响一般使用</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/6DR7aAOYenzmHFf.png\" alt=\"2018-07-11-16-40-45\"></p>\n<p>没有登陆的情况下，选择 Personal use，模拟器底部会又这个水印</p>\n<p>登陆的情况下，账号的试用期超过 30 天就用不了吧。</p>\n<h4 id=\"在-Genymotion-中配置使用-Android-Studio-的-tools\"><a href=\"#在-Genymotion-中配置使用-Android-Studio-的-tools\" class=\"headerlink\" title=\"在 Genymotion 中配置使用 Android Studio 的 tools\"></a>在 Genymotion 中配置使用 Android Studio 的 tools</h4><p><img src=\"https://s2.loli.net/2024/01/08/afHYZNqBmQKFUGO.png\" alt=\"2018-07-06-11-00-39\"></p>\n<h4 id=\"在-Android-Studio-中配置-Genymotion\"><a href=\"#在-Android-Studio-中配置-Genymotion\" class=\"headerlink\" title=\"在 Android Studio 中配置 Genymotion\"></a>在 Android Studio 中配置 Genymotion</h4><p>安装 Genymotion 的插件</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/mAU1jqLhgEDrwzT.png\" alt=\"2018-07-06-10-20-38\"></p>\n<p>指定 Genymotion 的安装目录</p>\n<p><img src=\"E:\\demo\\blog\\source_posts\\cordova开发环境搭建\\2018-07-06-10-21-22.png\" alt=\"2018-07-06-10-21-22\"></p>\n<h4 id=\"配置代理-1\"><a href=\"#配置代理-1\" class=\"headerlink\" title=\"配置代理\"></a>配置代理</h4><p><img src=\"https://s2.loli.net/2024/01/08/OjBRycZMAlu5iqT.png\" alt=\"2018-07-06-10-23-44\"></p>\n<h4 id=\"新建模拟器\"><a href=\"#新建模拟器\" class=\"headerlink\" title=\"新建模拟器\"></a>新建模拟器</h4><p><img src=\"https://s2.loli.net/2024/01/08/HYukVGnA6JK3yDP.png\" alt=\"2018-07-06-10-35-47\"></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/AULBmcHTYJMFDal.png\" alt=\"2018-07-06-10-36-51\"></p>\n<h4 id=\"在-Android-Studio-中新建项目\"><a href=\"#在-Android-Studio-中新建项目\" class=\"headerlink\" title=\"在 Android Studio 中新建项目\"></a>在 Android Studio 中新建项目</h4><p>新建项目</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/vJCDybTpPUF71tm.png\" alt=\"2018-07-06-10-39-13\"></p>\n<p>指定包名</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/eoJ4uLBpMIYK75q.png\" alt=\"2018-07-06-10-40-34\"></p>\n<p>目标 API 版本</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/VbksDL8UepugK6M.png\" alt=\"2018-07-06-10-41-46\"></p>\n<p>添加一个 Activity</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/qhF8M73zwJVfUCA.png\" alt=\"2018-07-06-10-43-08\"><br><img src=\"https://s2.loli.net/2024/01/08/uhoxj82aqRW5tzQ.png\" alt=\"2018-07-06-10-43-21\"></p>\n<p>新建项目完成</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/wlu9fG3rBc4p8Ot.png\" alt=\"2018-07-06-10-45-08\"></p>\n<p>运行</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/V3zxQhH6YPfUs2d.png\" alt=\"2018-07-06-10-45-54\"><br><img src=\"https://s2.loli.net/2024/01/08/iMzFCusQaX8lNtK.png\" alt=\"2018-07-06-10-49-52\"><br><img src=\"https://s2.loli.net/2024/01/08/3g2OQHVdbZ6Dpxo.png\" alt=\"2018-07-06-10-50-05\"></p>\n<p>修改</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/eI3B7RGc2TYJpaC.png\" alt=\"2018-07-06-10-49-31\"><br><img src=\"https://s2.loli.net/2024/01/08/AnyVHgmv6QRbtDe.png\" alt=\"2018-07-06-10-51-43\"><br><img src=\"https://s2.loli.net/2024/01/08/6rMQXmhRkFNJfxI.png\" alt=\"2018-07-06-10-51-51\"></p>\n<h3 id=\"nodejs\"><a href=\"#nodejs\" class=\"headerlink\" title=\"nodejs\"></a>nodejs</h3><p><a href=\"https://nodejs.org/zh-cn/\">https://nodejs.org/zh-cn/</a></p>\n<h4 id=\"配置国内镜像源\"><a href=\"#配置国内镜像源\" class=\"headerlink\" title=\"配置国内镜像源\"></a>配置国内镜像源</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br><span class=\"line\">npm config -g <span class=\"built_in\">set</span> registry <span class=\"string\">&quot;https://registry.npm.taobao.org&quot;</span></span><br><span class=\"line\">npm config list -g</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s2.loli.net/2024/01/08/z12lE5VSvJ4Rqte.png\" alt=\"2018-07-06-11-10-58\"></p>\n<h3 id=\"Cordova\"><a href=\"#Cordova\" class=\"headerlink\" title=\"Cordova\"></a>Cordova</h3><p><a href=\"https://cordova.apache.org/#getstarted\">https://cordova.apache.org/#getstarted</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -g cordova</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"新建项目\"><a href=\"#新建项目\" class=\"headerlink\" title=\"新建项目\"></a>新建项目</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cordova create RunningMan</span><br><span class=\"line\"><span class=\"built_in\">cd</span> RunningMan</span><br><span class=\"line\">cordova platform add android</span><br><span class=\"line\">cordova platform <span class=\"built_in\">ls</span></span><br><span class=\"line\">cordova run android</span><br></pre></td></tr></table></figure>\n\n<p>Genymotion 的模拟器正在运行的情况下，Cordova 会把打包好的 apk push 过去</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/mH8jvGZDASqnpi6.png\" alt=\"2018-07-06-14-28-50\"></p>\n<h4 id=\"打包例子-vue-tetris\"><a href=\"#打包例子-vue-tetris\" class=\"headerlink\" title=\"打包例子 vue-tetris\"></a>打包例子 <a href=\"https://github.com/Binaryify/vue-tetris/\">vue-tetris</a></h4><p>把 vue-tetris 项目 clone 到本机，修改配置，安装依赖，build</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/BqZPEAQle3DKIM6.png\" alt=\"2018-07-06-11-52-35\"></p>\n<p>修改 <code>config/index.js =&gt; build =&gt; assetsPublicPath</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">assetsPublicPath</span>: <span class=\"string\">&#x27;./&#x27;</span>,</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s2.loli.net/2024/01/08/uObgAihdLNM4scT.png\" alt=\"2018-07-06-11-49-12\"></p>\n<p>把<code>npm run build</code> 生成的 dist 目录下的文件全部复制到 Cordova 项目的 www 文件下<br>在 Cordova 项目下运行 <code>cordova run android</code><br>发现 Genymotion 模拟器中运行了，但一直是加载的画面</p>\n<p>浏览器中连接 Android<br><code>chrome://inspect/#devices</code><img src=\"https://s2.loli.net/2024/01/08/rIOivUcMowEnLsJ.png\" alt=\"2018-07-06-13-37-46\"></p>\n<p>console 报错 <code>navigator.languages.find is not a function</code></p>\n<p>搜索后定位到 <code>src/unit/const.js</code></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/Cq8wiQpFZs4BGfd.png\" alt=\"2018-07-06-11-48-14\"></p>\n<p>修改源码后重新 <code>npm run build</code><br>把生成的 dist 目录下的文件全部复制到 Cordova 项目的 www 文件下<br>在 Cordova 项目下运行 <code>cordova run android</code></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/pBozc1RVLYKvkng.png\" alt=\"2018-07-06-13-39-15\"></p>\n<h4 id=\"打包例子-Vux\"><a href=\"#打包例子-Vux\" class=\"headerlink\" title=\"打包例子 Vux\"></a>打包例子 <a href=\"%22https://doc.vux.li/zh-CN/install/biolerplate.html%22\">Vux</a></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install vue-cli -g <span class=\"comment\"># 如果还没安装</span></span><br><span class=\"line\">vue init airyland/vux2 projectPath</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> projectPath</span><br><span class=\"line\">npm i <span class=\"comment\"># 安装依赖 或者 yarn</span></span><br><span class=\"line\">npm run dev <span class=\"comment\"># 或者 yarn dev</span></span><br><span class=\"line\">npm run build <span class=\"comment\"># 或者 yarn build</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#  不使用 yarn 可以忽略</span></span><br><span class=\"line\">npm i -g yarn</span><br><span class=\"line\">yarn config <span class=\"built_in\">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n\n<p>修改 <code>config/index.js =&gt; build =&gt; assetsPublicPath</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">assetsPublicPath</span>: <span class=\"string\">&#x27;./&#x27;</span>,</span><br></pre></td></tr></table></figure>\n\n<p>把生成的 dist 目录下的文件全部复制到 Cordova 项目的 www 文件下<br>在 Cordova 项目下运行 <code>cordova run android</code></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/HuMT8YfaLWEorGO.png\" alt=\"2018-07-06-14-08-30\"></p>\n<h4 id=\"Camera\"><a href=\"#Camera\" class=\"headerlink\" title=\"Camera\"></a>Camera</h4><p><a href=\"https://cordova.apache.org/docs/en/latest/reference/cordova-plugin-camera/index.html\">cordova-plugin-camera</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> cordova8</span><br><span class=\"line\">cordova plugin add cordova-plugin-camera</span><br><span class=\"line\">cordova plugin <span class=\"built_in\">ls</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.jianshu.com/p/2370548b25ab\">Cordova 结合 Vue 学习 Camera</a></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/oQP1UKHWrfI8lGd.png\" alt=\"indexhtmladdcordovajs\"><br><img src=\"https://s2.loli.net/2024/01/08/T6oPp5eACMhOnc1.png\" alt=\"indexhtmladdcordova\"></p>\n<blockquote>\n<pre><code>别忘了在cordova项目下添加camera插件\nvuejs工程build出来的dist/index.html里面加上cordova.js\n否则调用不到相机插件\n看看那个cordova framework7 的模板build出来的dist/index.html是不是被模板自动加上了cordova.js\n</code></pre>\n</blockquote>\n<hr>\n<h3 id=\"Android-APK-手动打包流程\"><a href=\"#Android-APK-手动打包流程\" class=\"headerlink\" title=\"Android APK 手动打包流程\"></a>Android APK 手动打包流程</h3><p>Android app 的打包流程大致分为 <strong>build</strong> ,<strong>sign</strong> , <strong>align</strong> 三部分。</p>\n<p><strong>build</strong> 是构建 APK 的过程，分为 debug 和 release 两种。release 是发布到应用商店的版本。</p>\n<p><strong>sign</strong> 是为 APK 签名。不管是哪一种 APK 都必须经过数字签名后才能安装到设备上，签名需要对应的证书（keystore），大部分情况下 APK 都采用的自签名证书，就是自己生成证书然后给应用签名。</p>\n<p><strong>align</strong> 是压缩和优化的步骤，优化后会减少 app 运行时的内存开销。</p>\n<p>Cordova 作为 hybrid app 的框架不像纯 Android 开发那么自动化，所以第一次打 release 包我们需要了解一下手动打包的过程。</p>\n<h4 id=\"Build\"><a href=\"#Build\" class=\"headerlink\" title=\"Build\"></a>Build</h4><p>首先，我们生成一个 release APK 。这点在 cordova build 命令后加一个 –release 参数局可以。如果成功，你可以在 android 的 apk 目录下看到一个 android-release-unsigned.apk 文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cordova build android --release</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Sign\"><a href=\"#Sign\" class=\"headerlink\" title=\"Sign\"></a>Sign</h4><p>我们需要先生成一个数字签名文件（keystore）。这个文件只需要生成一次。以后每次 sign 都用它。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -genkey -v -keystore release-key.keystore -<span class=\"built_in\">alias</span> cordova-demo -keyalg RSA -keysize 2048 -validity 10000</span><br></pre></td></tr></table></figure>\n\n<p>上面的命令意思是，生成一个 release-key.keystore 的文件，别名（alias）为 cordova-demo 。<br>过程中会要求设置 keystore 的密码和 key 的密码。我们分别设置为 testing 和 testing2。这四个属性要记牢，下一步有用。</p>\n<p>然后我们就可以用下面的命令对 APK 签名了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore release-key.keystore android-apk/android-release-unsigned.apk cordova-demo</span><br></pre></td></tr></table></figure>\n\n<p>这个命令中需要传入证书名 release-key.keystore，要签名的 APK android-release-unsigned.apk，和别名 cordova-demo。签名过程中需要先后输入 keystore 和 key 的密码。命令运行完后，这个 APK 就已经改变了。注意这个过程没有生成新文件。</p>\n<h4 id=\"Align\"><a href=\"#Align\" class=\"headerlink\" title=\"Align\"></a>Align</h4><p>最后我们要用 zipalign 压缩和优化 APK</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zipalign -v 4 android-apk/android-release-unsigned.apk android-apk/cordova-demo.apk</span><br></pre></td></tr></table></figure>\n\n<p>这一步会生成最终的 APK，我们把它命名为 cordova-demo.apk 。它就是可以直接上传到应用商店的版本。</p>\n<h3 id=\"自动打包\"><a href=\"#自动打包\" class=\"headerlink\" title=\"自动打包\"></a>自动打包</h3><p>一旦有了 keystore 文件，下次打包就可以很快了。你可以在 cordova build 中指定所有参数来快速打包。这会直接生成一个 android-release.apk 给你。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cordova build android --release -- --keystore=<span class=\"string\">&quot;release-key.keystore&quot;</span> --<span class=\"built_in\">alias</span>=cordova-demo --storePassword=testing --password=testing2</span><br></pre></td></tr></table></figure>\n\n<p>但每次输入命令行参数是很重复的，Cordova 允许我们建立一个 build.json 配置文件来简化操作。文件内容如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;android&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;release&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;keystore&quot;</span>: <span class=\"string\">&quot;release-key.keystore&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;alias&quot;</span>: <span class=\"string\">&quot;cordova-demo&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;storePassword&quot;</span>: <span class=\"string\">&quot;testing&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;password&quot;</span>: <span class=\"string\">&quot;testing2&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下次就可以直接用 cordova build –release 了。</p>\n<p>为了安全性考虑，建议不要把密码放在在配置文件或者命令行中，而是手动输入。你可以把密码相关的配置去掉，下次 build 过程中会弹出一个 Java 小窗口，提示你输入密码。</p>\n<p>好了，到这里，cordova 的环境配置打包发布一整套流程全部讲完了。</p>\n","site":{"data":{}},"length":1805,"excerpt":"","more":"<p>工作中接触过几次混合 APP 开发，所以将一些用得到的内容记录下来，乙方遗忘。</p>\n<h1 id=\"hybrid-简易开发环境搭建\"><a href=\"#hybrid-简易开发环境搭建\" class=\"headerlink\" title=\"hybrid 简易开发环境搭建\"></a>hybrid 简易开发环境搭建</h1><h2 id=\"软件安装\"><a href=\"#软件安装\" class=\"headerlink\" title=\"软件安装\"></a>软件安装</h2><h3 id=\"JDK\"><a href=\"#JDK\" class=\"headerlink\" title=\"JDK\"></a>JDK</h3><p><a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\">Java SE Downloads</a></p>\n<h4 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h4><p>JDK</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JAVA_HOME</span><br><span class=\"line\">D:\\Program Files\\Java\\jdk1.8.0_172</span><br><span class=\"line\">PATH</span><br><span class=\"line\">%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;</span><br><span class=\"line\">CLASSPATH</span><br><span class=\"line\">.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Android-Studio\"><a href=\"#Android-Studio\" class=\"headerlink\" title=\"Android Studio\"></a>Android Studio</h3><p><a href=\"https://developer.android.google.cn/studio/\">Download Android Studio</a></p>\n<p><a href=\"https://developer.android.com/studio/install?hl=zh-cn\">安装 Android Studio</a></p>\n<h4 id=\"配置代理\"><a href=\"#配置代理\" class=\"headerlink\" title=\"配置代理\"></a>配置代理</h4><p>安装过程中弹出配置代理的提示框<br>选择手动配置代理<br>安装过程中的提示框配置，与下图(下图为安装完成后 File-&gt;Settings 的截图)，类似</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/owZVFf8Herh1s6T.png\" alt=\"2018-07-06-10-08-14\"></p>\n<p><strong>Android Studio 在构建应用的过程中需要下载 SDK, Gradle, build tools 等等</strong></p>\n<h4 id=\"环境变量-1\"><a href=\"#环境变量-1\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h4><p><img src=\"https://s2.loli.net/2024/01/08/NOKYvXAz7tb218i.png\" alt=\"2018-07-06-10-26-01\"></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/21IhpnBut8HWAGo.png\" alt=\"2018-07-06-10-26-44\"></p>\n<p>Android</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ANDROID_HOME</span><br><span class=\"line\">C:\\Users\\Administrator\\AppData\\Local\\Android\\Sdk</span><br><span class=\"line\">PATH</span><br><span class=\"line\">%ANDROID_HOME%\\tools;%ANDROID_HOME%\\tools\\bin;%ANDROID_HOME%\\platform-tools;</span><br></pre></td></tr></table></figure>\n\n<p>Gradle</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRADLE_HOME</span><br><span class=\"line\">D:\\Program Files\\Android\\Android Studio\\gradle\\gradle-4.4</span><br><span class=\"line\">PATH</span><br><span class=\"line\">%GRADLE_HOME%\\bin;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Genymotion\"><a href=\"#Genymotion\" class=\"headerlink\" title=\"Genymotion\"></a>Genymotion</h3><p><a href=\"https://www.genymotion.com/desktop/\">Genymotion Desktop</a></p>\n<p>个人版</p>\n<p><a href=\"https://www.genymotion.com/fun-zone/\">https://www.genymotion.com/fun-zone/</a></p>\n<p>完整版</p>\n<p><a href=\"https://www.genymotion.com/get-full-version/\">https://www.genymotion.com/get-full-version/</a></p>\n<p>上面都是下载的同一个安装文件</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/JioAtjVNkygaRFM.png\" alt=\"2018-07-11-16-20-31\"></p>\n<p>下载个人版</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/WCuVLpgrDFOUE53.png\" alt=\"2018-07-11-16-28-00\"></p>\n<p>前面 virtual box 已经单独安装过了</p>\n<p>所以选择不带 virtualbox 的</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/qaCjYtoMSvBAnr1.png\" alt=\"2018-07-11-16-33-24\"></p>\n<p>可以 personal use</p>\n<p>但是 Add 模拟器的时候需要登陆<img src=\"https://s2.loli.net/2024/01/08/mKWc3e7ZagFGpqd.png\" alt=\"2018-07-11-16-36-05\"></p>\n<p>创建完模拟器后可以 退出账号，不影响一般使用</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/6DR7aAOYenzmHFf.png\" alt=\"2018-07-11-16-40-45\"></p>\n<p>没有登陆的情况下，选择 Personal use，模拟器底部会又这个水印</p>\n<p>登陆的情况下，账号的试用期超过 30 天就用不了吧。</p>\n<h4 id=\"在-Genymotion-中配置使用-Android-Studio-的-tools\"><a href=\"#在-Genymotion-中配置使用-Android-Studio-的-tools\" class=\"headerlink\" title=\"在 Genymotion 中配置使用 Android Studio 的 tools\"></a>在 Genymotion 中配置使用 Android Studio 的 tools</h4><p><img src=\"https://s2.loli.net/2024/01/08/afHYZNqBmQKFUGO.png\" alt=\"2018-07-06-11-00-39\"></p>\n<h4 id=\"在-Android-Studio-中配置-Genymotion\"><a href=\"#在-Android-Studio-中配置-Genymotion\" class=\"headerlink\" title=\"在 Android Studio 中配置 Genymotion\"></a>在 Android Studio 中配置 Genymotion</h4><p>安装 Genymotion 的插件</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/mAU1jqLhgEDrwzT.png\" alt=\"2018-07-06-10-20-38\"></p>\n<p>指定 Genymotion 的安装目录</p>\n<p><img src=\"E:\\demo\\blog\\source_posts\\cordova开发环境搭建\\2018-07-06-10-21-22.png\" alt=\"2018-07-06-10-21-22\"></p>\n<h4 id=\"配置代理-1\"><a href=\"#配置代理-1\" class=\"headerlink\" title=\"配置代理\"></a>配置代理</h4><p><img src=\"https://s2.loli.net/2024/01/08/OjBRycZMAlu5iqT.png\" alt=\"2018-07-06-10-23-44\"></p>\n<h4 id=\"新建模拟器\"><a href=\"#新建模拟器\" class=\"headerlink\" title=\"新建模拟器\"></a>新建模拟器</h4><p><img src=\"https://s2.loli.net/2024/01/08/HYukVGnA6JK3yDP.png\" alt=\"2018-07-06-10-35-47\"></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/AULBmcHTYJMFDal.png\" alt=\"2018-07-06-10-36-51\"></p>\n<h4 id=\"在-Android-Studio-中新建项目\"><a href=\"#在-Android-Studio-中新建项目\" class=\"headerlink\" title=\"在 Android Studio 中新建项目\"></a>在 Android Studio 中新建项目</h4><p>新建项目</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/vJCDybTpPUF71tm.png\" alt=\"2018-07-06-10-39-13\"></p>\n<p>指定包名</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/eoJ4uLBpMIYK75q.png\" alt=\"2018-07-06-10-40-34\"></p>\n<p>目标 API 版本</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/VbksDL8UepugK6M.png\" alt=\"2018-07-06-10-41-46\"></p>\n<p>添加一个 Activity</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/qhF8M73zwJVfUCA.png\" alt=\"2018-07-06-10-43-08\"><br><img src=\"https://s2.loli.net/2024/01/08/uhoxj82aqRW5tzQ.png\" alt=\"2018-07-06-10-43-21\"></p>\n<p>新建项目完成</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/wlu9fG3rBc4p8Ot.png\" alt=\"2018-07-06-10-45-08\"></p>\n<p>运行</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/V3zxQhH6YPfUs2d.png\" alt=\"2018-07-06-10-45-54\"><br><img src=\"https://s2.loli.net/2024/01/08/iMzFCusQaX8lNtK.png\" alt=\"2018-07-06-10-49-52\"><br><img src=\"https://s2.loli.net/2024/01/08/3g2OQHVdbZ6Dpxo.png\" alt=\"2018-07-06-10-50-05\"></p>\n<p>修改</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/eI3B7RGc2TYJpaC.png\" alt=\"2018-07-06-10-49-31\"><br><img src=\"https://s2.loli.net/2024/01/08/AnyVHgmv6QRbtDe.png\" alt=\"2018-07-06-10-51-43\"><br><img src=\"https://s2.loli.net/2024/01/08/6rMQXmhRkFNJfxI.png\" alt=\"2018-07-06-10-51-51\"></p>\n<h3 id=\"nodejs\"><a href=\"#nodejs\" class=\"headerlink\" title=\"nodejs\"></a>nodejs</h3><p><a href=\"https://nodejs.org/zh-cn/\">https://nodejs.org/zh-cn/</a></p>\n<h4 id=\"配置国内镜像源\"><a href=\"#配置国内镜像源\" class=\"headerlink\" title=\"配置国内镜像源\"></a>配置国内镜像源</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br><span class=\"line\">npm config -g <span class=\"built_in\">set</span> registry <span class=\"string\">&quot;https://registry.npm.taobao.org&quot;</span></span><br><span class=\"line\">npm config list -g</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s2.loli.net/2024/01/08/z12lE5VSvJ4Rqte.png\" alt=\"2018-07-06-11-10-58\"></p>\n<h3 id=\"Cordova\"><a href=\"#Cordova\" class=\"headerlink\" title=\"Cordova\"></a>Cordova</h3><p><a href=\"https://cordova.apache.org/#getstarted\">https://cordova.apache.org/#getstarted</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -g cordova</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"新建项目\"><a href=\"#新建项目\" class=\"headerlink\" title=\"新建项目\"></a>新建项目</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cordova create RunningMan</span><br><span class=\"line\"><span class=\"built_in\">cd</span> RunningMan</span><br><span class=\"line\">cordova platform add android</span><br><span class=\"line\">cordova platform <span class=\"built_in\">ls</span></span><br><span class=\"line\">cordova run android</span><br></pre></td></tr></table></figure>\n\n<p>Genymotion 的模拟器正在运行的情况下，Cordova 会把打包好的 apk push 过去</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/mH8jvGZDASqnpi6.png\" alt=\"2018-07-06-14-28-50\"></p>\n<h4 id=\"打包例子-vue-tetris\"><a href=\"#打包例子-vue-tetris\" class=\"headerlink\" title=\"打包例子 vue-tetris\"></a>打包例子 <a href=\"https://github.com/Binaryify/vue-tetris/\">vue-tetris</a></h4><p>把 vue-tetris 项目 clone 到本机，修改配置，安装依赖，build</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/BqZPEAQle3DKIM6.png\" alt=\"2018-07-06-11-52-35\"></p>\n<p>修改 <code>config/index.js =&gt; build =&gt; assetsPublicPath</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">assetsPublicPath</span>: <span class=\"string\">&#x27;./&#x27;</span>,</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s2.loli.net/2024/01/08/uObgAihdLNM4scT.png\" alt=\"2018-07-06-11-49-12\"></p>\n<p>把<code>npm run build</code> 生成的 dist 目录下的文件全部复制到 Cordova 项目的 www 文件下<br>在 Cordova 项目下运行 <code>cordova run android</code><br>发现 Genymotion 模拟器中运行了，但一直是加载的画面</p>\n<p>浏览器中连接 Android<br><code>chrome://inspect/#devices</code><img src=\"https://s2.loli.net/2024/01/08/rIOivUcMowEnLsJ.png\" alt=\"2018-07-06-13-37-46\"></p>\n<p>console 报错 <code>navigator.languages.find is not a function</code></p>\n<p>搜索后定位到 <code>src/unit/const.js</code></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/Cq8wiQpFZs4BGfd.png\" alt=\"2018-07-06-11-48-14\"></p>\n<p>修改源码后重新 <code>npm run build</code><br>把生成的 dist 目录下的文件全部复制到 Cordova 项目的 www 文件下<br>在 Cordova 项目下运行 <code>cordova run android</code></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/pBozc1RVLYKvkng.png\" alt=\"2018-07-06-13-39-15\"></p>\n<h4 id=\"打包例子-Vux\"><a href=\"#打包例子-Vux\" class=\"headerlink\" title=\"打包例子 Vux\"></a>打包例子 <a href=\"%22https://doc.vux.li/zh-CN/install/biolerplate.html%22\">Vux</a></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install vue-cli -g <span class=\"comment\"># 如果还没安装</span></span><br><span class=\"line\">vue init airyland/vux2 projectPath</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> projectPath</span><br><span class=\"line\">npm i <span class=\"comment\"># 安装依赖 或者 yarn</span></span><br><span class=\"line\">npm run dev <span class=\"comment\"># 或者 yarn dev</span></span><br><span class=\"line\">npm run build <span class=\"comment\"># 或者 yarn build</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#  不使用 yarn 可以忽略</span></span><br><span class=\"line\">npm i -g yarn</span><br><span class=\"line\">yarn config <span class=\"built_in\">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n\n<p>修改 <code>config/index.js =&gt; build =&gt; assetsPublicPath</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">assetsPublicPath</span>: <span class=\"string\">&#x27;./&#x27;</span>,</span><br></pre></td></tr></table></figure>\n\n<p>把生成的 dist 目录下的文件全部复制到 Cordova 项目的 www 文件下<br>在 Cordova 项目下运行 <code>cordova run android</code></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/HuMT8YfaLWEorGO.png\" alt=\"2018-07-06-14-08-30\"></p>\n<h4 id=\"Camera\"><a href=\"#Camera\" class=\"headerlink\" title=\"Camera\"></a>Camera</h4><p><a href=\"https://cordova.apache.org/docs/en/latest/reference/cordova-plugin-camera/index.html\">cordova-plugin-camera</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> cordova8</span><br><span class=\"line\">cordova plugin add cordova-plugin-camera</span><br><span class=\"line\">cordova plugin <span class=\"built_in\">ls</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.jianshu.com/p/2370548b25ab\">Cordova 结合 Vue 学习 Camera</a></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/oQP1UKHWrfI8lGd.png\" alt=\"indexhtmladdcordovajs\"><br><img src=\"https://s2.loli.net/2024/01/08/T6oPp5eACMhOnc1.png\" alt=\"indexhtmladdcordova\"></p>\n<blockquote>\n<pre><code>别忘了在cordova项目下添加camera插件\nvuejs工程build出来的dist/index.html里面加上cordova.js\n否则调用不到相机插件\n看看那个cordova framework7 的模板build出来的dist/index.html是不是被模板自动加上了cordova.js\n</code></pre>\n</blockquote>\n<hr>\n<h3 id=\"Android-APK-手动打包流程\"><a href=\"#Android-APK-手动打包流程\" class=\"headerlink\" title=\"Android APK 手动打包流程\"></a>Android APK 手动打包流程</h3><p>Android app 的打包流程大致分为 <strong>build</strong> ,<strong>sign</strong> , <strong>align</strong> 三部分。</p>\n<p><strong>build</strong> 是构建 APK 的过程，分为 debug 和 release 两种。release 是发布到应用商店的版本。</p>\n<p><strong>sign</strong> 是为 APK 签名。不管是哪一种 APK 都必须经过数字签名后才能安装到设备上，签名需要对应的证书（keystore），大部分情况下 APK 都采用的自签名证书，就是自己生成证书然后给应用签名。</p>\n<p><strong>align</strong> 是压缩和优化的步骤，优化后会减少 app 运行时的内存开销。</p>\n<p>Cordova 作为 hybrid app 的框架不像纯 Android 开发那么自动化，所以第一次打 release 包我们需要了解一下手动打包的过程。</p>\n<h4 id=\"Build\"><a href=\"#Build\" class=\"headerlink\" title=\"Build\"></a>Build</h4><p>首先，我们生成一个 release APK 。这点在 cordova build 命令后加一个 –release 参数局可以。如果成功，你可以在 android 的 apk 目录下看到一个 android-release-unsigned.apk 文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cordova build android --release</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Sign\"><a href=\"#Sign\" class=\"headerlink\" title=\"Sign\"></a>Sign</h4><p>我们需要先生成一个数字签名文件（keystore）。这个文件只需要生成一次。以后每次 sign 都用它。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -genkey -v -keystore release-key.keystore -<span class=\"built_in\">alias</span> cordova-demo -keyalg RSA -keysize 2048 -validity 10000</span><br></pre></td></tr></table></figure>\n\n<p>上面的命令意思是，生成一个 release-key.keystore 的文件，别名（alias）为 cordova-demo 。<br>过程中会要求设置 keystore 的密码和 key 的密码。我们分别设置为 testing 和 testing2。这四个属性要记牢，下一步有用。</p>\n<p>然后我们就可以用下面的命令对 APK 签名了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore release-key.keystore android-apk/android-release-unsigned.apk cordova-demo</span><br></pre></td></tr></table></figure>\n\n<p>这个命令中需要传入证书名 release-key.keystore，要签名的 APK android-release-unsigned.apk，和别名 cordova-demo。签名过程中需要先后输入 keystore 和 key 的密码。命令运行完后，这个 APK 就已经改变了。注意这个过程没有生成新文件。</p>\n<h4 id=\"Align\"><a href=\"#Align\" class=\"headerlink\" title=\"Align\"></a>Align</h4><p>最后我们要用 zipalign 压缩和优化 APK</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zipalign -v 4 android-apk/android-release-unsigned.apk android-apk/cordova-demo.apk</span><br></pre></td></tr></table></figure>\n\n<p>这一步会生成最终的 APK，我们把它命名为 cordova-demo.apk 。它就是可以直接上传到应用商店的版本。</p>\n<h3 id=\"自动打包\"><a href=\"#自动打包\" class=\"headerlink\" title=\"自动打包\"></a>自动打包</h3><p>一旦有了 keystore 文件，下次打包就可以很快了。你可以在 cordova build 中指定所有参数来快速打包。这会直接生成一个 android-release.apk 给你。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cordova build android --release -- --keystore=<span class=\"string\">&quot;release-key.keystore&quot;</span> --<span class=\"built_in\">alias</span>=cordova-demo --storePassword=testing --password=testing2</span><br></pre></td></tr></table></figure>\n\n<p>但每次输入命令行参数是很重复的，Cordova 允许我们建立一个 build.json 配置文件来简化操作。文件内容如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;android&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;release&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;keystore&quot;</span>: <span class=\"string\">&quot;release-key.keystore&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;alias&quot;</span>: <span class=\"string\">&quot;cordova-demo&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;storePassword&quot;</span>: <span class=\"string\">&quot;testing&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;password&quot;</span>: <span class=\"string\">&quot;testing2&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下次就可以直接用 cordova build –release 了。</p>\n<p>为了安全性考虑，建议不要把密码放在在配置文件或者命令行中，而是手动输入。你可以把密码相关的配置去掉，下次 build 过程中会弹出一个 Java 小窗口，提示你输入密码。</p>\n<p>好了，到这里，cordova 的环境配置打包发布一整套流程全部讲完了。</p>\n"},{"title":"docker部署vue项目","date":"2023-11-14T09:34:38.000Z","_content":"\n\n默认已经安装了 docker，没有安装的自行安装[docker](https://www.docker.com/get-started/)\n\nDocker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，该容器包含了应用程序的代码、运行环境、依赖库、配置文件等必需的资源，通过容器就可以实现方便快速并且与平台解耦的自动化部署方式，无论你部署时的环境如何，容器中的应用程序都会运行在同一种环境下。\n\n本文以数据库为例做说明\n\n## 具体实现\n\n1. 在根目录创建`Dockerfile` 文件\n\n```bash\nFROM node:latest\nCOPY ./ /app\nWORKDIR /app\nRUN npm install && npm run build\n\nFROM nginx\nRUN mkdir /app\nCOPY --from=0 /app/dist /app\nCOPY nginx.conf /etc/nginx/nginx.conf\n```\n\n> - 自定义构建镜像的时候基于Dockerfile来构建。\n> - FROM node 命令的意思该镜像是基于 node:latest 镜像而构建的。\n> - COPY ./ /app 命令的意思是复制当前目录下文件到app目录\n> - WORKDIR /app 命令的意思是设定后续指令的工作目录为app\n> - RUN npm install && npm run build 命令的意思是运行安装依赖打包项目命令\n> - FROM nginx 命令的意思该镜像是基于 nginx:latest 镜像而构建的。没有指定版本默认最新版本\n> - RUN mkdir /app 命令的意思是运行在镜像里创建 /app 目录命令\n> - COPY --from=0 /app/dist /app 命令的意思是将前一阶段中构建的工件目录下dist文件夹下的所有文件复制到镜像中 /app 目录下。\n> - COPY nginx.conf /etc/nginx/nginx.conf 命令的意思是将当前nginx.config 复制到 etc/nginx/config.conf，用本地的 nginx.conf 配置来替换nginx镜像里的默认配置。\n\n1. 在项目根目录创建 .dockerignore 文件\n\n```bash\n**/node_modules\n**/dist\n```\n\n1. 在项目根目录创建 nginx.conf 文件\n\n```bash\nuser  nginx;\nworker_processes  1;\nerror_log  /var/log/nginx/error.log warn;\npid        /var/run/nginx.pid;\nevents {\n  worker_connections  1024;\n}\nhttp {\n  include       /etc/nginx/mime.types;\n  default_type  application/octet-stream;\n  log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                    '$status $body_bytes_sent \"$http_referer\" '\n                    '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n  access_log  /var/log/nginx/access.log  main;\n  sendfile        on;\n  keepalive_timeout  65;\n  server {\n    listen       80;\n    server_name  localhost;\n    // 一级路由二级路由二者选其一\n    location / {\n      root   /app;\n      index  index.html;\n      try_files $uri $uri/ /index.html;  //history模式使用\n    }\n    location /datastore-dev {\n      alias   /app;\n      index  index.html;\n      try_files $uri $uri/ /index.html;  //history模式使用\n    }\n    // 接口转发配置\n    location /api-datastore-dev {\n      rewrite  /api-datastore-dev/(.*)  /$1  break;\n      proxy_pass http://10.60.87.63:7292;\n    }\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n      root   /usr/share/nginx/html;\n    }\n  }\n}\n```\n\n> 注： 二级路由要使用alias 别名\n\n1. 构建你的 Docker 镜像\n\n-t 是给镜像命名 . 是基于当前目录的Dockerfile来构建镜像，注意不要少点\n\n```bash\ndocker build . -t datastore-ui // 镜像名\n```\n\n![null](https://s2.loli.net/2024/01/08/Qy1aOTLeSNJksZi.png)\n\n查看本地镜像\n\n```bash\ndocker image ls\n```\n\n![null](https://s2.loli.net/2024/01/08/k6ALc2aHIOz7Fmw.png)\n\n1. 启动容器\n\n基于 datastore-ui 镜像启动容器，运行命令：\n\n```bash\ndocker run -d -p 8080:80 --name datastore-ui datastore-ui\n```\n\n> - docker run 基于镜像启动一个容器\n> - -p 8080:80 端口映射，将宿主的8080端口映射到容器的80端口\n> - -d 后台方式运行\n> - --name 容器名 查看 docker 进程\n\n```bash\ndocker ps\n```\n\n![null](https://s2.loli.net/2024/01/08/2rIdLDqSBw4Y8aO.png)\n\n好的，名为datastore-ui的容器成功运行，访问 http://localhost:8080/datastore-dev/home ，可以看到页面\n\n![null](https://s2.loli.net/2024/01/08/PaleZ6jJvRqS3Gm.png)\n\n1. 导出镜像到本地，上传内网使用\n   有两种方法，一种是通过容器，一种是通过镜像，其实本质是一样的\n\n- 通过容器\n\n  ```bash\n  docker ps -a\n  docker export 容器id > image.tar \n  ```\n\n  ![null](https://s2.loli.net/2024/01/08/zqHw7dY4lycDngk.png)\n\n  上面命令执行之后，我们便可以在当前目录下发现 image.tar\n\n- 通过镜像\n\n  ```bash\n  docker images\n  docker save 镜像id > image.tar\n  ```\n\n  Copy\n\n  ![null](https://s2.loli.net/2024/01/08/TeGufsArjF3Eyt9.png)\n\n## 优化——通过dokcer环境变量动态配置nginx\n\n部署时，同一份前端代码有时候会根据开发环境不同，需要切换不同的后端接口地址进行代理，而nginx配置绝大部都是相同，只有少部分需要修改，这时候我们就希望nginx配置能够从docker中获取环境变量，动态设置有差异的那部分配置。下面介绍具体实现\n\n开始前先介绍下nginx配置的目录，主要说明conf目录\n\n![null](https://s2.loli.net/2024/01/08/musKLA6QW2tow5U.png)\n![null](https://s2.loli.net/2024/01/08/UNqFXLh12KfovaS.png)\n\n好了，有了上述基础下面的操作就好理解了\n\n1. 修改nginx.conf为nginx.template或则新建一个也许，只有不跟nginx.conf重名就行，修改接口代理部分\n\n```bash\nlocation /api-datastore-dev {\n     rewrite  /api-datastore-dev/(.*)  /$1  break;\n     # 使用变量替换具体的地址  注：变量名前+$\n     proxy_pass $apisuffix;\n}\n```\n\n1. 修改Dockerfile文件\n\n   ```bash\n   FROM nginx\n   RUN mkdir /app\n   COPY --from=0 /app/dist /app\n   # 改为从模板文件复制到nginx\n   COPY nginx.template /etc/nginx\n   WORKDIR /etc/nginx\n   # 添加环境变量的写入\n   ENTRYPOINT envsubst '$apisuffix'  < nginx.template > nginx.conf && cat nginx.conf && nginx -g 'daemon off;'\n   ```\n\n   这里实现环境变量注入的核心原理是利用linux自带的envsubst指令\n   envsubst '$apisuffix' < nginx.template作用是取环境的$apisuffix的值注入到nginx.template模板里对应的位置\n   然后后半句> nginx.conf是将替换好变量后的模板内容写入到docker容器下nginx.conf文件里\n\n2. 重新打包`docker build . -t datastore-dev`\n\n3. `docker run -d -p 8080:80 --name datastore-ui -e apisuffix=http://10.60.87.63:7292 datastore-dev`运行镜像，注入环境变量\n\n4. 运行`docker logs -f datastore-ui`查看日志，之前`cat nginx.conf`在这儿生效\n\n![null](https://s2.loli.net/2024/01/08/TtuF9ID64KvqwN7.png)\n\nnginx配置已生效。\n","source":"_posts/docker部署vue项目.md","raw":"---\ntitle: docker部署vue项目\ndate: 2023-11-14 17:34:38\ntags:\n    - web\n    - nginx\n    - docker\n---\n\n\n默认已经安装了 docker，没有安装的自行安装[docker](https://www.docker.com/get-started/)\n\nDocker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，该容器包含了应用程序的代码、运行环境、依赖库、配置文件等必需的资源，通过容器就可以实现方便快速并且与平台解耦的自动化部署方式，无论你部署时的环境如何，容器中的应用程序都会运行在同一种环境下。\n\n本文以数据库为例做说明\n\n## 具体实现\n\n1. 在根目录创建`Dockerfile` 文件\n\n```bash\nFROM node:latest\nCOPY ./ /app\nWORKDIR /app\nRUN npm install && npm run build\n\nFROM nginx\nRUN mkdir /app\nCOPY --from=0 /app/dist /app\nCOPY nginx.conf /etc/nginx/nginx.conf\n```\n\n> - 自定义构建镜像的时候基于Dockerfile来构建。\n> - FROM node 命令的意思该镜像是基于 node:latest 镜像而构建的。\n> - COPY ./ /app 命令的意思是复制当前目录下文件到app目录\n> - WORKDIR /app 命令的意思是设定后续指令的工作目录为app\n> - RUN npm install && npm run build 命令的意思是运行安装依赖打包项目命令\n> - FROM nginx 命令的意思该镜像是基于 nginx:latest 镜像而构建的。没有指定版本默认最新版本\n> - RUN mkdir /app 命令的意思是运行在镜像里创建 /app 目录命令\n> - COPY --from=0 /app/dist /app 命令的意思是将前一阶段中构建的工件目录下dist文件夹下的所有文件复制到镜像中 /app 目录下。\n> - COPY nginx.conf /etc/nginx/nginx.conf 命令的意思是将当前nginx.config 复制到 etc/nginx/config.conf，用本地的 nginx.conf 配置来替换nginx镜像里的默认配置。\n\n1. 在项目根目录创建 .dockerignore 文件\n\n```bash\n**/node_modules\n**/dist\n```\n\n1. 在项目根目录创建 nginx.conf 文件\n\n```bash\nuser  nginx;\nworker_processes  1;\nerror_log  /var/log/nginx/error.log warn;\npid        /var/run/nginx.pid;\nevents {\n  worker_connections  1024;\n}\nhttp {\n  include       /etc/nginx/mime.types;\n  default_type  application/octet-stream;\n  log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                    '$status $body_bytes_sent \"$http_referer\" '\n                    '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n  access_log  /var/log/nginx/access.log  main;\n  sendfile        on;\n  keepalive_timeout  65;\n  server {\n    listen       80;\n    server_name  localhost;\n    // 一级路由二级路由二者选其一\n    location / {\n      root   /app;\n      index  index.html;\n      try_files $uri $uri/ /index.html;  //history模式使用\n    }\n    location /datastore-dev {\n      alias   /app;\n      index  index.html;\n      try_files $uri $uri/ /index.html;  //history模式使用\n    }\n    // 接口转发配置\n    location /api-datastore-dev {\n      rewrite  /api-datastore-dev/(.*)  /$1  break;\n      proxy_pass http://10.60.87.63:7292;\n    }\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n      root   /usr/share/nginx/html;\n    }\n  }\n}\n```\n\n> 注： 二级路由要使用alias 别名\n\n1. 构建你的 Docker 镜像\n\n-t 是给镜像命名 . 是基于当前目录的Dockerfile来构建镜像，注意不要少点\n\n```bash\ndocker build . -t datastore-ui // 镜像名\n```\n\n![null](https://s2.loli.net/2024/01/08/Qy1aOTLeSNJksZi.png)\n\n查看本地镜像\n\n```bash\ndocker image ls\n```\n\n![null](https://s2.loli.net/2024/01/08/k6ALc2aHIOz7Fmw.png)\n\n1. 启动容器\n\n基于 datastore-ui 镜像启动容器，运行命令：\n\n```bash\ndocker run -d -p 8080:80 --name datastore-ui datastore-ui\n```\n\n> - docker run 基于镜像启动一个容器\n> - -p 8080:80 端口映射，将宿主的8080端口映射到容器的80端口\n> - -d 后台方式运行\n> - --name 容器名 查看 docker 进程\n\n```bash\ndocker ps\n```\n\n![null](https://s2.loli.net/2024/01/08/2rIdLDqSBw4Y8aO.png)\n\n好的，名为datastore-ui的容器成功运行，访问 http://localhost:8080/datastore-dev/home ，可以看到页面\n\n![null](https://s2.loli.net/2024/01/08/PaleZ6jJvRqS3Gm.png)\n\n1. 导出镜像到本地，上传内网使用\n   有两种方法，一种是通过容器，一种是通过镜像，其实本质是一样的\n\n- 通过容器\n\n  ```bash\n  docker ps -a\n  docker export 容器id > image.tar \n  ```\n\n  ![null](https://s2.loli.net/2024/01/08/zqHw7dY4lycDngk.png)\n\n  上面命令执行之后，我们便可以在当前目录下发现 image.tar\n\n- 通过镜像\n\n  ```bash\n  docker images\n  docker save 镜像id > image.tar\n  ```\n\n  Copy\n\n  ![null](https://s2.loli.net/2024/01/08/TeGufsArjF3Eyt9.png)\n\n## 优化——通过dokcer环境变量动态配置nginx\n\n部署时，同一份前端代码有时候会根据开发环境不同，需要切换不同的后端接口地址进行代理，而nginx配置绝大部都是相同，只有少部分需要修改，这时候我们就希望nginx配置能够从docker中获取环境变量，动态设置有差异的那部分配置。下面介绍具体实现\n\n开始前先介绍下nginx配置的目录，主要说明conf目录\n\n![null](https://s2.loli.net/2024/01/08/musKLA6QW2tow5U.png)\n![null](https://s2.loli.net/2024/01/08/UNqFXLh12KfovaS.png)\n\n好了，有了上述基础下面的操作就好理解了\n\n1. 修改nginx.conf为nginx.template或则新建一个也许，只有不跟nginx.conf重名就行，修改接口代理部分\n\n```bash\nlocation /api-datastore-dev {\n     rewrite  /api-datastore-dev/(.*)  /$1  break;\n     # 使用变量替换具体的地址  注：变量名前+$\n     proxy_pass $apisuffix;\n}\n```\n\n1. 修改Dockerfile文件\n\n   ```bash\n   FROM nginx\n   RUN mkdir /app\n   COPY --from=0 /app/dist /app\n   # 改为从模板文件复制到nginx\n   COPY nginx.template /etc/nginx\n   WORKDIR /etc/nginx\n   # 添加环境变量的写入\n   ENTRYPOINT envsubst '$apisuffix'  < nginx.template > nginx.conf && cat nginx.conf && nginx -g 'daemon off;'\n   ```\n\n   这里实现环境变量注入的核心原理是利用linux自带的envsubst指令\n   envsubst '$apisuffix' < nginx.template作用是取环境的$apisuffix的值注入到nginx.template模板里对应的位置\n   然后后半句> nginx.conf是将替换好变量后的模板内容写入到docker容器下nginx.conf文件里\n\n2. 重新打包`docker build . -t datastore-dev`\n\n3. `docker run -d -p 8080:80 --name datastore-ui -e apisuffix=http://10.60.87.63:7292 datastore-dev`运行镜像，注入环境变量\n\n4. 运行`docker logs -f datastore-ui`查看日志，之前`cat nginx.conf`在这儿生效\n\n![null](https://s2.loli.net/2024/01/08/TtuF9ID64KvqwN7.png)\n\nnginx配置已生效。\n","slug":"docker部署vue项目","published":1,"updated":"2024-01-15T07:36:54.994Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrq64z6k000jsoipgk3xafho","content":"<p>默认已经安装了 docker，没有安装的自行安装<a href=\"https://www.docker.com/get-started/\">docker</a></p>\n<p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，该容器包含了应用程序的代码、运行环境、依赖库、配置文件等必需的资源，通过容器就可以实现方便快速并且与平台解耦的自动化部署方式，无论你部署时的环境如何，容器中的应用程序都会运行在同一种环境下。</p>\n<p>本文以数据库为例做说明</p>\n<h2 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h2><ol>\n<li>在根目录创建<code>Dockerfile</code> 文件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM node:latest</span><br><span class=\"line\">COPY ./ /app</span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\">RUN npm install &amp;&amp; npm run build</span><br><span class=\"line\"></span><br><span class=\"line\">FROM nginx</span><br><span class=\"line\">RUN <span class=\"built_in\">mkdir</span> /app</span><br><span class=\"line\">COPY --from=0 /app/dist /app</span><br><span class=\"line\">COPY nginx.conf /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<ul>\n<li>自定义构建镜像的时候基于Dockerfile来构建。</li>\n<li>FROM node 命令的意思该镜像是基于 node:latest 镜像而构建的。</li>\n<li>COPY .&#x2F; &#x2F;app 命令的意思是复制当前目录下文件到app目录</li>\n<li>WORKDIR &#x2F;app 命令的意思是设定后续指令的工作目录为app</li>\n<li>RUN npm install &amp;&amp; npm run build 命令的意思是运行安装依赖打包项目命令</li>\n<li>FROM nginx 命令的意思该镜像是基于 nginx:latest 镜像而构建的。没有指定版本默认最新版本</li>\n<li>RUN mkdir &#x2F;app 命令的意思是运行在镜像里创建 &#x2F;app 目录命令</li>\n<li>COPY –from&#x3D;0 &#x2F;app&#x2F;dist &#x2F;app 命令的意思是将前一阶段中构建的工件目录下dist文件夹下的所有文件复制到镜像中 &#x2F;app 目录下。</li>\n<li>COPY nginx.conf &#x2F;etc&#x2F;nginx&#x2F;nginx.conf 命令的意思是将当前nginx.config 复制到 etc&#x2F;nginx&#x2F;config.conf，用本地的 nginx.conf 配置来替换nginx镜像里的默认配置。</li>\n</ul>\n</blockquote>\n<ol>\n<li>在项目根目录创建 .dockerignore 文件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**/node_modules</span><br><span class=\"line\">**/dist</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>在项目根目录创建 nginx.conf 文件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user  nginx;</span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\">error_log  /var/log/nginx/error.log warn;</span><br><span class=\"line\">pid        /var/run/nginx.pid;</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">  worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">  include       /etc/nginx/mime.types;</span><br><span class=\"line\">  default_type  application/octet-stream;</span><br><span class=\"line\">  log_format  main  <span class=\"string\">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class=\"line\">                    <span class=\"string\">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class=\"line\">                    <span class=\"string\">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;</span><br><span class=\"line\">  access_log  /var/log/nginx/access.log  main;</span><br><span class=\"line\">  sendfile        on;</span><br><span class=\"line\">  keepalive_timeout  65;</span><br><span class=\"line\">  server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    server_name  localhost;</span><br><span class=\"line\">    // 一级路由二级路由二者选其一</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">      root   /app;</span><br><span class=\"line\">      index  index.html;</span><br><span class=\"line\">      try_files <span class=\"variable\">$uri</span> <span class=\"variable\">$uri</span>/ /index.html;  //history模式使用</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    location /datastore-dev &#123;</span><br><span class=\"line\">      <span class=\"built_in\">alias</span>   /app;</span><br><span class=\"line\">      index  index.html;</span><br><span class=\"line\">      try_files <span class=\"variable\">$uri</span> <span class=\"variable\">$uri</span>/ /index.html;  //history模式使用</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 接口转发配置</span><br><span class=\"line\">    location /api-datastore-dev &#123;</span><br><span class=\"line\">      rewrite  /api-datastore-dev/(.*)  /<span class=\"variable\">$1</span>  <span class=\"built_in\">break</span>;</span><br><span class=\"line\">      proxy_pass http://10.60.87.63:7292;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">    location = /50x.html &#123;</span><br><span class=\"line\">      root   /usr/share/nginx/html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注： 二级路由要使用alias 别名</p>\n</blockquote>\n<ol>\n<li>构建你的 Docker 镜像</li>\n</ol>\n<p>-t 是给镜像命名 . 是基于当前目录的Dockerfile来构建镜像，注意不要少点</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build . -t datastore-ui // 镜像名</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s2.loli.net/2024/01/08/Qy1aOTLeSNJksZi.png\" alt=\"null\"></p>\n<p>查看本地镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker image <span class=\"built_in\">ls</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s2.loli.net/2024/01/08/k6ALc2aHIOz7Fmw.png\" alt=\"null\"></p>\n<ol>\n<li>启动容器</li>\n</ol>\n<p>基于 datastore-ui 镜像启动容器，运行命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 8080:80 --name datastore-ui datastore-ui</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<ul>\n<li>docker run 基于镜像启动一个容器</li>\n<li>-p 8080:80 端口映射，将宿主的8080端口映射到容器的80端口</li>\n<li>-d 后台方式运行</li>\n<li>–name 容器名 查看 docker 进程</li>\n</ul>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s2.loli.net/2024/01/08/2rIdLDqSBw4Y8aO.png\" alt=\"null\"></p>\n<p>好的，名为datastore-ui的容器成功运行，访问 <a href=\"http://localhost:8080/datastore-dev/home\">http://localhost:8080/datastore-dev/home</a> ，可以看到页面</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/PaleZ6jJvRqS3Gm.png\" alt=\"null\"></p>\n<ol>\n<li>导出镜像到本地，上传内网使用<br>有两种方法，一种是通过容器，一种是通过镜像，其实本质是一样的</li>\n</ol>\n<ul>\n<li><p>通过容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a</span><br><span class=\"line\">docker <span class=\"built_in\">export</span> 容器<span class=\"built_in\">id</span> &gt; image.tar </span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s2.loli.net/2024/01/08/zqHw7dY4lycDngk.png\" alt=\"null\"></p>\n<p>上面命令执行之后，我们便可以在当前目录下发现 image.tar</p>\n</li>\n<li><p>通过镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br><span class=\"line\">docker save 镜像<span class=\"built_in\">id</span> &gt; image.tar</span><br></pre></td></tr></table></figure>\n\n<p>Copy</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/TeGufsArjF3Eyt9.png\" alt=\"null\"></p>\n</li>\n</ul>\n<h2 id=\"优化——通过dokcer环境变量动态配置nginx\"><a href=\"#优化——通过dokcer环境变量动态配置nginx\" class=\"headerlink\" title=\"优化——通过dokcer环境变量动态配置nginx\"></a>优化——通过dokcer环境变量动态配置nginx</h2><p>部署时，同一份前端代码有时候会根据开发环境不同，需要切换不同的后端接口地址进行代理，而nginx配置绝大部都是相同，只有少部分需要修改，这时候我们就希望nginx配置能够从docker中获取环境变量，动态设置有差异的那部分配置。下面介绍具体实现</p>\n<p>开始前先介绍下nginx配置的目录，主要说明conf目录</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/musKLA6QW2tow5U.png\" alt=\"null\"><br><img src=\"https://s2.loli.net/2024/01/08/UNqFXLh12KfovaS.png\" alt=\"null\"></p>\n<p>好了，有了上述基础下面的操作就好理解了</p>\n<ol>\n<li>修改nginx.conf为nginx.template或则新建一个也许，只有不跟nginx.conf重名就行，修改接口代理部分</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /api-datastore-dev &#123;</span><br><span class=\"line\">     rewrite  /api-datastore-dev/(.*)  /<span class=\"variable\">$1</span>  <span class=\"built_in\">break</span>;</span><br><span class=\"line\">     <span class=\"comment\"># 使用变量替换具体的地址  注：变量名前+$</span></span><br><span class=\"line\">     proxy_pass <span class=\"variable\">$apisuffix</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>修改Dockerfile文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM nginx</span><br><span class=\"line\">RUN <span class=\"built_in\">mkdir</span> /app</span><br><span class=\"line\">COPY --from=0 /app/dist /app</span><br><span class=\"line\"><span class=\"comment\"># 改为从模板文件复制到nginx</span></span><br><span class=\"line\">COPY nginx.template /etc/nginx</span><br><span class=\"line\">WORKDIR /etc/nginx</span><br><span class=\"line\"><span class=\"comment\"># 添加环境变量的写入</span></span><br><span class=\"line\">ENTRYPOINT envsubst <span class=\"string\">&#x27;$apisuffix&#x27;</span>  &lt; nginx.template &gt; nginx.conf &amp;&amp; <span class=\"built_in\">cat</span> nginx.conf &amp;&amp; nginx -g <span class=\"string\">&#x27;daemon off;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里实现环境变量注入的核心原理是利用linux自带的envsubst指令<br>envsubst ‘$apisuffix’ &lt; nginx.template作用是取环境的$apisuffix的值注入到nginx.template模板里对应的位置<br>然后后半句&gt; nginx.conf是将替换好变量后的模板内容写入到docker容器下nginx.conf文件里</p>\n</li>\n<li><p>重新打包<code>docker build . -t datastore-dev</code></p>\n</li>\n<li><p><code>docker run -d -p 8080:80 --name datastore-ui -e apisuffix=http://10.60.87.63:7292 datastore-dev</code>运行镜像，注入环境变量</p>\n</li>\n<li><p>运行<code>docker logs -f datastore-ui</code>查看日志，之前<code>cat nginx.conf</code>在这儿生效</p>\n</li>\n</ol>\n<p><img src=\"https://s2.loli.net/2024/01/08/TtuF9ID64KvqwN7.png\" alt=\"null\"></p>\n<p>nginx配置已生效。</p>\n","site":{"data":{}},"length":1290,"excerpt":"","more":"<p>默认已经安装了 docker，没有安装的自行安装<a href=\"https://www.docker.com/get-started/\">docker</a></p>\n<p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，该容器包含了应用程序的代码、运行环境、依赖库、配置文件等必需的资源，通过容器就可以实现方便快速并且与平台解耦的自动化部署方式，无论你部署时的环境如何，容器中的应用程序都会运行在同一种环境下。</p>\n<p>本文以数据库为例做说明</p>\n<h2 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h2><ol>\n<li>在根目录创建<code>Dockerfile</code> 文件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM node:latest</span><br><span class=\"line\">COPY ./ /app</span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\">RUN npm install &amp;&amp; npm run build</span><br><span class=\"line\"></span><br><span class=\"line\">FROM nginx</span><br><span class=\"line\">RUN <span class=\"built_in\">mkdir</span> /app</span><br><span class=\"line\">COPY --from=0 /app/dist /app</span><br><span class=\"line\">COPY nginx.conf /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<ul>\n<li>自定义构建镜像的时候基于Dockerfile来构建。</li>\n<li>FROM node 命令的意思该镜像是基于 node:latest 镜像而构建的。</li>\n<li>COPY .&#x2F; &#x2F;app 命令的意思是复制当前目录下文件到app目录</li>\n<li>WORKDIR &#x2F;app 命令的意思是设定后续指令的工作目录为app</li>\n<li>RUN npm install &amp;&amp; npm run build 命令的意思是运行安装依赖打包项目命令</li>\n<li>FROM nginx 命令的意思该镜像是基于 nginx:latest 镜像而构建的。没有指定版本默认最新版本</li>\n<li>RUN mkdir &#x2F;app 命令的意思是运行在镜像里创建 &#x2F;app 目录命令</li>\n<li>COPY –from&#x3D;0 &#x2F;app&#x2F;dist &#x2F;app 命令的意思是将前一阶段中构建的工件目录下dist文件夹下的所有文件复制到镜像中 &#x2F;app 目录下。</li>\n<li>COPY nginx.conf &#x2F;etc&#x2F;nginx&#x2F;nginx.conf 命令的意思是将当前nginx.config 复制到 etc&#x2F;nginx&#x2F;config.conf，用本地的 nginx.conf 配置来替换nginx镜像里的默认配置。</li>\n</ul>\n</blockquote>\n<ol>\n<li>在项目根目录创建 .dockerignore 文件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**/node_modules</span><br><span class=\"line\">**/dist</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>在项目根目录创建 nginx.conf 文件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user  nginx;</span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\">error_log  /var/log/nginx/error.log warn;</span><br><span class=\"line\">pid        /var/run/nginx.pid;</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">  worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">  include       /etc/nginx/mime.types;</span><br><span class=\"line\">  default_type  application/octet-stream;</span><br><span class=\"line\">  log_format  main  <span class=\"string\">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class=\"line\">                    <span class=\"string\">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class=\"line\">                    <span class=\"string\">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;</span><br><span class=\"line\">  access_log  /var/log/nginx/access.log  main;</span><br><span class=\"line\">  sendfile        on;</span><br><span class=\"line\">  keepalive_timeout  65;</span><br><span class=\"line\">  server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    server_name  localhost;</span><br><span class=\"line\">    // 一级路由二级路由二者选其一</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">      root   /app;</span><br><span class=\"line\">      index  index.html;</span><br><span class=\"line\">      try_files <span class=\"variable\">$uri</span> <span class=\"variable\">$uri</span>/ /index.html;  //history模式使用</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    location /datastore-dev &#123;</span><br><span class=\"line\">      <span class=\"built_in\">alias</span>   /app;</span><br><span class=\"line\">      index  index.html;</span><br><span class=\"line\">      try_files <span class=\"variable\">$uri</span> <span class=\"variable\">$uri</span>/ /index.html;  //history模式使用</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 接口转发配置</span><br><span class=\"line\">    location /api-datastore-dev &#123;</span><br><span class=\"line\">      rewrite  /api-datastore-dev/(.*)  /<span class=\"variable\">$1</span>  <span class=\"built_in\">break</span>;</span><br><span class=\"line\">      proxy_pass http://10.60.87.63:7292;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">    location = /50x.html &#123;</span><br><span class=\"line\">      root   /usr/share/nginx/html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注： 二级路由要使用alias 别名</p>\n</blockquote>\n<ol>\n<li>构建你的 Docker 镜像</li>\n</ol>\n<p>-t 是给镜像命名 . 是基于当前目录的Dockerfile来构建镜像，注意不要少点</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build . -t datastore-ui // 镜像名</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s2.loli.net/2024/01/08/Qy1aOTLeSNJksZi.png\" alt=\"null\"></p>\n<p>查看本地镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker image <span class=\"built_in\">ls</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s2.loli.net/2024/01/08/k6ALc2aHIOz7Fmw.png\" alt=\"null\"></p>\n<ol>\n<li>启动容器</li>\n</ol>\n<p>基于 datastore-ui 镜像启动容器，运行命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 8080:80 --name datastore-ui datastore-ui</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<ul>\n<li>docker run 基于镜像启动一个容器</li>\n<li>-p 8080:80 端口映射，将宿主的8080端口映射到容器的80端口</li>\n<li>-d 后台方式运行</li>\n<li>–name 容器名 查看 docker 进程</li>\n</ul>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s2.loli.net/2024/01/08/2rIdLDqSBw4Y8aO.png\" alt=\"null\"></p>\n<p>好的，名为datastore-ui的容器成功运行，访问 <a href=\"http://localhost:8080/datastore-dev/home\">http://localhost:8080/datastore-dev/home</a> ，可以看到页面</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/PaleZ6jJvRqS3Gm.png\" alt=\"null\"></p>\n<ol>\n<li>导出镜像到本地，上传内网使用<br>有两种方法，一种是通过容器，一种是通过镜像，其实本质是一样的</li>\n</ol>\n<ul>\n<li><p>通过容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a</span><br><span class=\"line\">docker <span class=\"built_in\">export</span> 容器<span class=\"built_in\">id</span> &gt; image.tar </span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s2.loli.net/2024/01/08/zqHw7dY4lycDngk.png\" alt=\"null\"></p>\n<p>上面命令执行之后，我们便可以在当前目录下发现 image.tar</p>\n</li>\n<li><p>通过镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br><span class=\"line\">docker save 镜像<span class=\"built_in\">id</span> &gt; image.tar</span><br></pre></td></tr></table></figure>\n\n<p>Copy</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/TeGufsArjF3Eyt9.png\" alt=\"null\"></p>\n</li>\n</ul>\n<h2 id=\"优化——通过dokcer环境变量动态配置nginx\"><a href=\"#优化——通过dokcer环境变量动态配置nginx\" class=\"headerlink\" title=\"优化——通过dokcer环境变量动态配置nginx\"></a>优化——通过dokcer环境变量动态配置nginx</h2><p>部署时，同一份前端代码有时候会根据开发环境不同，需要切换不同的后端接口地址进行代理，而nginx配置绝大部都是相同，只有少部分需要修改，这时候我们就希望nginx配置能够从docker中获取环境变量，动态设置有差异的那部分配置。下面介绍具体实现</p>\n<p>开始前先介绍下nginx配置的目录，主要说明conf目录</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/musKLA6QW2tow5U.png\" alt=\"null\"><br><img src=\"https://s2.loli.net/2024/01/08/UNqFXLh12KfovaS.png\" alt=\"null\"></p>\n<p>好了，有了上述基础下面的操作就好理解了</p>\n<ol>\n<li>修改nginx.conf为nginx.template或则新建一个也许，只有不跟nginx.conf重名就行，修改接口代理部分</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /api-datastore-dev &#123;</span><br><span class=\"line\">     rewrite  /api-datastore-dev/(.*)  /<span class=\"variable\">$1</span>  <span class=\"built_in\">break</span>;</span><br><span class=\"line\">     <span class=\"comment\"># 使用变量替换具体的地址  注：变量名前+$</span></span><br><span class=\"line\">     proxy_pass <span class=\"variable\">$apisuffix</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>修改Dockerfile文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM nginx</span><br><span class=\"line\">RUN <span class=\"built_in\">mkdir</span> /app</span><br><span class=\"line\">COPY --from=0 /app/dist /app</span><br><span class=\"line\"><span class=\"comment\"># 改为从模板文件复制到nginx</span></span><br><span class=\"line\">COPY nginx.template /etc/nginx</span><br><span class=\"line\">WORKDIR /etc/nginx</span><br><span class=\"line\"><span class=\"comment\"># 添加环境变量的写入</span></span><br><span class=\"line\">ENTRYPOINT envsubst <span class=\"string\">&#x27;$apisuffix&#x27;</span>  &lt; nginx.template &gt; nginx.conf &amp;&amp; <span class=\"built_in\">cat</span> nginx.conf &amp;&amp; nginx -g <span class=\"string\">&#x27;daemon off;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里实现环境变量注入的核心原理是利用linux自带的envsubst指令<br>envsubst ‘$apisuffix’ &lt; nginx.template作用是取环境的$apisuffix的值注入到nginx.template模板里对应的位置<br>然后后半句&gt; nginx.conf是将替换好变量后的模板内容写入到docker容器下nginx.conf文件里</p>\n</li>\n<li><p>重新打包<code>docker build . -t datastore-dev</code></p>\n</li>\n<li><p><code>docker run -d -p 8080:80 --name datastore-ui -e apisuffix=http://10.60.87.63:7292 datastore-dev</code>运行镜像，注入环境变量</p>\n</li>\n<li><p>运行<code>docker logs -f datastore-ui</code>查看日志，之前<code>cat nginx.conf</code>在这儿生效</p>\n</li>\n</ol>\n<p><img src=\"https://s2.loli.net/2024/01/08/TtuF9ID64KvqwN7.png\" alt=\"null\"></p>\n<p>nginx配置已生效。</p>\n"},{"title":"前端代码规范1.0","date":"2022-03-01T08:28:10.000Z","_content":"\n## (一)命名规范\n\n#### 1.1.1 项目命名\n\n全部采用小写方式， 以中划线分隔。\n正例：mall-management-system\n反例：mall_management-system / mallManagementSystem\n\n#### 1.1.2 目录命名\n\n全部采用小写方式， 以中划线分隔，有复数结构时，要采用复数命名法， 缩写不用复数\n正例： scripts / styles / components / images / utils / layouts / demo-styles / demo-scripts / img / doc\n反例： script / style / demo_scripts / demoStyles / imgs / docs\n\n【特殊】VUE 的项目中的 components 中的组件目录，使用 kebab-case 命名\n正例： head-search / page-loading / authorized / notice-icon\n反例： HeadSearch / PageLoading\n\n【特殊】VUE 的项目中的除 components 组件目录外的所有目录也使用 kebab-case 命名\n正例： page-one / shopping-car / user-management\n反例： ShoppingCar / UserManagement\n\n#### 1.1.3 JS、CSS、SCSS、HTML、PNG 文件命名\n\n全部采用小写方式， 以中划线分隔\n正例： render-dom.js / signup.css / index.html / company-logo.png\n反例： renderDom.js / UserManagement.html\n\n#### 1.1.4 命名严谨性\n\n代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。 说明：正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，即使纯拼音命名方式也要避免采用\n正例：henan / luoyang / rmb 等国际通用的名称，可视同英文。\n反例：DaZhePromotion [打折] / getPingfenByName() [评分] / int 某变量 = 3\n\n杜绝完全不规范的缩写，避免望文不知义：\n反例：AbstractClass“缩写”命名成 AbsClass；condition“缩写”命名成 condi，此类随意缩写严重降低了代码的可阅读性。\n\n##  (二)HTML规范\n\n####  1.2.1 HTML 类型\n\n推荐使用 HTML5 的文档类型申明\n```\n<!DOCTYPE html>\n```\n\n####  1.2.2 缩进\n\n统一使用四个空格进行代码缩进，使得各编辑器表现一致\n1.2.3 语义化标签\n● HTML5 中新增很多语义化标签，所以优先使用语义化标签，避免一个页面都是 div 或者 p 标签\n● 所有具有开始标签和结束标签的元素都要写上起止标签，某些允许省略开始标签或和束标签的元素亦都要写上\n● 空元素标签都不加 “/” 字符\n\n## (三) CSS 规范\n\n#### 1.3.1 选择器\n\n* 尽量少用通用选择器 \n* 不使用 ID 选择器\n* 不使用无具体语义定义的标签选择器\n* 避免使用标签名\n\n#### 1.3.2 尽量使用缩写属性\n\n不推荐：\n\n```\nborder-top-style: none;\nfont-family: palatino, georgia, serif;\nfont-size: 100%;\nline-height: 1.6;\npadding-bottom: 2em;\npadding-left: 1em;\npadding-right: 1em;\npadding-top: 0;\n```\n\n推荐：\n\n```\nborder-top: 0;\nfont: 100%/1.6 palatino, georgia, serif;\npadding: 0 1em 2em;\n```\n\n#### 1.3.3 每个选择器及属性独占一行\n\n不推荐：\n\n```\nbutton{\n  width:100px;height:50px;color:#fff;background:#00a0e9;\n}\n```\n\n推荐：\n\n```\nbutton{\n  width:100px;\n  height:50px;\n  color:#fff;\n  background:#00a0e9;\n}\n```\n\n#### 1.3.6 省略0后面的单位\n\n不推荐：\n\n```\ndiv{\n  padding-bottom: 0px;\n  margin: 0em;\n}\n```\n\n推荐：\n\n```\ndiv{\n  padding-bottom: 0;\n  margin: 0;\n}\n```\n\n#### 1.3.7 属性书写顺序\n\n建议遵循以下顺序：\n1. 布局定位属性：display / position / float / clear / visibility / overflow\n2. 自身属性：width / height / margin / padding / border / background\n3. 文本属性：color / font / text-decoration / text-align / vertical-align / white- space / break-word\n4. 其他属性（CSS3）：content / cursor / border-radius / box-shadow / text-shadow / background:linear-gradient …\n\n\n#### 1.3.8 CSS3浏览器私有前缀写法\n\nCSS3 浏览器私有前缀在前，标准前缀在后\n\n```\n.test {\n    -webkit-border-radius: 10px;\n    -moz-border-radius: 10px;\n    -o-border-radius: 10px;\n    -ms-border-radius: 10px;\n    border-radius: 10px;\n} \n```\n\n## (四) Javascript 规范\n\n#### 1.4.1 命名\n\n1. 采用小写驼峰命名 lowerCamelCase，代码中的命名均不能以下划线，也不能以下划线或美元符号结束\n      反例： _name / name_ / name$\n2. 方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格，必须遵从驼峰形式\n      其中 method 方法命名必须是 动词 或者 动词+名词 形式\n      正例：saveShopCarData /openShopCarInfoDialog\n      反例：save / open / show / go\n3. 常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长\n      正例： MAX_STOCK_COUNT\n      反例： MAX_COUNT\n\n\n#### 1.4.2 字符串\n\n* 统一使用单引号(')，不使用双引号(\")。这在创建 HTML 字符串非常有好处\n* 程序化生成字符串时，请使用模板字符串\n* 不要对字符串使用eval()，会导致太多漏洞\n* 不要在字符串中使用不必要的转义字符\n  \n```\n// good\nlet str = 'foo';\nlet testDiv = '<div id=\"test\"></div>';\n\nconst str = `ab${test}`\n\nconst foo = '\\'this\\' is \"quoted\"'\nconst foo = `my name is '${name}'`\n\n// bad\nlet str = 'foo';\nlet testDiv = \"<div id='test'></div>\";\n\nconst str = 'a' + 'b' + test\n\nconst foo = '\\'this\\' \\i\\s \\\"quoted\\\"'\n```\n\n#### 1.4.3 对象声明\n\n* 请使用字面量值创建对象和数组\n* 只对非法标识符的属性使用引号\n  \n```\n// bad\nconst a = new Object{}\n\nconst bad = {\n  'foo': 3,\n  'bar': 4,\n  'data-blah': 5\n}\n\n// good\nconst a = {}\n\nconst good = {\n  foo: 3,\n  bar: 4,\n  'data-blah': 5\n}\n```\n\n\n#### 1.4.4 比较运算符&相等\n\n* 使用 === 和 !==而非 ==和!=\n* 条件声明例如if 会用类型转化这个抽象方法将表达式转成布尔值并遵循如下规则\n  * object 等于true\n  * undefined等于false\n  * null等于false\n  * number在+0, -0, 或者NaN 的情况下等于false, 其他情况是true\n  * string 为''时等于false, 否则是true\n  \n#### 1.4.5 条件判断和循环最多三层\n\n条件判断能使用三目运算符和逻辑运算符解决的，就不要使用条件判断，但是谨记不要写太长的三目运算符。如果超过 3 层请抽成函数，并写清楚注释\n\n#### 1.4.6 优先使用 ES6,ES7\n\n必须优先使用 ES6,ES7 中新增的语法糖和函数。这将简化你的程序，并让你的代码更加灵活和可复用。\n比如箭头函数、await/async，解构，let，for…of 等等\n\n#### 1.4.7 禁止使用eval()和with()\n\n## (五) Vue使用规范\n参考官方指导（https://cn.vuejs.org/v2/style-guide/）","source":"_posts/前端代码规范1.0.md","raw":"---\ntitle: 前端代码规范1.0\ndate: 2022-03-01 16:28:10\ntags:\n    - web\n---\n\n## (一)命名规范\n\n#### 1.1.1 项目命名\n\n全部采用小写方式， 以中划线分隔。\n正例：mall-management-system\n反例：mall_management-system / mallManagementSystem\n\n#### 1.1.2 目录命名\n\n全部采用小写方式， 以中划线分隔，有复数结构时，要采用复数命名法， 缩写不用复数\n正例： scripts / styles / components / images / utils / layouts / demo-styles / demo-scripts / img / doc\n反例： script / style / demo_scripts / demoStyles / imgs / docs\n\n【特殊】VUE 的项目中的 components 中的组件目录，使用 kebab-case 命名\n正例： head-search / page-loading / authorized / notice-icon\n反例： HeadSearch / PageLoading\n\n【特殊】VUE 的项目中的除 components 组件目录外的所有目录也使用 kebab-case 命名\n正例： page-one / shopping-car / user-management\n反例： ShoppingCar / UserManagement\n\n#### 1.1.3 JS、CSS、SCSS、HTML、PNG 文件命名\n\n全部采用小写方式， 以中划线分隔\n正例： render-dom.js / signup.css / index.html / company-logo.png\n反例： renderDom.js / UserManagement.html\n\n#### 1.1.4 命名严谨性\n\n代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。 说明：正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，即使纯拼音命名方式也要避免采用\n正例：henan / luoyang / rmb 等国际通用的名称，可视同英文。\n反例：DaZhePromotion [打折] / getPingfenByName() [评分] / int 某变量 = 3\n\n杜绝完全不规范的缩写，避免望文不知义：\n反例：AbstractClass“缩写”命名成 AbsClass；condition“缩写”命名成 condi，此类随意缩写严重降低了代码的可阅读性。\n\n##  (二)HTML规范\n\n####  1.2.1 HTML 类型\n\n推荐使用 HTML5 的文档类型申明\n```\n<!DOCTYPE html>\n```\n\n####  1.2.2 缩进\n\n统一使用四个空格进行代码缩进，使得各编辑器表现一致\n1.2.3 语义化标签\n● HTML5 中新增很多语义化标签，所以优先使用语义化标签，避免一个页面都是 div 或者 p 标签\n● 所有具有开始标签和结束标签的元素都要写上起止标签，某些允许省略开始标签或和束标签的元素亦都要写上\n● 空元素标签都不加 “/” 字符\n\n## (三) CSS 规范\n\n#### 1.3.1 选择器\n\n* 尽量少用通用选择器 \n* 不使用 ID 选择器\n* 不使用无具体语义定义的标签选择器\n* 避免使用标签名\n\n#### 1.3.2 尽量使用缩写属性\n\n不推荐：\n\n```\nborder-top-style: none;\nfont-family: palatino, georgia, serif;\nfont-size: 100%;\nline-height: 1.6;\npadding-bottom: 2em;\npadding-left: 1em;\npadding-right: 1em;\npadding-top: 0;\n```\n\n推荐：\n\n```\nborder-top: 0;\nfont: 100%/1.6 palatino, georgia, serif;\npadding: 0 1em 2em;\n```\n\n#### 1.3.3 每个选择器及属性独占一行\n\n不推荐：\n\n```\nbutton{\n  width:100px;height:50px;color:#fff;background:#00a0e9;\n}\n```\n\n推荐：\n\n```\nbutton{\n  width:100px;\n  height:50px;\n  color:#fff;\n  background:#00a0e9;\n}\n```\n\n#### 1.3.6 省略0后面的单位\n\n不推荐：\n\n```\ndiv{\n  padding-bottom: 0px;\n  margin: 0em;\n}\n```\n\n推荐：\n\n```\ndiv{\n  padding-bottom: 0;\n  margin: 0;\n}\n```\n\n#### 1.3.7 属性书写顺序\n\n建议遵循以下顺序：\n1. 布局定位属性：display / position / float / clear / visibility / overflow\n2. 自身属性：width / height / margin / padding / border / background\n3. 文本属性：color / font / text-decoration / text-align / vertical-align / white- space / break-word\n4. 其他属性（CSS3）：content / cursor / border-radius / box-shadow / text-shadow / background:linear-gradient …\n\n\n#### 1.3.8 CSS3浏览器私有前缀写法\n\nCSS3 浏览器私有前缀在前，标准前缀在后\n\n```\n.test {\n    -webkit-border-radius: 10px;\n    -moz-border-radius: 10px;\n    -o-border-radius: 10px;\n    -ms-border-radius: 10px;\n    border-radius: 10px;\n} \n```\n\n## (四) Javascript 规范\n\n#### 1.4.1 命名\n\n1. 采用小写驼峰命名 lowerCamelCase，代码中的命名均不能以下划线，也不能以下划线或美元符号结束\n      反例： _name / name_ / name$\n2. 方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格，必须遵从驼峰形式\n      其中 method 方法命名必须是 动词 或者 动词+名词 形式\n      正例：saveShopCarData /openShopCarInfoDialog\n      反例：save / open / show / go\n3. 常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长\n      正例： MAX_STOCK_COUNT\n      反例： MAX_COUNT\n\n\n#### 1.4.2 字符串\n\n* 统一使用单引号(')，不使用双引号(\")。这在创建 HTML 字符串非常有好处\n* 程序化生成字符串时，请使用模板字符串\n* 不要对字符串使用eval()，会导致太多漏洞\n* 不要在字符串中使用不必要的转义字符\n  \n```\n// good\nlet str = 'foo';\nlet testDiv = '<div id=\"test\"></div>';\n\nconst str = `ab${test}`\n\nconst foo = '\\'this\\' is \"quoted\"'\nconst foo = `my name is '${name}'`\n\n// bad\nlet str = 'foo';\nlet testDiv = \"<div id='test'></div>\";\n\nconst str = 'a' + 'b' + test\n\nconst foo = '\\'this\\' \\i\\s \\\"quoted\\\"'\n```\n\n#### 1.4.3 对象声明\n\n* 请使用字面量值创建对象和数组\n* 只对非法标识符的属性使用引号\n  \n```\n// bad\nconst a = new Object{}\n\nconst bad = {\n  'foo': 3,\n  'bar': 4,\n  'data-blah': 5\n}\n\n// good\nconst a = {}\n\nconst good = {\n  foo: 3,\n  bar: 4,\n  'data-blah': 5\n}\n```\n\n\n#### 1.4.4 比较运算符&相等\n\n* 使用 === 和 !==而非 ==和!=\n* 条件声明例如if 会用类型转化这个抽象方法将表达式转成布尔值并遵循如下规则\n  * object 等于true\n  * undefined等于false\n  * null等于false\n  * number在+0, -0, 或者NaN 的情况下等于false, 其他情况是true\n  * string 为''时等于false, 否则是true\n  \n#### 1.4.5 条件判断和循环最多三层\n\n条件判断能使用三目运算符和逻辑运算符解决的，就不要使用条件判断，但是谨记不要写太长的三目运算符。如果超过 3 层请抽成函数，并写清楚注释\n\n#### 1.4.6 优先使用 ES6,ES7\n\n必须优先使用 ES6,ES7 中新增的语法糖和函数。这将简化你的程序，并让你的代码更加灵活和可复用。\n比如箭头函数、await/async，解构，let，for…of 等等\n\n#### 1.4.7 禁止使用eval()和with()\n\n## (五) Vue使用规范\n参考官方指导（https://cn.vuejs.org/v2/style-guide/）","slug":"前端代码规范1.0","published":1,"updated":"2024-01-15T08:11:22.996Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrq64z6l000lsoip2d7qg4wp","content":"<h2 id=\"一-命名规范\"><a href=\"#一-命名规范\" class=\"headerlink\" title=\"(一)命名规范\"></a>(一)命名规范</h2><h4 id=\"1-1-1-项目命名\"><a href=\"#1-1-1-项目命名\" class=\"headerlink\" title=\"1.1.1 项目命名\"></a>1.1.1 项目命名</h4><p>全部采用小写方式， 以中划线分隔。<br>正例：mall-management-system<br>反例：mall_management-system &#x2F; mallManagementSystem</p>\n<h4 id=\"1-1-2-目录命名\"><a href=\"#1-1-2-目录命名\" class=\"headerlink\" title=\"1.1.2 目录命名\"></a>1.1.2 目录命名</h4><p>全部采用小写方式， 以中划线分隔，有复数结构时，要采用复数命名法， 缩写不用复数<br>正例： scripts &#x2F; styles &#x2F; components &#x2F; images &#x2F; utils &#x2F; layouts &#x2F; demo-styles &#x2F; demo-scripts &#x2F; img &#x2F; doc<br>反例： script &#x2F; style &#x2F; demo_scripts &#x2F; demoStyles &#x2F; imgs &#x2F; docs</p>\n<p>【特殊】VUE 的项目中的 components 中的组件目录，使用 kebab-case 命名<br>正例： head-search &#x2F; page-loading &#x2F; authorized &#x2F; notice-icon<br>反例： HeadSearch &#x2F; PageLoading</p>\n<p>【特殊】VUE 的项目中的除 components 组件目录外的所有目录也使用 kebab-case 命名<br>正例： page-one &#x2F; shopping-car &#x2F; user-management<br>反例： ShoppingCar &#x2F; UserManagement</p>\n<h4 id=\"1-1-3-JS、CSS、SCSS、HTML、PNG-文件命名\"><a href=\"#1-1-3-JS、CSS、SCSS、HTML、PNG-文件命名\" class=\"headerlink\" title=\"1.1.3 JS、CSS、SCSS、HTML、PNG 文件命名\"></a>1.1.3 JS、CSS、SCSS、HTML、PNG 文件命名</h4><p>全部采用小写方式， 以中划线分隔<br>正例： render-dom.js &#x2F; signup.css &#x2F; index.html &#x2F; company-logo.png<br>反例： renderDom.js &#x2F; UserManagement.html</p>\n<h4 id=\"1-1-4-命名严谨性\"><a href=\"#1-1-4-命名严谨性\" class=\"headerlink\" title=\"1.1.4 命名严谨性\"></a>1.1.4 命名严谨性</h4><p>代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。 说明：正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，即使纯拼音命名方式也要避免采用<br>正例：henan &#x2F; luoyang &#x2F; rmb 等国际通用的名称，可视同英文。<br>反例：DaZhePromotion [打折] &#x2F; getPingfenByName() [评分] &#x2F; int 某变量 &#x3D; 3</p>\n<p>杜绝完全不规范的缩写，避免望文不知义：<br>反例：AbstractClass“缩写”命名成 AbsClass；condition“缩写”命名成 condi，此类随意缩写严重降低了代码的可阅读性。</p>\n<h2 id=\"二-HTML规范\"><a href=\"#二-HTML规范\" class=\"headerlink\" title=\"(二)HTML规范\"></a>(二)HTML规范</h2><h4 id=\"1-2-1-HTML-类型\"><a href=\"#1-2-1-HTML-类型\" class=\"headerlink\" title=\"1.2.1 HTML 类型\"></a>1.2.1 HTML 类型</h4><p>推荐使用 HTML5 的文档类型申明</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-2-2-缩进\"><a href=\"#1-2-2-缩进\" class=\"headerlink\" title=\"1.2.2 缩进\"></a>1.2.2 缩进</h4><p>统一使用四个空格进行代码缩进，使得各编辑器表现一致<br>1.2.3 语义化标签<br>● HTML5 中新增很多语义化标签，所以优先使用语义化标签，避免一个页面都是 div 或者 p 标签<br>● 所有具有开始标签和结束标签的元素都要写上起止标签，某些允许省略开始标签或和束标签的元素亦都要写上<br>● 空元素标签都不加 “&#x2F;” 字符</p>\n<h2 id=\"三-CSS-规范\"><a href=\"#三-CSS-规范\" class=\"headerlink\" title=\"(三) CSS 规范\"></a>(三) CSS 规范</h2><h4 id=\"1-3-1-选择器\"><a href=\"#1-3-1-选择器\" class=\"headerlink\" title=\"1.3.1 选择器\"></a>1.3.1 选择器</h4><ul>\n<li>尽量少用通用选择器 </li>\n<li>不使用 ID 选择器</li>\n<li>不使用无具体语义定义的标签选择器</li>\n<li>避免使用标签名</li>\n</ul>\n<h4 id=\"1-3-2-尽量使用缩写属性\"><a href=\"#1-3-2-尽量使用缩写属性\" class=\"headerlink\" title=\"1.3.2 尽量使用缩写属性\"></a>1.3.2 尽量使用缩写属性</h4><p>不推荐：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">border-top-style: none;</span><br><span class=\"line\">font-family: palatino, georgia, serif;</span><br><span class=\"line\">font-size: 100%;</span><br><span class=\"line\">line-height: 1.6;</span><br><span class=\"line\">padding-bottom: 2em;</span><br><span class=\"line\">padding-left: 1em;</span><br><span class=\"line\">padding-right: 1em;</span><br><span class=\"line\">padding-top: 0;</span><br></pre></td></tr></table></figure>\n\n<p>推荐：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">border-top: 0;</span><br><span class=\"line\">font: 100%/1.6 palatino, georgia, serif;</span><br><span class=\"line\">padding: 0 1em 2em;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-3-每个选择器及属性独占一行\"><a href=\"#1-3-3-每个选择器及属性独占一行\" class=\"headerlink\" title=\"1.3.3 每个选择器及属性独占一行\"></a>1.3.3 每个选择器及属性独占一行</h4><p>不推荐：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button&#123;</span><br><span class=\"line\">  width:100px;height:50px;color:#fff;background:#00a0e9;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>推荐：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button&#123;</span><br><span class=\"line\">  width:100px;</span><br><span class=\"line\">  height:50px;</span><br><span class=\"line\">  color:#fff;</span><br><span class=\"line\">  background:#00a0e9;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-6-省略0后面的单位\"><a href=\"#1-3-6-省略0后面的单位\" class=\"headerlink\" title=\"1.3.6 省略0后面的单位\"></a>1.3.6 省略0后面的单位</h4><p>不推荐：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div&#123;</span><br><span class=\"line\">  padding-bottom: 0px;</span><br><span class=\"line\">  margin: 0em;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>推荐：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div&#123;</span><br><span class=\"line\">  padding-bottom: 0;</span><br><span class=\"line\">  margin: 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-7-属性书写顺序\"><a href=\"#1-3-7-属性书写顺序\" class=\"headerlink\" title=\"1.3.7 属性书写顺序\"></a>1.3.7 属性书写顺序</h4><p>建议遵循以下顺序：</p>\n<ol>\n<li>布局定位属性：display &#x2F; position &#x2F; float &#x2F; clear &#x2F; visibility &#x2F; overflow</li>\n<li>自身属性：width &#x2F; height &#x2F; margin &#x2F; padding &#x2F; border &#x2F; background</li>\n<li>文本属性：color &#x2F; font &#x2F; text-decoration &#x2F; text-align &#x2F; vertical-align &#x2F; white- space &#x2F; break-word</li>\n<li>其他属性（CSS3）：content &#x2F; cursor &#x2F; border-radius &#x2F; box-shadow &#x2F; text-shadow &#x2F; background:linear-gradient …</li>\n</ol>\n<h4 id=\"1-3-8-CSS3浏览器私有前缀写法\"><a href=\"#1-3-8-CSS3浏览器私有前缀写法\" class=\"headerlink\" title=\"1.3.8 CSS3浏览器私有前缀写法\"></a>1.3.8 CSS3浏览器私有前缀写法</h4><p>CSS3 浏览器私有前缀在前，标准前缀在后</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.test &#123;</span><br><span class=\"line\">    -webkit-border-radius: 10px;</span><br><span class=\"line\">    -moz-border-radius: 10px;</span><br><span class=\"line\">    -o-border-radius: 10px;</span><br><span class=\"line\">    -ms-border-radius: 10px;</span><br><span class=\"line\">    border-radius: 10px;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四-Javascript-规范\"><a href=\"#四-Javascript-规范\" class=\"headerlink\" title=\"(四) Javascript 规范\"></a>(四) Javascript 规范</h2><h4 id=\"1-4-1-命名\"><a href=\"#1-4-1-命名\" class=\"headerlink\" title=\"1.4.1 命名\"></a>1.4.1 命名</h4><ol>\n<li>采用小写驼峰命名 lowerCamelCase，代码中的命名均不能以下划线，也不能以下划线或美元符号结束<br>   反例： <em>name &#x2F; name</em> &#x2F; name$</li>\n<li>方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格，必须遵从驼峰形式<br>   其中 method 方法命名必须是 动词 或者 动词+名词 形式<br>   正例：saveShopCarData &#x2F;openShopCarInfoDialog<br>   反例：save &#x2F; open &#x2F; show &#x2F; go</li>\n<li>常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长<br>   正例： MAX_STOCK_COUNT<br>   反例： MAX_COUNT</li>\n</ol>\n<h4 id=\"1-4-2-字符串\"><a href=\"#1-4-2-字符串\" class=\"headerlink\" title=\"1.4.2 字符串\"></a>1.4.2 字符串</h4><ul>\n<li>统一使用单引号(‘)，不使用双引号(“)。这在创建 HTML 字符串非常有好处</li>\n<li>程序化生成字符串时，请使用模板字符串</li>\n<li>不要对字符串使用eval()，会导致太多漏洞</li>\n<li>不要在字符串中使用不必要的转义字符</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// good</span><br><span class=\"line\">let str = &#x27;foo&#x27;;</span><br><span class=\"line\">let testDiv = &#x27;&lt;div id=&quot;test&quot;&gt;&lt;/div&gt;&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">const str = `ab$&#123;test&#125;`</span><br><span class=\"line\"></span><br><span class=\"line\">const foo = &#x27;\\&#x27;this\\&#x27; is &quot;quoted&quot;&#x27;</span><br><span class=\"line\">const foo = `my name is &#x27;$&#123;name&#125;&#x27;`</span><br><span class=\"line\"></span><br><span class=\"line\">// bad</span><br><span class=\"line\">let str = &#x27;foo&#x27;;</span><br><span class=\"line\">let testDiv = &quot;&lt;div id=&#x27;test&#x27;&gt;&lt;/div&gt;&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">const str = &#x27;a&#x27; + &#x27;b&#x27; + test</span><br><span class=\"line\"></span><br><span class=\"line\">const foo = &#x27;\\&#x27;this\\&#x27; \\i\\s \\&quot;quoted\\&quot;&#x27;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-4-3-对象声明\"><a href=\"#1-4-3-对象声明\" class=\"headerlink\" title=\"1.4.3 对象声明\"></a>1.4.3 对象声明</h4><ul>\n<li>请使用字面量值创建对象和数组</li>\n<li>只对非法标识符的属性使用引号</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">const a = new Object&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const bad = &#123;</span><br><span class=\"line\">  &#x27;foo&#x27;: 3,</span><br><span class=\"line\">  &#x27;bar&#x27;: 4,</span><br><span class=\"line\">  &#x27;data-blah&#x27;: 5</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">const a = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const good = &#123;</span><br><span class=\"line\">  foo: 3,</span><br><span class=\"line\">  bar: 4,</span><br><span class=\"line\">  &#x27;data-blah&#x27;: 5</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"1-4-4-比较运算符-相等\"><a href=\"#1-4-4-比较运算符-相等\" class=\"headerlink\" title=\"1.4.4 比较运算符&amp;相等\"></a>1.4.4 比较运算符&amp;相等</h4><ul>\n<li>使用 &#x3D;&#x3D;&#x3D; 和 !&#x3D;&#x3D;而非 &#x3D;&#x3D;和!&#x3D;</li>\n<li>条件声明例如if 会用类型转化这个抽象方法将表达式转成布尔值并遵循如下规则<ul>\n<li>object 等于true</li>\n<li>undefined等于false</li>\n<li>null等于false</li>\n<li>number在+0, -0, 或者NaN 的情况下等于false, 其他情况是true</li>\n<li>string 为’’时等于false, 否则是true</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"1-4-5-条件判断和循环最多三层\"><a href=\"#1-4-5-条件判断和循环最多三层\" class=\"headerlink\" title=\"1.4.5 条件判断和循环最多三层\"></a>1.4.5 条件判断和循环最多三层</h4><p>条件判断能使用三目运算符和逻辑运算符解决的，就不要使用条件判断，但是谨记不要写太长的三目运算符。如果超过 3 层请抽成函数，并写清楚注释</p>\n<h4 id=\"1-4-6-优先使用-ES6-ES7\"><a href=\"#1-4-6-优先使用-ES6-ES7\" class=\"headerlink\" title=\"1.4.6 优先使用 ES6,ES7\"></a>1.4.6 优先使用 ES6,ES7</h4><p>必须优先使用 ES6,ES7 中新增的语法糖和函数。这将简化你的程序，并让你的代码更加灵活和可复用。<br>比如箭头函数、await&#x2F;async，解构，let，for…of 等等</p>\n<h4 id=\"1-4-7-禁止使用eval-和with\"><a href=\"#1-4-7-禁止使用eval-和with\" class=\"headerlink\" title=\"1.4.7 禁止使用eval()和with()\"></a>1.4.7 禁止使用eval()和with()</h4><h2 id=\"五-Vue使用规范\"><a href=\"#五-Vue使用规范\" class=\"headerlink\" title=\"(五) Vue使用规范\"></a>(五) Vue使用规范</h2><p>参考官方指导（<a href=\"https://cn.vuejs.org/v2/style-guide/%EF%BC%89\">https://cn.vuejs.org/v2/style-guide/）</a></p>\n","site":{"data":{}},"length":1385,"excerpt":"","more":"<h2 id=\"一-命名规范\"><a href=\"#一-命名规范\" class=\"headerlink\" title=\"(一)命名规范\"></a>(一)命名规范</h2><h4 id=\"1-1-1-项目命名\"><a href=\"#1-1-1-项目命名\" class=\"headerlink\" title=\"1.1.1 项目命名\"></a>1.1.1 项目命名</h4><p>全部采用小写方式， 以中划线分隔。<br>正例：mall-management-system<br>反例：mall_management-system &#x2F; mallManagementSystem</p>\n<h4 id=\"1-1-2-目录命名\"><a href=\"#1-1-2-目录命名\" class=\"headerlink\" title=\"1.1.2 目录命名\"></a>1.1.2 目录命名</h4><p>全部采用小写方式， 以中划线分隔，有复数结构时，要采用复数命名法， 缩写不用复数<br>正例： scripts &#x2F; styles &#x2F; components &#x2F; images &#x2F; utils &#x2F; layouts &#x2F; demo-styles &#x2F; demo-scripts &#x2F; img &#x2F; doc<br>反例： script &#x2F; style &#x2F; demo_scripts &#x2F; demoStyles &#x2F; imgs &#x2F; docs</p>\n<p>【特殊】VUE 的项目中的 components 中的组件目录，使用 kebab-case 命名<br>正例： head-search &#x2F; page-loading &#x2F; authorized &#x2F; notice-icon<br>反例： HeadSearch &#x2F; PageLoading</p>\n<p>【特殊】VUE 的项目中的除 components 组件目录外的所有目录也使用 kebab-case 命名<br>正例： page-one &#x2F; shopping-car &#x2F; user-management<br>反例： ShoppingCar &#x2F; UserManagement</p>\n<h4 id=\"1-1-3-JS、CSS、SCSS、HTML、PNG-文件命名\"><a href=\"#1-1-3-JS、CSS、SCSS、HTML、PNG-文件命名\" class=\"headerlink\" title=\"1.1.3 JS、CSS、SCSS、HTML、PNG 文件命名\"></a>1.1.3 JS、CSS、SCSS、HTML、PNG 文件命名</h4><p>全部采用小写方式， 以中划线分隔<br>正例： render-dom.js &#x2F; signup.css &#x2F; index.html &#x2F; company-logo.png<br>反例： renderDom.js &#x2F; UserManagement.html</p>\n<h4 id=\"1-1-4-命名严谨性\"><a href=\"#1-1-4-命名严谨性\" class=\"headerlink\" title=\"1.1.4 命名严谨性\"></a>1.1.4 命名严谨性</h4><p>代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。 说明：正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，即使纯拼音命名方式也要避免采用<br>正例：henan &#x2F; luoyang &#x2F; rmb 等国际通用的名称，可视同英文。<br>反例：DaZhePromotion [打折] &#x2F; getPingfenByName() [评分] &#x2F; int 某变量 &#x3D; 3</p>\n<p>杜绝完全不规范的缩写，避免望文不知义：<br>反例：AbstractClass“缩写”命名成 AbsClass；condition“缩写”命名成 condi，此类随意缩写严重降低了代码的可阅读性。</p>\n<h2 id=\"二-HTML规范\"><a href=\"#二-HTML规范\" class=\"headerlink\" title=\"(二)HTML规范\"></a>(二)HTML规范</h2><h4 id=\"1-2-1-HTML-类型\"><a href=\"#1-2-1-HTML-类型\" class=\"headerlink\" title=\"1.2.1 HTML 类型\"></a>1.2.1 HTML 类型</h4><p>推荐使用 HTML5 的文档类型申明</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-2-2-缩进\"><a href=\"#1-2-2-缩进\" class=\"headerlink\" title=\"1.2.2 缩进\"></a>1.2.2 缩进</h4><p>统一使用四个空格进行代码缩进，使得各编辑器表现一致<br>1.2.3 语义化标签<br>● HTML5 中新增很多语义化标签，所以优先使用语义化标签，避免一个页面都是 div 或者 p 标签<br>● 所有具有开始标签和结束标签的元素都要写上起止标签，某些允许省略开始标签或和束标签的元素亦都要写上<br>● 空元素标签都不加 “&#x2F;” 字符</p>\n<h2 id=\"三-CSS-规范\"><a href=\"#三-CSS-规范\" class=\"headerlink\" title=\"(三) CSS 规范\"></a>(三) CSS 规范</h2><h4 id=\"1-3-1-选择器\"><a href=\"#1-3-1-选择器\" class=\"headerlink\" title=\"1.3.1 选择器\"></a>1.3.1 选择器</h4><ul>\n<li>尽量少用通用选择器 </li>\n<li>不使用 ID 选择器</li>\n<li>不使用无具体语义定义的标签选择器</li>\n<li>避免使用标签名</li>\n</ul>\n<h4 id=\"1-3-2-尽量使用缩写属性\"><a href=\"#1-3-2-尽量使用缩写属性\" class=\"headerlink\" title=\"1.3.2 尽量使用缩写属性\"></a>1.3.2 尽量使用缩写属性</h4><p>不推荐：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">border-top-style: none;</span><br><span class=\"line\">font-family: palatino, georgia, serif;</span><br><span class=\"line\">font-size: 100%;</span><br><span class=\"line\">line-height: 1.6;</span><br><span class=\"line\">padding-bottom: 2em;</span><br><span class=\"line\">padding-left: 1em;</span><br><span class=\"line\">padding-right: 1em;</span><br><span class=\"line\">padding-top: 0;</span><br></pre></td></tr></table></figure>\n\n<p>推荐：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">border-top: 0;</span><br><span class=\"line\">font: 100%/1.6 palatino, georgia, serif;</span><br><span class=\"line\">padding: 0 1em 2em;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-3-每个选择器及属性独占一行\"><a href=\"#1-3-3-每个选择器及属性独占一行\" class=\"headerlink\" title=\"1.3.3 每个选择器及属性独占一行\"></a>1.3.3 每个选择器及属性独占一行</h4><p>不推荐：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button&#123;</span><br><span class=\"line\">  width:100px;height:50px;color:#fff;background:#00a0e9;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>推荐：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button&#123;</span><br><span class=\"line\">  width:100px;</span><br><span class=\"line\">  height:50px;</span><br><span class=\"line\">  color:#fff;</span><br><span class=\"line\">  background:#00a0e9;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-6-省略0后面的单位\"><a href=\"#1-3-6-省略0后面的单位\" class=\"headerlink\" title=\"1.3.6 省略0后面的单位\"></a>1.3.6 省略0后面的单位</h4><p>不推荐：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div&#123;</span><br><span class=\"line\">  padding-bottom: 0px;</span><br><span class=\"line\">  margin: 0em;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>推荐：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div&#123;</span><br><span class=\"line\">  padding-bottom: 0;</span><br><span class=\"line\">  margin: 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-7-属性书写顺序\"><a href=\"#1-3-7-属性书写顺序\" class=\"headerlink\" title=\"1.3.7 属性书写顺序\"></a>1.3.7 属性书写顺序</h4><p>建议遵循以下顺序：</p>\n<ol>\n<li>布局定位属性：display &#x2F; position &#x2F; float &#x2F; clear &#x2F; visibility &#x2F; overflow</li>\n<li>自身属性：width &#x2F; height &#x2F; margin &#x2F; padding &#x2F; border &#x2F; background</li>\n<li>文本属性：color &#x2F; font &#x2F; text-decoration &#x2F; text-align &#x2F; vertical-align &#x2F; white- space &#x2F; break-word</li>\n<li>其他属性（CSS3）：content &#x2F; cursor &#x2F; border-radius &#x2F; box-shadow &#x2F; text-shadow &#x2F; background:linear-gradient …</li>\n</ol>\n<h4 id=\"1-3-8-CSS3浏览器私有前缀写法\"><a href=\"#1-3-8-CSS3浏览器私有前缀写法\" class=\"headerlink\" title=\"1.3.8 CSS3浏览器私有前缀写法\"></a>1.3.8 CSS3浏览器私有前缀写法</h4><p>CSS3 浏览器私有前缀在前，标准前缀在后</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.test &#123;</span><br><span class=\"line\">    -webkit-border-radius: 10px;</span><br><span class=\"line\">    -moz-border-radius: 10px;</span><br><span class=\"line\">    -o-border-radius: 10px;</span><br><span class=\"line\">    -ms-border-radius: 10px;</span><br><span class=\"line\">    border-radius: 10px;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四-Javascript-规范\"><a href=\"#四-Javascript-规范\" class=\"headerlink\" title=\"(四) Javascript 规范\"></a>(四) Javascript 规范</h2><h4 id=\"1-4-1-命名\"><a href=\"#1-4-1-命名\" class=\"headerlink\" title=\"1.4.1 命名\"></a>1.4.1 命名</h4><ol>\n<li>采用小写驼峰命名 lowerCamelCase，代码中的命名均不能以下划线，也不能以下划线或美元符号结束<br>   反例： <em>name &#x2F; name</em> &#x2F; name$</li>\n<li>方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格，必须遵从驼峰形式<br>   其中 method 方法命名必须是 动词 或者 动词+名词 形式<br>   正例：saveShopCarData &#x2F;openShopCarInfoDialog<br>   反例：save &#x2F; open &#x2F; show &#x2F; go</li>\n<li>常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长<br>   正例： MAX_STOCK_COUNT<br>   反例： MAX_COUNT</li>\n</ol>\n<h4 id=\"1-4-2-字符串\"><a href=\"#1-4-2-字符串\" class=\"headerlink\" title=\"1.4.2 字符串\"></a>1.4.2 字符串</h4><ul>\n<li>统一使用单引号(‘)，不使用双引号(“)。这在创建 HTML 字符串非常有好处</li>\n<li>程序化生成字符串时，请使用模板字符串</li>\n<li>不要对字符串使用eval()，会导致太多漏洞</li>\n<li>不要在字符串中使用不必要的转义字符</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// good</span><br><span class=\"line\">let str = &#x27;foo&#x27;;</span><br><span class=\"line\">let testDiv = &#x27;&lt;div id=&quot;test&quot;&gt;&lt;/div&gt;&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">const str = `ab$&#123;test&#125;`</span><br><span class=\"line\"></span><br><span class=\"line\">const foo = &#x27;\\&#x27;this\\&#x27; is &quot;quoted&quot;&#x27;</span><br><span class=\"line\">const foo = `my name is &#x27;$&#123;name&#125;&#x27;`</span><br><span class=\"line\"></span><br><span class=\"line\">// bad</span><br><span class=\"line\">let str = &#x27;foo&#x27;;</span><br><span class=\"line\">let testDiv = &quot;&lt;div id=&#x27;test&#x27;&gt;&lt;/div&gt;&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">const str = &#x27;a&#x27; + &#x27;b&#x27; + test</span><br><span class=\"line\"></span><br><span class=\"line\">const foo = &#x27;\\&#x27;this\\&#x27; \\i\\s \\&quot;quoted\\&quot;&#x27;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-4-3-对象声明\"><a href=\"#1-4-3-对象声明\" class=\"headerlink\" title=\"1.4.3 对象声明\"></a>1.4.3 对象声明</h4><ul>\n<li>请使用字面量值创建对象和数组</li>\n<li>只对非法标识符的属性使用引号</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">const a = new Object&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const bad = &#123;</span><br><span class=\"line\">  &#x27;foo&#x27;: 3,</span><br><span class=\"line\">  &#x27;bar&#x27;: 4,</span><br><span class=\"line\">  &#x27;data-blah&#x27;: 5</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">const a = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const good = &#123;</span><br><span class=\"line\">  foo: 3,</span><br><span class=\"line\">  bar: 4,</span><br><span class=\"line\">  &#x27;data-blah&#x27;: 5</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"1-4-4-比较运算符-相等\"><a href=\"#1-4-4-比较运算符-相等\" class=\"headerlink\" title=\"1.4.4 比较运算符&amp;相等\"></a>1.4.4 比较运算符&amp;相等</h4><ul>\n<li>使用 &#x3D;&#x3D;&#x3D; 和 !&#x3D;&#x3D;而非 &#x3D;&#x3D;和!&#x3D;</li>\n<li>条件声明例如if 会用类型转化这个抽象方法将表达式转成布尔值并遵循如下规则<ul>\n<li>object 等于true</li>\n<li>undefined等于false</li>\n<li>null等于false</li>\n<li>number在+0, -0, 或者NaN 的情况下等于false, 其他情况是true</li>\n<li>string 为’’时等于false, 否则是true</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"1-4-5-条件判断和循环最多三层\"><a href=\"#1-4-5-条件判断和循环最多三层\" class=\"headerlink\" title=\"1.4.5 条件判断和循环最多三层\"></a>1.4.5 条件判断和循环最多三层</h4><p>条件判断能使用三目运算符和逻辑运算符解决的，就不要使用条件判断，但是谨记不要写太长的三目运算符。如果超过 3 层请抽成函数，并写清楚注释</p>\n<h4 id=\"1-4-6-优先使用-ES6-ES7\"><a href=\"#1-4-6-优先使用-ES6-ES7\" class=\"headerlink\" title=\"1.4.6 优先使用 ES6,ES7\"></a>1.4.6 优先使用 ES6,ES7</h4><p>必须优先使用 ES6,ES7 中新增的语法糖和函数。这将简化你的程序，并让你的代码更加灵活和可复用。<br>比如箭头函数、await&#x2F;async，解构，let，for…of 等等</p>\n<h4 id=\"1-4-7-禁止使用eval-和with\"><a href=\"#1-4-7-禁止使用eval-和with\" class=\"headerlink\" title=\"1.4.7 禁止使用eval()和with()\"></a>1.4.7 禁止使用eval()和with()</h4><h2 id=\"五-Vue使用规范\"><a href=\"#五-Vue使用规范\" class=\"headerlink\" title=\"(五) Vue使用规范\"></a>(五) Vue使用规范</h2><p>参考官方指导（<a href=\"https://cn.vuejs.org/v2/style-guide/%EF%BC%89\">https://cn.vuejs.org/v2/style-guide/）</a></p>\n"},{"title":"前端项目兼容IE8","date":"2022-05-08T06:42:58.000Z","_content":"\n\n## 背景\n\n南天门（盘库）项目招标文档明确需求要支持ie8。\n\n## 现状\n\n但是目前三大主流框架都不支持ie8\n\n- #### vue\n\nvue从最初就不支持ie8，最低支持ie9，因为vue的核心数据劫持使用了ES5的特性Object.definedProprty来实现，而特性的浏览器兼容最低是ie9，所以vue从根本是不支持ie8。\n\n- #### react\n\n![null](https://s2.loli.net/2024/01/08/sG5mPRyxoFlnXZd.png)\n\n官方也从2016年开始宣布不支持ie8，官方的建议是采用低版本0.14来支持ie8，但我们并不确定哪些特性与功能是可用哪些是不可用的，需要花时间去验证，是否值得？？？\n\n- #### angular\n\nangularjs1.3已经抛弃了对ie8的支持\n\n![null](https://s2.loli.net/2024/01/08/YCVNOoplH2kXRvf.png)\n\n## 结论\n\n 主流框架都已不支持ie8，只能另寻他路（要么使用bootstrap之类原生的框架，要么使用一些小众框架）\n\n以下是我找到的支持IE8的框架\n\nhttps://github.com/RubyLouvre/anu 司徒正美（作者已去世）\n\n一个迷你的类似react的框架，与React16非常兼容，兼容ie6-ie8\n\nhttps://github.com/RubyLouvre/avalon 司徒正美（作者已去世，目前没人维护）\n\nMVVM框架，跟vue用了同样的数据劫持方式，不过对不支持Object.defineProperty的浏览器使用VBScript来实现相同的功能，所以支持ie8\n\nhttps://baidu.github.io/san/tutorial/start/\n\nSan，是一个 MVVM 的组件框架。它体积小巧（< 17K），兼容性好（IE6），性能卓越，是一个可靠、可依赖的实现响应式用户界面的解决方案。\n\nhttps://github.com/yoxjs/yox\n\n就像Vue一样，但它比Vue更轻，更容易使用。\n\n提供两个大版本，如下：\n\n- **standard**: 适合标准浏览器和 NodeJS\n- **legacy**: 适合低端浏览器（IE6、IE7、IE8)\n","source":"_posts/前端项目兼容IE8.md","raw":"---\ntitle: 前端项目兼容IE8\ndate: 2022-05-08 14:42:58\ntags:\n    - IE\n---\n\n\n## 背景\n\n南天门（盘库）项目招标文档明确需求要支持ie8。\n\n## 现状\n\n但是目前三大主流框架都不支持ie8\n\n- #### vue\n\nvue从最初就不支持ie8，最低支持ie9，因为vue的核心数据劫持使用了ES5的特性Object.definedProprty来实现，而特性的浏览器兼容最低是ie9，所以vue从根本是不支持ie8。\n\n- #### react\n\n![null](https://s2.loli.net/2024/01/08/sG5mPRyxoFlnXZd.png)\n\n官方也从2016年开始宣布不支持ie8，官方的建议是采用低版本0.14来支持ie8，但我们并不确定哪些特性与功能是可用哪些是不可用的，需要花时间去验证，是否值得？？？\n\n- #### angular\n\nangularjs1.3已经抛弃了对ie8的支持\n\n![null](https://s2.loli.net/2024/01/08/YCVNOoplH2kXRvf.png)\n\n## 结论\n\n 主流框架都已不支持ie8，只能另寻他路（要么使用bootstrap之类原生的框架，要么使用一些小众框架）\n\n以下是我找到的支持IE8的框架\n\nhttps://github.com/RubyLouvre/anu 司徒正美（作者已去世）\n\n一个迷你的类似react的框架，与React16非常兼容，兼容ie6-ie8\n\nhttps://github.com/RubyLouvre/avalon 司徒正美（作者已去世，目前没人维护）\n\nMVVM框架，跟vue用了同样的数据劫持方式，不过对不支持Object.defineProperty的浏览器使用VBScript来实现相同的功能，所以支持ie8\n\nhttps://baidu.github.io/san/tutorial/start/\n\nSan，是一个 MVVM 的组件框架。它体积小巧（< 17K），兼容性好（IE6），性能卓越，是一个可靠、可依赖的实现响应式用户界面的解决方案。\n\nhttps://github.com/yoxjs/yox\n\n就像Vue一样，但它比Vue更轻，更容易使用。\n\n提供两个大版本，如下：\n\n- **standard**: 适合标准浏览器和 NodeJS\n- **legacy**: 适合低端浏览器（IE6、IE7、IE8)\n","slug":"前端项目兼容IE8","published":1,"updated":"2024-01-15T07:34:53.324Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrq64z6l000msoip3t5386jh","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>南天门（盘库）项目招标文档明确需求要支持ie8。</p>\n<h2 id=\"现状\"><a href=\"#现状\" class=\"headerlink\" title=\"现状\"></a>现状</h2><p>但是目前三大主流框架都不支持ie8</p>\n<ul>\n<li><h4 id=\"vue\"><a href=\"#vue\" class=\"headerlink\" title=\"vue\"></a>vue</h4></li>\n</ul>\n<p>vue从最初就不支持ie8，最低支持ie9，因为vue的核心数据劫持使用了ES5的特性Object.definedProprty来实现，而特性的浏览器兼容最低是ie9，所以vue从根本是不支持ie8。</p>\n<ul>\n<li><h4 id=\"react\"><a href=\"#react\" class=\"headerlink\" title=\"react\"></a>react</h4></li>\n</ul>\n<p><img src=\"https://s2.loli.net/2024/01/08/sG5mPRyxoFlnXZd.png\" alt=\"null\"></p>\n<p>官方也从2016年开始宣布不支持ie8，官方的建议是采用低版本0.14来支持ie8，但我们并不确定哪些特性与功能是可用哪些是不可用的，需要花时间去验证，是否值得？？？</p>\n<ul>\n<li><h4 id=\"angular\"><a href=\"#angular\" class=\"headerlink\" title=\"angular\"></a>angular</h4></li>\n</ul>\n<p>angularjs1.3已经抛弃了对ie8的支持</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/YCVNOoplH2kXRvf.png\" alt=\"null\"></p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p> 主流框架都已不支持ie8，只能另寻他路（要么使用bootstrap之类原生的框架，要么使用一些小众框架）</p>\n<p>以下是我找到的支持IE8的框架</p>\n<p><a href=\"https://github.com/RubyLouvre/anu\">https://github.com/RubyLouvre/anu</a> 司徒正美（作者已去世）</p>\n<p>一个迷你的类似react的框架，与React16非常兼容，兼容ie6-ie8</p>\n<p><a href=\"https://github.com/RubyLouvre/avalon\">https://github.com/RubyLouvre/avalon</a> 司徒正美（作者已去世，目前没人维护）</p>\n<p>MVVM框架，跟vue用了同样的数据劫持方式，不过对不支持Object.defineProperty的浏览器使用VBScript来实现相同的功能，所以支持ie8</p>\n<p><a href=\"https://baidu.github.io/san/tutorial/start/\">https://baidu.github.io/san/tutorial/start/</a></p>\n<p>San，是一个 MVVM 的组件框架。它体积小巧（&lt; 17K），兼容性好（IE6），性能卓越，是一个可靠、可依赖的实现响应式用户界面的解决方案。</p>\n<p><a href=\"https://github.com/yoxjs/yox\">https://github.com/yoxjs/yox</a></p>\n<p>就像Vue一样，但它比Vue更轻，更容易使用。</p>\n<p>提供两个大版本，如下：</p>\n<ul>\n<li><strong>standard</strong>: 适合标准浏览器和 NodeJS</li>\n<li><strong>legacy</strong>: 适合低端浏览器（IE6、IE7、IE8)</li>\n</ul>\n","site":{"data":{}},"length":431,"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>南天门（盘库）项目招标文档明确需求要支持ie8。</p>\n<h2 id=\"现状\"><a href=\"#现状\" class=\"headerlink\" title=\"现状\"></a>现状</h2><p>但是目前三大主流框架都不支持ie8</p>\n<ul>\n<li><h4 id=\"vue\"><a href=\"#vue\" class=\"headerlink\" title=\"vue\"></a>vue</h4></li>\n</ul>\n<p>vue从最初就不支持ie8，最低支持ie9，因为vue的核心数据劫持使用了ES5的特性Object.definedProprty来实现，而特性的浏览器兼容最低是ie9，所以vue从根本是不支持ie8。</p>\n<ul>\n<li><h4 id=\"react\"><a href=\"#react\" class=\"headerlink\" title=\"react\"></a>react</h4></li>\n</ul>\n<p><img src=\"https://s2.loli.net/2024/01/08/sG5mPRyxoFlnXZd.png\" alt=\"null\"></p>\n<p>官方也从2016年开始宣布不支持ie8，官方的建议是采用低版本0.14来支持ie8，但我们并不确定哪些特性与功能是可用哪些是不可用的，需要花时间去验证，是否值得？？？</p>\n<ul>\n<li><h4 id=\"angular\"><a href=\"#angular\" class=\"headerlink\" title=\"angular\"></a>angular</h4></li>\n</ul>\n<p>angularjs1.3已经抛弃了对ie8的支持</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/YCVNOoplH2kXRvf.png\" alt=\"null\"></p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p> 主流框架都已不支持ie8，只能另寻他路（要么使用bootstrap之类原生的框架，要么使用一些小众框架）</p>\n<p>以下是我找到的支持IE8的框架</p>\n<p><a href=\"https://github.com/RubyLouvre/anu\">https://github.com/RubyLouvre/anu</a> 司徒正美（作者已去世）</p>\n<p>一个迷你的类似react的框架，与React16非常兼容，兼容ie6-ie8</p>\n<p><a href=\"https://github.com/RubyLouvre/avalon\">https://github.com/RubyLouvre/avalon</a> 司徒正美（作者已去世，目前没人维护）</p>\n<p>MVVM框架，跟vue用了同样的数据劫持方式，不过对不支持Object.defineProperty的浏览器使用VBScript来实现相同的功能，所以支持ie8</p>\n<p><a href=\"https://baidu.github.io/san/tutorial/start/\">https://baidu.github.io/san/tutorial/start/</a></p>\n<p>San，是一个 MVVM 的组件框架。它体积小巧（&lt; 17K），兼容性好（IE6），性能卓越，是一个可靠、可依赖的实现响应式用户界面的解决方案。</p>\n<p><a href=\"https://github.com/yoxjs/yox\">https://github.com/yoxjs/yox</a></p>\n<p>就像Vue一样，但它比Vue更轻，更容易使用。</p>\n<p>提供两个大版本，如下：</p>\n<ul>\n<li><strong>standard</strong>: 适合标准浏览器和 NodeJS</li>\n<li><strong>legacy</strong>: 适合低端浏览器（IE6、IE7、IE8)</li>\n</ul>\n"},{"title":"web端自定义截图","date":"2023-07-14T06:37:13.000Z","_content":"\n## 写在前面\n\n首先浏览器并没有提供一个类似的API权限功能，所以只能某种方式来实现一个伪截图功能。\n\n## 功能分析\n\n简单分析一些截图软件可以得到了一下实现思路：\n\n- 获取当前可视区域的内容，将其存储起来\n- 为整个可视区域绘制蒙层 \n- 在获取到的内容中进行拖拽，绘制镂空选区\n- 选择截图工具栏的工具，选择确认取消等信息\n- 在选区内拖拽绘制对应的图形\n- 将选区内的内容转换为图片\n\n不难发现，难点就在于获取当前可视区域内容。\n\n首先想到的技术就是canvas。将body文档内容绘制到canvas，然后利用canvas的`toDataUrl()`等方法即可获取到图片。\n\n正好有个[html2canvas](https://html2canvas.hertzen.com/)开源库可以实现将指定dom转换为canvas。关于canvas截图实现具体可以参考之前的一篇[调研文档](2023/01/09/网页截图功能调研/)\n\n## 使用webrtc截取整个屏幕\n\n上述canvas截图，因为html2canvas要遍历整个body中的dom，然后再转换成canvas，而且图片还不能跨域，如果页面中图片一多，它会变得非常慢。同时由于它是自己实现的一套css逻辑所以部分css样式不支持或者不完整。 [常见问题](https://html2canvas.hertzen.com/faq)\n\n![null](https://s2.loli.net/2024/01/08/U5y2Vbz9IY3AWri.png)\n\n基于上述原因，因而有了现在这种方案 —— 使用浏览器原生API webERT\n\n具体思路如下：\n\n- 使用getDisplayMedia来捕获屏幕以录屏方式从其中拿出一帧，得到MediaStream流\n- 将得到的MediaStream流输出到video标签中\n- 使用canvas将video标签中的内容绘制到canvas容器中\n\n它截取出来的东西更精确、性能更好，不存在卡顿问题也不存在css问题，但是需要用户授权和做一些窗口选择，相比于html2canvas方案做不到默认截图。\n\n> 使用webtrc技术，需要你的网站运行在https环境或者localhost环境。当然，也可以通过修改浏览器设置的方式实现在所有环境下都能运行。步骤如下： 1.打开谷歌浏览器，在地址栏输入chrome://flags/#unsafely-treat-insecure-origin-as-secure 2.在打开的界面中：下拉框选择enabled，地址填写你的项目访问路径\n\n## 结尾\n\n好了，有关web端截图的两种方案都介绍完了，可以说是可有优劣。具体使用那个要看具体需求进行一定取舍。\n\n## 两种方案实际效果对比\n\n使用一下页面进行试验\n\n![null](https://s2.loli.net/2024/01/08/rg4VWOdvMkwX739.png)\n\n- html2canvas\n\n![null](https://s2.loli.net/2024/01/08/3WvbLUQ1Anu95IM.png)\n\n- webrtc\n\n首先需要权限确认！！！\n\n![null](https://s2.loli.net/2024/01/08/akO7wEGTeducWFH.png)\n\n![null](https://s2.loli.net/2024/01/08/UgcX7COxLiWQ9qA.png)\n","source":"_posts/web端自定义截图.md","raw":"---\ntitle: web端自定义截图\ndate: 2023-07-14 14:37:13\ntags:\n    - web\n---\n\n## 写在前面\n\n首先浏览器并没有提供一个类似的API权限功能，所以只能某种方式来实现一个伪截图功能。\n\n## 功能分析\n\n简单分析一些截图软件可以得到了一下实现思路：\n\n- 获取当前可视区域的内容，将其存储起来\n- 为整个可视区域绘制蒙层 \n- 在获取到的内容中进行拖拽，绘制镂空选区\n- 选择截图工具栏的工具，选择确认取消等信息\n- 在选区内拖拽绘制对应的图形\n- 将选区内的内容转换为图片\n\n不难发现，难点就在于获取当前可视区域内容。\n\n首先想到的技术就是canvas。将body文档内容绘制到canvas，然后利用canvas的`toDataUrl()`等方法即可获取到图片。\n\n正好有个[html2canvas](https://html2canvas.hertzen.com/)开源库可以实现将指定dom转换为canvas。关于canvas截图实现具体可以参考之前的一篇[调研文档](2023/01/09/网页截图功能调研/)\n\n## 使用webrtc截取整个屏幕\n\n上述canvas截图，因为html2canvas要遍历整个body中的dom，然后再转换成canvas，而且图片还不能跨域，如果页面中图片一多，它会变得非常慢。同时由于它是自己实现的一套css逻辑所以部分css样式不支持或者不完整。 [常见问题](https://html2canvas.hertzen.com/faq)\n\n![null](https://s2.loli.net/2024/01/08/U5y2Vbz9IY3AWri.png)\n\n基于上述原因，因而有了现在这种方案 —— 使用浏览器原生API webERT\n\n具体思路如下：\n\n- 使用getDisplayMedia来捕获屏幕以录屏方式从其中拿出一帧，得到MediaStream流\n- 将得到的MediaStream流输出到video标签中\n- 使用canvas将video标签中的内容绘制到canvas容器中\n\n它截取出来的东西更精确、性能更好，不存在卡顿问题也不存在css问题，但是需要用户授权和做一些窗口选择，相比于html2canvas方案做不到默认截图。\n\n> 使用webtrc技术，需要你的网站运行在https环境或者localhost环境。当然，也可以通过修改浏览器设置的方式实现在所有环境下都能运行。步骤如下： 1.打开谷歌浏览器，在地址栏输入chrome://flags/#unsafely-treat-insecure-origin-as-secure 2.在打开的界面中：下拉框选择enabled，地址填写你的项目访问路径\n\n## 结尾\n\n好了，有关web端截图的两种方案都介绍完了，可以说是可有优劣。具体使用那个要看具体需求进行一定取舍。\n\n## 两种方案实际效果对比\n\n使用一下页面进行试验\n\n![null](https://s2.loli.net/2024/01/08/rg4VWOdvMkwX739.png)\n\n- html2canvas\n\n![null](https://s2.loli.net/2024/01/08/3WvbLUQ1Anu95IM.png)\n\n- webrtc\n\n首先需要权限确认！！！\n\n![null](https://s2.loli.net/2024/01/08/akO7wEGTeducWFH.png)\n\n![null](https://s2.loli.net/2024/01/08/UgcX7COxLiWQ9qA.png)\n","slug":"web端自定义截图","published":1,"updated":"2024-01-15T07:43:01.962Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrq64z6m000psoipdn83g7jr","content":"<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>首先浏览器并没有提供一个类似的API权限功能，所以只能某种方式来实现一个伪截图功能。</p>\n<h2 id=\"功能分析\"><a href=\"#功能分析\" class=\"headerlink\" title=\"功能分析\"></a>功能分析</h2><p>简单分析一些截图软件可以得到了一下实现思路：</p>\n<ul>\n<li>获取当前可视区域的内容，将其存储起来</li>\n<li>为整个可视区域绘制蒙层 </li>\n<li>在获取到的内容中进行拖拽，绘制镂空选区</li>\n<li>选择截图工具栏的工具，选择确认取消等信息</li>\n<li>在选区内拖拽绘制对应的图形</li>\n<li>将选区内的内容转换为图片</li>\n</ul>\n<p>不难发现，难点就在于获取当前可视区域内容。</p>\n<p>首先想到的技术就是canvas。将body文档内容绘制到canvas，然后利用canvas的<code>toDataUrl()</code>等方法即可获取到图片。</p>\n<p>正好有个<a href=\"https://html2canvas.hertzen.com/\">html2canvas</a>开源库可以实现将指定dom转换为canvas。关于canvas截图实现具体可以参考之前的一篇<a href=\"2023/01/09/%E7%BD%91%E9%A1%B5%E6%88%AA%E5%9B%BE%E5%8A%9F%E8%83%BD%E8%B0%83%E7%A0%94/\">调研文档</a></p>\n<h2 id=\"使用webrtc截取整个屏幕\"><a href=\"#使用webrtc截取整个屏幕\" class=\"headerlink\" title=\"使用webrtc截取整个屏幕\"></a>使用webrtc截取整个屏幕</h2><p>上述canvas截图，因为html2canvas要遍历整个body中的dom，然后再转换成canvas，而且图片还不能跨域，如果页面中图片一多，它会变得非常慢。同时由于它是自己实现的一套css逻辑所以部分css样式不支持或者不完整。 <a href=\"https://html2canvas.hertzen.com/faq\">常见问题</a></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/U5y2Vbz9IY3AWri.png\" alt=\"null\"></p>\n<p>基于上述原因，因而有了现在这种方案 —— 使用浏览器原生API webERT</p>\n<p>具体思路如下：</p>\n<ul>\n<li>使用getDisplayMedia来捕获屏幕以录屏方式从其中拿出一帧，得到MediaStream流</li>\n<li>将得到的MediaStream流输出到video标签中</li>\n<li>使用canvas将video标签中的内容绘制到canvas容器中</li>\n</ul>\n<p>它截取出来的东西更精确、性能更好，不存在卡顿问题也不存在css问题，但是需要用户授权和做一些窗口选择，相比于html2canvas方案做不到默认截图。</p>\n<blockquote>\n<p>使用webtrc技术，需要你的网站运行在https环境或者localhost环境。当然，也可以通过修改浏览器设置的方式实现在所有环境下都能运行。步骤如下： 1.打开谷歌浏览器，在地址栏输入chrome:&#x2F;&#x2F;flags&#x2F;#unsafely-treat-insecure-origin-as-secure 2.在打开的界面中：下拉框选择enabled，地址填写你的项目访问路径</p>\n</blockquote>\n<h2 id=\"结尾\"><a href=\"#结尾\" class=\"headerlink\" title=\"结尾\"></a>结尾</h2><p>好了，有关web端截图的两种方案都介绍完了，可以说是可有优劣。具体使用那个要看具体需求进行一定取舍。</p>\n<h2 id=\"两种方案实际效果对比\"><a href=\"#两种方案实际效果对比\" class=\"headerlink\" title=\"两种方案实际效果对比\"></a>两种方案实际效果对比</h2><p>使用一下页面进行试验</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/rg4VWOdvMkwX739.png\" alt=\"null\"></p>\n<ul>\n<li>html2canvas</li>\n</ul>\n<p><img src=\"https://s2.loli.net/2024/01/08/3WvbLUQ1Anu95IM.png\" alt=\"null\"></p>\n<ul>\n<li>webrtc</li>\n</ul>\n<p>首先需要权限确认！！！</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/akO7wEGTeducWFH.png\" alt=\"null\"></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/UgcX7COxLiWQ9qA.png\" alt=\"null\"></p>\n","site":{"data":{}},"length":676,"excerpt":"","more":"<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>首先浏览器并没有提供一个类似的API权限功能，所以只能某种方式来实现一个伪截图功能。</p>\n<h2 id=\"功能分析\"><a href=\"#功能分析\" class=\"headerlink\" title=\"功能分析\"></a>功能分析</h2><p>简单分析一些截图软件可以得到了一下实现思路：</p>\n<ul>\n<li>获取当前可视区域的内容，将其存储起来</li>\n<li>为整个可视区域绘制蒙层 </li>\n<li>在获取到的内容中进行拖拽，绘制镂空选区</li>\n<li>选择截图工具栏的工具，选择确认取消等信息</li>\n<li>在选区内拖拽绘制对应的图形</li>\n<li>将选区内的内容转换为图片</li>\n</ul>\n<p>不难发现，难点就在于获取当前可视区域内容。</p>\n<p>首先想到的技术就是canvas。将body文档内容绘制到canvas，然后利用canvas的<code>toDataUrl()</code>等方法即可获取到图片。</p>\n<p>正好有个<a href=\"https://html2canvas.hertzen.com/\">html2canvas</a>开源库可以实现将指定dom转换为canvas。关于canvas截图实现具体可以参考之前的一篇<a href=\"2023/01/09/%E7%BD%91%E9%A1%B5%E6%88%AA%E5%9B%BE%E5%8A%9F%E8%83%BD%E8%B0%83%E7%A0%94/\">调研文档</a></p>\n<h2 id=\"使用webrtc截取整个屏幕\"><a href=\"#使用webrtc截取整个屏幕\" class=\"headerlink\" title=\"使用webrtc截取整个屏幕\"></a>使用webrtc截取整个屏幕</h2><p>上述canvas截图，因为html2canvas要遍历整个body中的dom，然后再转换成canvas，而且图片还不能跨域，如果页面中图片一多，它会变得非常慢。同时由于它是自己实现的一套css逻辑所以部分css样式不支持或者不完整。 <a href=\"https://html2canvas.hertzen.com/faq\">常见问题</a></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/U5y2Vbz9IY3AWri.png\" alt=\"null\"></p>\n<p>基于上述原因，因而有了现在这种方案 —— 使用浏览器原生API webERT</p>\n<p>具体思路如下：</p>\n<ul>\n<li>使用getDisplayMedia来捕获屏幕以录屏方式从其中拿出一帧，得到MediaStream流</li>\n<li>将得到的MediaStream流输出到video标签中</li>\n<li>使用canvas将video标签中的内容绘制到canvas容器中</li>\n</ul>\n<p>它截取出来的东西更精确、性能更好，不存在卡顿问题也不存在css问题，但是需要用户授权和做一些窗口选择，相比于html2canvas方案做不到默认截图。</p>\n<blockquote>\n<p>使用webtrc技术，需要你的网站运行在https环境或者localhost环境。当然，也可以通过修改浏览器设置的方式实现在所有环境下都能运行。步骤如下： 1.打开谷歌浏览器，在地址栏输入chrome:&#x2F;&#x2F;flags&#x2F;#unsafely-treat-insecure-origin-as-secure 2.在打开的界面中：下拉框选择enabled，地址填写你的项目访问路径</p>\n</blockquote>\n<h2 id=\"结尾\"><a href=\"#结尾\" class=\"headerlink\" title=\"结尾\"></a>结尾</h2><p>好了，有关web端截图的两种方案都介绍完了，可以说是可有优劣。具体使用那个要看具体需求进行一定取舍。</p>\n<h2 id=\"两种方案实际效果对比\"><a href=\"#两种方案实际效果对比\" class=\"headerlink\" title=\"两种方案实际效果对比\"></a>两种方案实际效果对比</h2><p>使用一下页面进行试验</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/rg4VWOdvMkwX739.png\" alt=\"null\"></p>\n<ul>\n<li>html2canvas</li>\n</ul>\n<p><img src=\"https://s2.loli.net/2024/01/08/3WvbLUQ1Anu95IM.png\" alt=\"null\"></p>\n<ul>\n<li>webrtc</li>\n</ul>\n<p>首先需要权限确认！！！</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/akO7wEGTeducWFH.png\" alt=\"null\"></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/UgcX7COxLiWQ9qA.png\" alt=\"null\"></p>\n"},{"title":"如何实现鼠标标记和标记渲染功能","date":"2023-02-14T09:26:38.000Z","_content":"\n\n## 背景需求\n\n1、首先通过接口拿到文本和nlp识别后的标记信息\n\n2、渲染标记到文本中\n\n3、文本区可鼠标滑动添加标记类型，刷新后同样显示对应标记\n\n分析上以上需求，不难发现关键点在于2和3。\n\n当然这只是需求简化后的样子，真实需求取决于业务，我们只讨论内容只有文本的情况，其他情况类似\n\n第二点渲染标记我最先想到的是后端提供标记文本的位置信息，直接插入一个新标签比如mark来包裹被标记的文本然后替换原来的文本。这么看也不是太难实现😃\n\n基于第二点的分析，第三点鼠标选择文本肯定也要提供被选中文本的位置信息给后端从而实现标记持久存在\n\n## 鼠标选中\n\n正好浏览器也提供了鼠标选择对应的API——[getSelection](https://developer.mozilla.org/zh-CN/docs/Web/API/Window/getSelection)\n\n同时也在网上进行了调研，所有提供鼠标选择功能的组件或者三方库都是基于getSelection来实现的。\n\n那好，先基于该API实现一个基本的文本选择功能\n\nwindow.addEventListener('mouseup', function () {\nlet selection = window.getSelection()\n})\n\n一个最基础的文本选择功能就完成了。我们打印下selection对象产看下它里面都有些什么属性\n\n![null](https://s2.loli.net/2024/01/08/HdN3it8cfu2Mz9S.png)\n\n其中baseOffset和fouceOffset一般表示鼠标选择开始和结束时的位置信息。进一步我们可以拿到选择的range对象\n\nwindow.addEventListener('mouseup', function () {\nlet selRange = window.getSelection().getRangeAt(0) // 默认是0，除了火狐浏览器可多选外，其他浏览器只能单选\n})\n\n再打印下range对象，可以看到直接就有start和end的偏移量，而startContainer和endContainer的内容是起点文本和终点文本所在的父级文本。\n\n![null](https://s2.loli.net/2024/01/08/D6yX1eEjL25Qgau.png)\n\n好了，文本位置信息可以拿到问题就解决了一大半。不过考虑到我们是在已经包含标记的文本中进行标记，还需要验证下已有标记的文本选择位置是否有变化（因为插入了标记标签改动了文本结构）。\n\n给测试文本加上一段标签，如下，再次选中跟之前一样的文本打印range信息\n\n![null](https://s2.loli.net/2024/01/08/Ipv7CJgsUKMWZNP.png)\n\n还真的不出所料，位置信息发生了变化，查看startContainer可以看到父文本是从标签后第一个字符开始的，而我们需要的是从整段文本的第一个字符开始\n\n![null](https://s2.loli.net/2024/01/08/qKSYrEPayLjM6nJ.png)\n\n这会导致生成标签出现偏移，不符合我们的需求。因此需要一个方法来将文本节点内偏移量“翻译”为其对应的父节点内部的总体文本偏移量 ——参考 [web-highlight](https://www.alienzhou.com/2019/04/21/web-note-highlight-in-js/#5-如何实现一个生产环境可用的“划词高亮”？)\n\n经过验证web-highlight是可以满足我们的需求的。\n\n实际开发中还要用到父节点的序号和父节点的标签名，我们业务中的标签名是固定的可以不用特殊处理，其他场景下就需要遍历dom\n\n## 文本标记\n\n只要有了标记的起止位置和所处父节点序号我们就可以找到对应的标记文本，生成标记节点包裹对应文本。自己实现和使用三方库都能满足要求。\n\n## 结论\n\n当然，现在一切都只是试验阶段，后端还没提供数据无法做进一步验证。项目紧急的情况优先使用三方件来快速实现功能，后期需求优化再根据需求判断三方件是否满足。不满足也可以参考其序列化的思路重新实现。\n\n## 后续\n\n不管是三方件还是我们自己实现的高亮都有个共同点——会破坏文档的dom结构也就是要插入比如mark的标签。而我们需求中有一项是文本内容可再编辑，如果标记高亮破坏了dom结构再编辑就不友好了，并且也对全文搜索高亮不友好。后来发现语雀是可以评论的，评论的文本也是会被标记出来的。更神奇的是它没有改变原文本dom结构。很好，那就研究下它到底使用了什么魔法。\n\n![null](https://s2.loli.net/2024/01/08/HXz8aOAneft2hCv.png)\n\n逐步排除文本区dom，果然有意外发现。有个canvas结构正好覆盖再文本区上。好家伙，看到canvas就要凝神——毕竟canvas通常能实现一些意想不到的功能。\n\n![null](https://s2.loli.net/2024/01/08/oGYvajE6NKszeJV.png)\n\n删掉canvas结构后刚添加的两个标记也消失了。\n\n![null](https://s2.loli.net/2024/01/08/dygbFhDKmUC9EQ2.png)\n\n果然是万能的canvas。\n\n如此大体思路就是：生成一个 canvas 元素，让 canvas 元素与需要划词高亮功能的文本容器元素等宽高，并且重叠在文本容器上，划词的时候获取划词区域的文本节点相对于文本容器的位置信息，然后通过这些位置信息进行高亮背景的渲染。\n\n是否采用该方案看项目的进一步需求，目前的标记高亮实现确实有些问题。\n\n插句题外话，全文搜索高亮的常见方案也是插入标签，不过影响不大，因为并不是永久改变dom，取消搜索就会还原称原文本。浏览器 ctrl+f 原生的搜索高亮也没有插入标签也没用到canvas，更没有多余的dom结构，这就很费解？？？\n\n如果能实现跟原生浏览器一样的功能就完美了，后面再研究吧。\n\n## 再续\n\n按照之前的调研结果开始用canvas重构标记功能，啪啪啪一通完成基本功能，直接运用到项目中运行。计划很完美，第一步就失败了😫\n\n![null](https://s2.loli.net/2024/01/08/cGCWqFiuzteEgmZ.png)\n\n666，直接给canvas干崩溃了🤣。在实际项目中直接加载了一本书全部内容，所以文本区完整高度很大，而canvas是直接覆盖在文本区上的， canvas 元素高度太大导致内存占用超出问题。无语啊，居然会遇到这种问题。\n\n如何解决？？？好像可以通过多个canvas依次排列来解决。在不断地调试语雀源码后总算找到了它关于canvas的相关实现，确实是通过多个canvas来解决高度太大的问题。\n\n![null](https://s2.loli.net/2024/01/08/s1OIhuUemAE9VNq.png)\n\nyes，已经看到了胜利的曙光。接下来按部就班的实现对应的功能就行。","source":"_posts/如何实现鼠标标记和标记渲染功能.md","raw":"---\ntitle: 如何实现鼠标标记和标记渲染功能\ndate: 2023-02-14 17:26:38\ntags:\n    - canvas\n    - 标注\n---\n\n\n## 背景需求\n\n1、首先通过接口拿到文本和nlp识别后的标记信息\n\n2、渲染标记到文本中\n\n3、文本区可鼠标滑动添加标记类型，刷新后同样显示对应标记\n\n分析上以上需求，不难发现关键点在于2和3。\n\n当然这只是需求简化后的样子，真实需求取决于业务，我们只讨论内容只有文本的情况，其他情况类似\n\n第二点渲染标记我最先想到的是后端提供标记文本的位置信息，直接插入一个新标签比如mark来包裹被标记的文本然后替换原来的文本。这么看也不是太难实现😃\n\n基于第二点的分析，第三点鼠标选择文本肯定也要提供被选中文本的位置信息给后端从而实现标记持久存在\n\n## 鼠标选中\n\n正好浏览器也提供了鼠标选择对应的API——[getSelection](https://developer.mozilla.org/zh-CN/docs/Web/API/Window/getSelection)\n\n同时也在网上进行了调研，所有提供鼠标选择功能的组件或者三方库都是基于getSelection来实现的。\n\n那好，先基于该API实现一个基本的文本选择功能\n\nwindow.addEventListener('mouseup', function () {\nlet selection = window.getSelection()\n})\n\n一个最基础的文本选择功能就完成了。我们打印下selection对象产看下它里面都有些什么属性\n\n![null](https://s2.loli.net/2024/01/08/HdN3it8cfu2Mz9S.png)\n\n其中baseOffset和fouceOffset一般表示鼠标选择开始和结束时的位置信息。进一步我们可以拿到选择的range对象\n\nwindow.addEventListener('mouseup', function () {\nlet selRange = window.getSelection().getRangeAt(0) // 默认是0，除了火狐浏览器可多选外，其他浏览器只能单选\n})\n\n再打印下range对象，可以看到直接就有start和end的偏移量，而startContainer和endContainer的内容是起点文本和终点文本所在的父级文本。\n\n![null](https://s2.loli.net/2024/01/08/D6yX1eEjL25Qgau.png)\n\n好了，文本位置信息可以拿到问题就解决了一大半。不过考虑到我们是在已经包含标记的文本中进行标记，还需要验证下已有标记的文本选择位置是否有变化（因为插入了标记标签改动了文本结构）。\n\n给测试文本加上一段标签，如下，再次选中跟之前一样的文本打印range信息\n\n![null](https://s2.loli.net/2024/01/08/Ipv7CJgsUKMWZNP.png)\n\n还真的不出所料，位置信息发生了变化，查看startContainer可以看到父文本是从标签后第一个字符开始的，而我们需要的是从整段文本的第一个字符开始\n\n![null](https://s2.loli.net/2024/01/08/qKSYrEPayLjM6nJ.png)\n\n这会导致生成标签出现偏移，不符合我们的需求。因此需要一个方法来将文本节点内偏移量“翻译”为其对应的父节点内部的总体文本偏移量 ——参考 [web-highlight](https://www.alienzhou.com/2019/04/21/web-note-highlight-in-js/#5-如何实现一个生产环境可用的“划词高亮”？)\n\n经过验证web-highlight是可以满足我们的需求的。\n\n实际开发中还要用到父节点的序号和父节点的标签名，我们业务中的标签名是固定的可以不用特殊处理，其他场景下就需要遍历dom\n\n## 文本标记\n\n只要有了标记的起止位置和所处父节点序号我们就可以找到对应的标记文本，生成标记节点包裹对应文本。自己实现和使用三方库都能满足要求。\n\n## 结论\n\n当然，现在一切都只是试验阶段，后端还没提供数据无法做进一步验证。项目紧急的情况优先使用三方件来快速实现功能，后期需求优化再根据需求判断三方件是否满足。不满足也可以参考其序列化的思路重新实现。\n\n## 后续\n\n不管是三方件还是我们自己实现的高亮都有个共同点——会破坏文档的dom结构也就是要插入比如mark的标签。而我们需求中有一项是文本内容可再编辑，如果标记高亮破坏了dom结构再编辑就不友好了，并且也对全文搜索高亮不友好。后来发现语雀是可以评论的，评论的文本也是会被标记出来的。更神奇的是它没有改变原文本dom结构。很好，那就研究下它到底使用了什么魔法。\n\n![null](https://s2.loli.net/2024/01/08/HXz8aOAneft2hCv.png)\n\n逐步排除文本区dom，果然有意外发现。有个canvas结构正好覆盖再文本区上。好家伙，看到canvas就要凝神——毕竟canvas通常能实现一些意想不到的功能。\n\n![null](https://s2.loli.net/2024/01/08/oGYvajE6NKszeJV.png)\n\n删掉canvas结构后刚添加的两个标记也消失了。\n\n![null](https://s2.loli.net/2024/01/08/dygbFhDKmUC9EQ2.png)\n\n果然是万能的canvas。\n\n如此大体思路就是：生成一个 canvas 元素，让 canvas 元素与需要划词高亮功能的文本容器元素等宽高，并且重叠在文本容器上，划词的时候获取划词区域的文本节点相对于文本容器的位置信息，然后通过这些位置信息进行高亮背景的渲染。\n\n是否采用该方案看项目的进一步需求，目前的标记高亮实现确实有些问题。\n\n插句题外话，全文搜索高亮的常见方案也是插入标签，不过影响不大，因为并不是永久改变dom，取消搜索就会还原称原文本。浏览器 ctrl+f 原生的搜索高亮也没有插入标签也没用到canvas，更没有多余的dom结构，这就很费解？？？\n\n如果能实现跟原生浏览器一样的功能就完美了，后面再研究吧。\n\n## 再续\n\n按照之前的调研结果开始用canvas重构标记功能，啪啪啪一通完成基本功能，直接运用到项目中运行。计划很完美，第一步就失败了😫\n\n![null](https://s2.loli.net/2024/01/08/cGCWqFiuzteEgmZ.png)\n\n666，直接给canvas干崩溃了🤣。在实际项目中直接加载了一本书全部内容，所以文本区完整高度很大，而canvas是直接覆盖在文本区上的， canvas 元素高度太大导致内存占用超出问题。无语啊，居然会遇到这种问题。\n\n如何解决？？？好像可以通过多个canvas依次排列来解决。在不断地调试语雀源码后总算找到了它关于canvas的相关实现，确实是通过多个canvas来解决高度太大的问题。\n\n![null](https://s2.loli.net/2024/01/08/s1OIhuUemAE9VNq.png)\n\nyes，已经看到了胜利的曙光。接下来按部就班的实现对应的功能就行。","slug":"如何实现鼠标标记和标记渲染功能","published":1,"updated":"2024-01-15T07:27:28.259Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrq64z6p000qsoipcqv1cbq4","content":"<h2 id=\"背景需求\"><a href=\"#背景需求\" class=\"headerlink\" title=\"背景需求\"></a>背景需求</h2><p>1、首先通过接口拿到文本和nlp识别后的标记信息</p>\n<p>2、渲染标记到文本中</p>\n<p>3、文本区可鼠标滑动添加标记类型，刷新后同样显示对应标记</p>\n<p>分析上以上需求，不难发现关键点在于2和3。</p>\n<p>当然这只是需求简化后的样子，真实需求取决于业务，我们只讨论内容只有文本的情况，其他情况类似</p>\n<p>第二点渲染标记我最先想到的是后端提供标记文本的位置信息，直接插入一个新标签比如mark来包裹被标记的文本然后替换原来的文本。这么看也不是太难实现😃</p>\n<p>基于第二点的分析，第三点鼠标选择文本肯定也要提供被选中文本的位置信息给后端从而实现标记持久存在</p>\n<h2 id=\"鼠标选中\"><a href=\"#鼠标选中\" class=\"headerlink\" title=\"鼠标选中\"></a>鼠标选中</h2><p>正好浏览器也提供了鼠标选择对应的API——<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/getSelection\">getSelection</a></p>\n<p>同时也在网上进行了调研，所有提供鼠标选择功能的组件或者三方库都是基于getSelection来实现的。</p>\n<p>那好，先基于该API实现一个基本的文本选择功能</p>\n<p>window.addEventListener(‘mouseup’, function () {<br>let selection &#x3D; window.getSelection()<br>})</p>\n<p>一个最基础的文本选择功能就完成了。我们打印下selection对象产看下它里面都有些什么属性</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/HdN3it8cfu2Mz9S.png\" alt=\"null\"></p>\n<p>其中baseOffset和fouceOffset一般表示鼠标选择开始和结束时的位置信息。进一步我们可以拿到选择的range对象</p>\n<p>window.addEventListener(‘mouseup’, function () {<br>let selRange &#x3D; window.getSelection().getRangeAt(0) &#x2F;&#x2F; 默认是0，除了火狐浏览器可多选外，其他浏览器只能单选<br>})</p>\n<p>再打印下range对象，可以看到直接就有start和end的偏移量，而startContainer和endContainer的内容是起点文本和终点文本所在的父级文本。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/D6yX1eEjL25Qgau.png\" alt=\"null\"></p>\n<p>好了，文本位置信息可以拿到问题就解决了一大半。不过考虑到我们是在已经包含标记的文本中进行标记，还需要验证下已有标记的文本选择位置是否有变化（因为插入了标记标签改动了文本结构）。</p>\n<p>给测试文本加上一段标签，如下，再次选中跟之前一样的文本打印range信息</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/Ipv7CJgsUKMWZNP.png\" alt=\"null\"></p>\n<p>还真的不出所料，位置信息发生了变化，查看startContainer可以看到父文本是从标签后第一个字符开始的，而我们需要的是从整段文本的第一个字符开始</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/qKSYrEPayLjM6nJ.png\" alt=\"null\"></p>\n<p>这会导致生成标签出现偏移，不符合我们的需求。因此需要一个方法来将文本节点内偏移量“翻译”为其对应的父节点内部的总体文本偏移量 ——参考 <a href=\"https://www.alienzhou.com/2019/04/21/web-note-highlight-in-js/#5-%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E5%8F%AF%E7%94%A8%E7%9A%84%E2%80%9C%E5%88%92%E8%AF%8D%E9%AB%98%E4%BA%AE%E2%80%9D%EF%BC%9F\">web-highlight</a></p>\n<p>经过验证web-highlight是可以满足我们的需求的。</p>\n<p>实际开发中还要用到父节点的序号和父节点的标签名，我们业务中的标签名是固定的可以不用特殊处理，其他场景下就需要遍历dom</p>\n<h2 id=\"文本标记\"><a href=\"#文本标记\" class=\"headerlink\" title=\"文本标记\"></a>文本标记</h2><p>只要有了标记的起止位置和所处父节点序号我们就可以找到对应的标记文本，生成标记节点包裹对应文本。自己实现和使用三方库都能满足要求。</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>当然，现在一切都只是试验阶段，后端还没提供数据无法做进一步验证。项目紧急的情况优先使用三方件来快速实现功能，后期需求优化再根据需求判断三方件是否满足。不满足也可以参考其序列化的思路重新实现。</p>\n<h2 id=\"后续\"><a href=\"#后续\" class=\"headerlink\" title=\"后续\"></a>后续</h2><p>不管是三方件还是我们自己实现的高亮都有个共同点——会破坏文档的dom结构也就是要插入比如mark的标签。而我们需求中有一项是文本内容可再编辑，如果标记高亮破坏了dom结构再编辑就不友好了，并且也对全文搜索高亮不友好。后来发现语雀是可以评论的，评论的文本也是会被标记出来的。更神奇的是它没有改变原文本dom结构。很好，那就研究下它到底使用了什么魔法。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/HXz8aOAneft2hCv.png\" alt=\"null\"></p>\n<p>逐步排除文本区dom，果然有意外发现。有个canvas结构正好覆盖再文本区上。好家伙，看到canvas就要凝神——毕竟canvas通常能实现一些意想不到的功能。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/oGYvajE6NKszeJV.png\" alt=\"null\"></p>\n<p>删掉canvas结构后刚添加的两个标记也消失了。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/dygbFhDKmUC9EQ2.png\" alt=\"null\"></p>\n<p>果然是万能的canvas。</p>\n<p>如此大体思路就是：生成一个 canvas 元素，让 canvas 元素与需要划词高亮功能的文本容器元素等宽高，并且重叠在文本容器上，划词的时候获取划词区域的文本节点相对于文本容器的位置信息，然后通过这些位置信息进行高亮背景的渲染。</p>\n<p>是否采用该方案看项目的进一步需求，目前的标记高亮实现确实有些问题。</p>\n<p>插句题外话，全文搜索高亮的常见方案也是插入标签，不过影响不大，因为并不是永久改变dom，取消搜索就会还原称原文本。浏览器 ctrl+f 原生的搜索高亮也没有插入标签也没用到canvas，更没有多余的dom结构，这就很费解？？？</p>\n<p>如果能实现跟原生浏览器一样的功能就完美了，后面再研究吧。</p>\n<h2 id=\"再续\"><a href=\"#再续\" class=\"headerlink\" title=\"再续\"></a>再续</h2><p>按照之前的调研结果开始用canvas重构标记功能，啪啪啪一通完成基本功能，直接运用到项目中运行。计划很完美，第一步就失败了😫</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/cGCWqFiuzteEgmZ.png\" alt=\"null\"></p>\n<p>666，直接给canvas干崩溃了🤣。在实际项目中直接加载了一本书全部内容，所以文本区完整高度很大，而canvas是直接覆盖在文本区上的， canvas 元素高度太大导致内存占用超出问题。无语啊，居然会遇到这种问题。</p>\n<p>如何解决？？？好像可以通过多个canvas依次排列来解决。在不断地调试语雀源码后总算找到了它关于canvas的相关实现，确实是通过多个canvas来解决高度太大的问题。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/s1OIhuUemAE9VNq.png\" alt=\"null\"></p>\n<p>yes，已经看到了胜利的曙光。接下来按部就班的实现对应的功能就行。</p>\n","site":{"data":{}},"length":1646,"excerpt":"","more":"<h2 id=\"背景需求\"><a href=\"#背景需求\" class=\"headerlink\" title=\"背景需求\"></a>背景需求</h2><p>1、首先通过接口拿到文本和nlp识别后的标记信息</p>\n<p>2、渲染标记到文本中</p>\n<p>3、文本区可鼠标滑动添加标记类型，刷新后同样显示对应标记</p>\n<p>分析上以上需求，不难发现关键点在于2和3。</p>\n<p>当然这只是需求简化后的样子，真实需求取决于业务，我们只讨论内容只有文本的情况，其他情况类似</p>\n<p>第二点渲染标记我最先想到的是后端提供标记文本的位置信息，直接插入一个新标签比如mark来包裹被标记的文本然后替换原来的文本。这么看也不是太难实现😃</p>\n<p>基于第二点的分析，第三点鼠标选择文本肯定也要提供被选中文本的位置信息给后端从而实现标记持久存在</p>\n<h2 id=\"鼠标选中\"><a href=\"#鼠标选中\" class=\"headerlink\" title=\"鼠标选中\"></a>鼠标选中</h2><p>正好浏览器也提供了鼠标选择对应的API——<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/getSelection\">getSelection</a></p>\n<p>同时也在网上进行了调研，所有提供鼠标选择功能的组件或者三方库都是基于getSelection来实现的。</p>\n<p>那好，先基于该API实现一个基本的文本选择功能</p>\n<p>window.addEventListener(‘mouseup’, function () {<br>let selection &#x3D; window.getSelection()<br>})</p>\n<p>一个最基础的文本选择功能就完成了。我们打印下selection对象产看下它里面都有些什么属性</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/HdN3it8cfu2Mz9S.png\" alt=\"null\"></p>\n<p>其中baseOffset和fouceOffset一般表示鼠标选择开始和结束时的位置信息。进一步我们可以拿到选择的range对象</p>\n<p>window.addEventListener(‘mouseup’, function () {<br>let selRange &#x3D; window.getSelection().getRangeAt(0) &#x2F;&#x2F; 默认是0，除了火狐浏览器可多选外，其他浏览器只能单选<br>})</p>\n<p>再打印下range对象，可以看到直接就有start和end的偏移量，而startContainer和endContainer的内容是起点文本和终点文本所在的父级文本。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/D6yX1eEjL25Qgau.png\" alt=\"null\"></p>\n<p>好了，文本位置信息可以拿到问题就解决了一大半。不过考虑到我们是在已经包含标记的文本中进行标记，还需要验证下已有标记的文本选择位置是否有变化（因为插入了标记标签改动了文本结构）。</p>\n<p>给测试文本加上一段标签，如下，再次选中跟之前一样的文本打印range信息</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/Ipv7CJgsUKMWZNP.png\" alt=\"null\"></p>\n<p>还真的不出所料，位置信息发生了变化，查看startContainer可以看到父文本是从标签后第一个字符开始的，而我们需要的是从整段文本的第一个字符开始</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/qKSYrEPayLjM6nJ.png\" alt=\"null\"></p>\n<p>这会导致生成标签出现偏移，不符合我们的需求。因此需要一个方法来将文本节点内偏移量“翻译”为其对应的父节点内部的总体文本偏移量 ——参考 <a href=\"https://www.alienzhou.com/2019/04/21/web-note-highlight-in-js/#5-%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E5%8F%AF%E7%94%A8%E7%9A%84%E2%80%9C%E5%88%92%E8%AF%8D%E9%AB%98%E4%BA%AE%E2%80%9D%EF%BC%9F\">web-highlight</a></p>\n<p>经过验证web-highlight是可以满足我们的需求的。</p>\n<p>实际开发中还要用到父节点的序号和父节点的标签名，我们业务中的标签名是固定的可以不用特殊处理，其他场景下就需要遍历dom</p>\n<h2 id=\"文本标记\"><a href=\"#文本标记\" class=\"headerlink\" title=\"文本标记\"></a>文本标记</h2><p>只要有了标记的起止位置和所处父节点序号我们就可以找到对应的标记文本，生成标记节点包裹对应文本。自己实现和使用三方库都能满足要求。</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>当然，现在一切都只是试验阶段，后端还没提供数据无法做进一步验证。项目紧急的情况优先使用三方件来快速实现功能，后期需求优化再根据需求判断三方件是否满足。不满足也可以参考其序列化的思路重新实现。</p>\n<h2 id=\"后续\"><a href=\"#后续\" class=\"headerlink\" title=\"后续\"></a>后续</h2><p>不管是三方件还是我们自己实现的高亮都有个共同点——会破坏文档的dom结构也就是要插入比如mark的标签。而我们需求中有一项是文本内容可再编辑，如果标记高亮破坏了dom结构再编辑就不友好了，并且也对全文搜索高亮不友好。后来发现语雀是可以评论的，评论的文本也是会被标记出来的。更神奇的是它没有改变原文本dom结构。很好，那就研究下它到底使用了什么魔法。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/HXz8aOAneft2hCv.png\" alt=\"null\"></p>\n<p>逐步排除文本区dom，果然有意外发现。有个canvas结构正好覆盖再文本区上。好家伙，看到canvas就要凝神——毕竟canvas通常能实现一些意想不到的功能。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/oGYvajE6NKszeJV.png\" alt=\"null\"></p>\n<p>删掉canvas结构后刚添加的两个标记也消失了。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/dygbFhDKmUC9EQ2.png\" alt=\"null\"></p>\n<p>果然是万能的canvas。</p>\n<p>如此大体思路就是：生成一个 canvas 元素，让 canvas 元素与需要划词高亮功能的文本容器元素等宽高，并且重叠在文本容器上，划词的时候获取划词区域的文本节点相对于文本容器的位置信息，然后通过这些位置信息进行高亮背景的渲染。</p>\n<p>是否采用该方案看项目的进一步需求，目前的标记高亮实现确实有些问题。</p>\n<p>插句题外话，全文搜索高亮的常见方案也是插入标签，不过影响不大，因为并不是永久改变dom，取消搜索就会还原称原文本。浏览器 ctrl+f 原生的搜索高亮也没有插入标签也没用到canvas，更没有多余的dom结构，这就很费解？？？</p>\n<p>如果能实现跟原生浏览器一样的功能就完美了，后面再研究吧。</p>\n<h2 id=\"再续\"><a href=\"#再续\" class=\"headerlink\" title=\"再续\"></a>再续</h2><p>按照之前的调研结果开始用canvas重构标记功能，啪啪啪一通完成基本功能，直接运用到项目中运行。计划很完美，第一步就失败了😫</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/cGCWqFiuzteEgmZ.png\" alt=\"null\"></p>\n<p>666，直接给canvas干崩溃了🤣。在实际项目中直接加载了一本书全部内容，所以文本区完整高度很大，而canvas是直接覆盖在文本区上的， canvas 元素高度太大导致内存占用超出问题。无语啊，居然会遇到这种问题。</p>\n<p>如何解决？？？好像可以通过多个canvas依次排列来解决。在不断地调试语雀源码后总算找到了它关于canvas的相关实现，确实是通过多个canvas来解决高度太大的问题。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/s1OIhuUemAE9VNq.png\" alt=\"null\"></p>\n<p>yes，已经看到了胜利的曙光。接下来按部就班的实现对应的功能就行。</p>\n"},{"title":"如何规范git-commit提交","date":"2022-07-06T03:43:32.000Z","_content":"\nGit 每次提交代码，都要写 Commit message（提交说明），否则就不允许提交\n\n```\ngit commit -m \"hello world\n```\n\n上面代码的-m参数，就是用来指定 commit mesage 的。基本上写什么都行，但是，一般来说，commit message 应该清晰明了，说明本次提交的目的。\n\n本文介绍[Angular 规范](https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#heading=h.greljkmo14y0)，这是目前使用最广的写法，比较合理和系统化，并且有配套的工具。如下\n\n![1657074699797-5b2727af-375f-4ec9-8ba2-b78a3e994a67](https://s2.loli.net/2024/01/15/zwVTm4t5dfLNvB7.png)\n\n\n\n通过git commit的时候弹出一个vim编辑器来编辑模板类型的一份提交信息，主要格式如下：\n\n```bash\n<type>(<scope>):<subject>\n<BlLANK_LINE>\n<?body>\n<BLANK_LINE>\n<?footer>\n```\n\n\n\n* 第一行为必填项：主要就是 【提交类型(影响范围):简要描述】\n\n* body为详细描述\n\n* 页脚为破坏性改变或者关闭了某个issues\n\n## Comitizen \n\n[Commitizen](https://github.com/commitizen/cz-cli)是一个撰写合格 Commit message 的工具。\n\n```\nnpm install -g commitizen\n```\n\n然后，在项目目录里，运行下面的命令，使其支持 Angular 的 Commit message 格式。\n\n```\ncommitizen init cz-conventional-changelog --save --save-exact\n```\n\n以后，凡是用到git commit命令，一律改为使用git cz。这时，就会出现选项，用来生成符合格式的 Commit message。\n\n![1657074699797-5b2727af-375f-4ec9-8ba2-b78a3e994a67](https://s2.loli.net/2024/01/15/L1WNUZhQIrSnAGB.png)\n\n进行了上面的操作，其实对于一个自觉地人来说，已经够了，但是没有约束就代表了自由，自由就有人越界，我如果不按约束提交，照样玩的嗨起，那么怎么给这些自由加一些约束呢？\n\n## commitlint校验 \n\n```\nnpm i -D @commitlint/config-conventional @commitlint/cli\n```\n\n在项目更目录下建立配置文件 commitlint.config.js 或者 .commitlintrc.js\n\n```\nmodule.exports = {\n  extents:[\n    \"@commitlint/config-conventional\"\n  ],\n  rules:{\n    'body-leading-blank': [1, 'always'],\n    'footer-leading-blank': [1, 'always'],\n    'header-max-length': [2, 'always', 72],\n    'scope-case': [2, 'always', 'lower-case'],\n    'subject-case': [\n      2,\n      'never',\n      ['sentence-case', 'start-case', 'pascal-case', 'upper-case']\n    ],\n    'subject-empty': [2, 'never'],\n    'subject-full-stop': [2, 'never', '.'],\n    'type-case': [2, 'always', 'lower-case'],\n    'type-empty': [2, 'never'],\n    'type-enum': [\n      2,\n      'always',\n      [\n        'build',\n        'chore',\n        'ci',\n        'docs',\n        'feat',\n        'fix',\n        'improvement',\n        'perf',\n        'refactor',\n        'revert',\n        'style',\n        'test'\n      ]\n    ]\n  }\n}\n```\n\n这样就可以对提交内容进行规范了\n\n## Husky限制 \n\n> husky 负责提供更易用的 git hook。 结合 git hook 来检验 commit message，这样当你的提交不符合规范时就会阻止你提交\n\n```\nnpm set-script prepare \"husky install\"\nnpm run prepare\n```\n\n运行命令\n\n```\nnpm i -D husky\n```\n\n每次运行npm install都会运行prepare命令，安装husky\n\nhusky6.0 版本不在配置package.json文件，改为使用命令生成.husky文件夹\n\n```\nnpx husky-init\n```\n\n会在当前项目根路径下生成.husky文件夹以及pre-commit文件，同时package.json会增加下代码\n\n```\n\"scripts\": {\n  \"prepare\": \"husky install\"\n}\n```\n\n启用git hook钩子\n\n只有全局安装 husky 才能运行以下命令生成commit-msg文件\n\n```\nhusky add .husky/commit-msg \"npx commitlint --edit --verbose\"\n```\n\n否则在.husky下手动创建commit-msg文件\n\n```\n#!/usr/bin/env sh\n. \"$(dirname -- \"$0\")/_/husky.sh\"\n\nnpx commitlint --edit --verbose\n```\n\n当你有不符合规范的时候你将提交不了\n\n安装其他 git 钩子只需要执行```husky add .husky/钩子名字 \"指令\"```就行了\n\n比如可以添加pre-commit钩子在提交前对代码进行格式化\n\n命令生成\n\n```\nhusky add .husky/pre-commit \"npx lint-staged\"\n```\n\n手动新建pre-commit文件\n\n```\n#!/usr/bin/env sh\n. \"$(dirname -- \"$0\")/_/husky.sh\"\n\nnpx lint-staged\n```\n\n然后安装lint-staged插件\n\n```\nnpm install -D lint-staged\n```\n\n在package.json里添加\n\n```\n \"lint-staged\": {\n    \"src/**/*.{js,vue}\": [\n      \"eslint --fix\",\n      \"git add\"\n    ]\n  },\n```\n\n最终在提交时都会进行commit-msg验证和代码格式化\n\n\n\n## 自定义提交规范 \n\n如果我们想自定义提交规范也是可以的\n\n```\nnpm i -D commitlint-config-cz  cz-customizable\n```\n\n并且在项目根目录创建.cz-config.js\n\ncommitlint.config.js，主要区别是extends，可以只用cz\n\n```\nmodule.exports = {\n  extends: ['@commitlint/config-conventional', 'cz'],\n  rules: {\n    'type-enum': [\n      2,\n      'always',\n      [\n        'feature', // 新功能（feature）\n        'fix', // 修补bug\n        'ui', // 更新 ui\n        'docs', // 文档（documentation）\n        'style', // 格式（不影响代码运行的变动）\n        'perf', // 性能优化\n        'release', // 发布\n        'ci', // 集成流程修改（Travis,gitlab ci）\n        'refactor', // 代码重构\n        'chore', // 不属于以上类型的其他类型(日常事务)\n        'revert', // 回退\n        'merge', // 合并分支\n        'build' // 构建系统的修改\n      ]\n    ],\n    // <type> 格式 小写\n    'type-case': [2, 'always', 'lower-case'],\n    // <type> 不能为空\n    'type-empty': [2, 'never'],\n    // <scope> 范围不能为空\n    'scope-empty': [0],\n    // <scope> 范围格式\n    'scope-case': [0],\n    // <subject> 主要 message 不能为空\n    'subject-empty': [2, 'never'],\n    // <subject> 以什么为结束标志，禁用\n    'subject-full-stop': [0, 'never'],\n    // <subject> 格式，禁用\n    'subject-case': [0, 'never'],\n    // <body> 以空行开头\n    'body-leading-blank': [1, 'always'],\n    'header-max-length': [0, 'always', 72]\n  }\n}\n```\n\n修改package.json\n\n```\n\"config\": {\n    \"commitizen\": {\n      \"path\": \"node_modules/cz-customizable\"\n    }\n  },\n```\n\n.cz-config.js（这是目前已在项目中使用的配置）\n\n```\nmodule.exports = {\n  types: [\n    { value: 'feature', name: 'feature: 增加新功能' },\n    { value: 'fix', name: 'fix: 修复bug' },\n    { value: 'chore',name: 'chore: 日常提交' },\n    { value: 'ui', name: 'ui: 更新UI' },\n    { value: 'docs', name: 'docs: 文档变更' },\n    { value: 'style', name: 'style: 代码格式' },\n    { value: 'perf', name: 'perf: 性能优化' },\n    { value: 'refactor',name: 'refactor: 代码重构' },\n    { value: 'merge', name: 'merge: 合并分支' },\n    { value: 'revert', name: 'revert: 回退' },\n    { value: 'build', name: 'build: 构建文件变动' },\n    { value: 'ci', name: 'ci: 集成流程变动' },\n    { value: 'release', name: 'release: 发布' }\n  ],\n  // override the messages, defaults are as follows\n  messages: {\n    type: '请选择提交类型:',\n    customScope: '请输入您修改的范围(可选):',\n    subject: '请简要描述提交 message (必填):',\n    body: '请输入详细描述(可选，待优化去除，跳过即可):',\n    footer: '请输入要关闭的issue(待优化去除，跳过即可):',\n    confirmCommit: '确认使用以上信息提交？(y/n/e/h)'\n  },\n  allowCustomScopes: true,\n  skipQuestions: ['body', 'footer'],\n  subjectLimit: 72\n}\n```\n\n到此，一个完整规范的git commit就完成了\n\n\n\n## 最后\n\n如果不想自己手动配置也可以使用三方库，比如[cz-git](https://cz-git.qbb.sh/zh/)\n","source":"_posts/如何规范git-commit提交.md","raw":"---\ntitle: 如何规范git-commit提交\ndate: 2022-07-06 11:43:32\ntags:\n    - git\n---\n\nGit 每次提交代码，都要写 Commit message（提交说明），否则就不允许提交\n\n```\ngit commit -m \"hello world\n```\n\n上面代码的-m参数，就是用来指定 commit mesage 的。基本上写什么都行，但是，一般来说，commit message 应该清晰明了，说明本次提交的目的。\n\n本文介绍[Angular 规范](https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#heading=h.greljkmo14y0)，这是目前使用最广的写法，比较合理和系统化，并且有配套的工具。如下\n\n![1657074699797-5b2727af-375f-4ec9-8ba2-b78a3e994a67](https://s2.loli.net/2024/01/15/zwVTm4t5dfLNvB7.png)\n\n\n\n通过git commit的时候弹出一个vim编辑器来编辑模板类型的一份提交信息，主要格式如下：\n\n```bash\n<type>(<scope>):<subject>\n<BlLANK_LINE>\n<?body>\n<BLANK_LINE>\n<?footer>\n```\n\n\n\n* 第一行为必填项：主要就是 【提交类型(影响范围):简要描述】\n\n* body为详细描述\n\n* 页脚为破坏性改变或者关闭了某个issues\n\n## Comitizen \n\n[Commitizen](https://github.com/commitizen/cz-cli)是一个撰写合格 Commit message 的工具。\n\n```\nnpm install -g commitizen\n```\n\n然后，在项目目录里，运行下面的命令，使其支持 Angular 的 Commit message 格式。\n\n```\ncommitizen init cz-conventional-changelog --save --save-exact\n```\n\n以后，凡是用到git commit命令，一律改为使用git cz。这时，就会出现选项，用来生成符合格式的 Commit message。\n\n![1657074699797-5b2727af-375f-4ec9-8ba2-b78a3e994a67](https://s2.loli.net/2024/01/15/L1WNUZhQIrSnAGB.png)\n\n进行了上面的操作，其实对于一个自觉地人来说，已经够了，但是没有约束就代表了自由，自由就有人越界，我如果不按约束提交，照样玩的嗨起，那么怎么给这些自由加一些约束呢？\n\n## commitlint校验 \n\n```\nnpm i -D @commitlint/config-conventional @commitlint/cli\n```\n\n在项目更目录下建立配置文件 commitlint.config.js 或者 .commitlintrc.js\n\n```\nmodule.exports = {\n  extents:[\n    \"@commitlint/config-conventional\"\n  ],\n  rules:{\n    'body-leading-blank': [1, 'always'],\n    'footer-leading-blank': [1, 'always'],\n    'header-max-length': [2, 'always', 72],\n    'scope-case': [2, 'always', 'lower-case'],\n    'subject-case': [\n      2,\n      'never',\n      ['sentence-case', 'start-case', 'pascal-case', 'upper-case']\n    ],\n    'subject-empty': [2, 'never'],\n    'subject-full-stop': [2, 'never', '.'],\n    'type-case': [2, 'always', 'lower-case'],\n    'type-empty': [2, 'never'],\n    'type-enum': [\n      2,\n      'always',\n      [\n        'build',\n        'chore',\n        'ci',\n        'docs',\n        'feat',\n        'fix',\n        'improvement',\n        'perf',\n        'refactor',\n        'revert',\n        'style',\n        'test'\n      ]\n    ]\n  }\n}\n```\n\n这样就可以对提交内容进行规范了\n\n## Husky限制 \n\n> husky 负责提供更易用的 git hook。 结合 git hook 来检验 commit message，这样当你的提交不符合规范时就会阻止你提交\n\n```\nnpm set-script prepare \"husky install\"\nnpm run prepare\n```\n\n运行命令\n\n```\nnpm i -D husky\n```\n\n每次运行npm install都会运行prepare命令，安装husky\n\nhusky6.0 版本不在配置package.json文件，改为使用命令生成.husky文件夹\n\n```\nnpx husky-init\n```\n\n会在当前项目根路径下生成.husky文件夹以及pre-commit文件，同时package.json会增加下代码\n\n```\n\"scripts\": {\n  \"prepare\": \"husky install\"\n}\n```\n\n启用git hook钩子\n\n只有全局安装 husky 才能运行以下命令生成commit-msg文件\n\n```\nhusky add .husky/commit-msg \"npx commitlint --edit --verbose\"\n```\n\n否则在.husky下手动创建commit-msg文件\n\n```\n#!/usr/bin/env sh\n. \"$(dirname -- \"$0\")/_/husky.sh\"\n\nnpx commitlint --edit --verbose\n```\n\n当你有不符合规范的时候你将提交不了\n\n安装其他 git 钩子只需要执行```husky add .husky/钩子名字 \"指令\"```就行了\n\n比如可以添加pre-commit钩子在提交前对代码进行格式化\n\n命令生成\n\n```\nhusky add .husky/pre-commit \"npx lint-staged\"\n```\n\n手动新建pre-commit文件\n\n```\n#!/usr/bin/env sh\n. \"$(dirname -- \"$0\")/_/husky.sh\"\n\nnpx lint-staged\n```\n\n然后安装lint-staged插件\n\n```\nnpm install -D lint-staged\n```\n\n在package.json里添加\n\n```\n \"lint-staged\": {\n    \"src/**/*.{js,vue}\": [\n      \"eslint --fix\",\n      \"git add\"\n    ]\n  },\n```\n\n最终在提交时都会进行commit-msg验证和代码格式化\n\n\n\n## 自定义提交规范 \n\n如果我们想自定义提交规范也是可以的\n\n```\nnpm i -D commitlint-config-cz  cz-customizable\n```\n\n并且在项目根目录创建.cz-config.js\n\ncommitlint.config.js，主要区别是extends，可以只用cz\n\n```\nmodule.exports = {\n  extends: ['@commitlint/config-conventional', 'cz'],\n  rules: {\n    'type-enum': [\n      2,\n      'always',\n      [\n        'feature', // 新功能（feature）\n        'fix', // 修补bug\n        'ui', // 更新 ui\n        'docs', // 文档（documentation）\n        'style', // 格式（不影响代码运行的变动）\n        'perf', // 性能优化\n        'release', // 发布\n        'ci', // 集成流程修改（Travis,gitlab ci）\n        'refactor', // 代码重构\n        'chore', // 不属于以上类型的其他类型(日常事务)\n        'revert', // 回退\n        'merge', // 合并分支\n        'build' // 构建系统的修改\n      ]\n    ],\n    // <type> 格式 小写\n    'type-case': [2, 'always', 'lower-case'],\n    // <type> 不能为空\n    'type-empty': [2, 'never'],\n    // <scope> 范围不能为空\n    'scope-empty': [0],\n    // <scope> 范围格式\n    'scope-case': [0],\n    // <subject> 主要 message 不能为空\n    'subject-empty': [2, 'never'],\n    // <subject> 以什么为结束标志，禁用\n    'subject-full-stop': [0, 'never'],\n    // <subject> 格式，禁用\n    'subject-case': [0, 'never'],\n    // <body> 以空行开头\n    'body-leading-blank': [1, 'always'],\n    'header-max-length': [0, 'always', 72]\n  }\n}\n```\n\n修改package.json\n\n```\n\"config\": {\n    \"commitizen\": {\n      \"path\": \"node_modules/cz-customizable\"\n    }\n  },\n```\n\n.cz-config.js（这是目前已在项目中使用的配置）\n\n```\nmodule.exports = {\n  types: [\n    { value: 'feature', name: 'feature: 增加新功能' },\n    { value: 'fix', name: 'fix: 修复bug' },\n    { value: 'chore',name: 'chore: 日常提交' },\n    { value: 'ui', name: 'ui: 更新UI' },\n    { value: 'docs', name: 'docs: 文档变更' },\n    { value: 'style', name: 'style: 代码格式' },\n    { value: 'perf', name: 'perf: 性能优化' },\n    { value: 'refactor',name: 'refactor: 代码重构' },\n    { value: 'merge', name: 'merge: 合并分支' },\n    { value: 'revert', name: 'revert: 回退' },\n    { value: 'build', name: 'build: 构建文件变动' },\n    { value: 'ci', name: 'ci: 集成流程变动' },\n    { value: 'release', name: 'release: 发布' }\n  ],\n  // override the messages, defaults are as follows\n  messages: {\n    type: '请选择提交类型:',\n    customScope: '请输入您修改的范围(可选):',\n    subject: '请简要描述提交 message (必填):',\n    body: '请输入详细描述(可选，待优化去除，跳过即可):',\n    footer: '请输入要关闭的issue(待优化去除，跳过即可):',\n    confirmCommit: '确认使用以上信息提交？(y/n/e/h)'\n  },\n  allowCustomScopes: true,\n  skipQuestions: ['body', 'footer'],\n  subjectLimit: 72\n}\n```\n\n到此，一个完整规范的git commit就完成了\n\n\n\n## 最后\n\n如果不想自己手动配置也可以使用三方库，比如[cz-git](https://cz-git.qbb.sh/zh/)\n","slug":"如何规范git-commit提交","published":1,"updated":"2024-01-15T08:28:17.219Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrq64z6t000tsoipf27ned8w","content":"<p>Git 每次提交代码，都要写 Commit message（提交说明），否则就不允许提交</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m &quot;hello world</span><br></pre></td></tr></table></figure>\n\n<p>上面代码的-m参数，就是用来指定 commit mesage 的。基本上写什么都行，但是，一般来说，commit message 应该清晰明了，说明本次提交的目的。</p>\n<p>本文介绍<a href=\"https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#heading=h.greljkmo14y0\">Angular 规范</a>，这是目前使用最广的写法，比较合理和系统化，并且有配套的工具。如下</p>\n<p><img src=\"https://s2.loli.net/2024/01/15/zwVTm4t5dfLNvB7.png\" alt=\"1657074699797-5b2727af-375f-4ec9-8ba2-b78a3e994a67\"></p>\n<p>通过git commit的时候弹出一个vim编辑器来编辑模板类型的一份提交信息，主要格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"built_in\">type</span>&gt;(&lt;scope&gt;):&lt;subject&gt;</span><br><span class=\"line\">&lt;BlLANK_LINE&gt;</span><br><span class=\"line\">&lt;?body&gt;</span><br><span class=\"line\">&lt;BLANK_LINE&gt;</span><br><span class=\"line\">&lt;?footer&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><p>第一行为必填项：主要就是 【提交类型(影响范围):简要描述】</p>\n</li>\n<li><p>body为详细描述</p>\n</li>\n<li><p>页脚为破坏性改变或者关闭了某个issues</p>\n</li>\n</ul>\n<h2 id=\"Comitizen\"><a href=\"#Comitizen\" class=\"headerlink\" title=\"Comitizen\"></a>Comitizen</h2><p><a href=\"https://github.com/commitizen/cz-cli\">Commitizen</a>是一个撰写合格 Commit message 的工具。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g commitizen</span><br></pre></td></tr></table></figure>\n\n<p>然后，在项目目录里，运行下面的命令，使其支持 Angular 的 Commit message 格式。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">commitizen init cz-conventional-changelog --save --save-exact</span><br></pre></td></tr></table></figure>\n\n<p>以后，凡是用到git commit命令，一律改为使用git cz。这时，就会出现选项，用来生成符合格式的 Commit message。</p>\n<p><img src=\"https://s2.loli.net/2024/01/15/L1WNUZhQIrSnAGB.png\" alt=\"1657074699797-5b2727af-375f-4ec9-8ba2-b78a3e994a67\"></p>\n<p>进行了上面的操作，其实对于一个自觉地人来说，已经够了，但是没有约束就代表了自由，自由就有人越界，我如果不按约束提交，照样玩的嗨起，那么怎么给这些自由加一些约束呢？</p>\n<h2 id=\"commitlint校验\"><a href=\"#commitlint校验\" class=\"headerlink\" title=\"commitlint校验\"></a>commitlint校验</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D @commitlint/config-conventional @commitlint/cli</span><br></pre></td></tr></table></figure>\n\n<p>在项目更目录下建立配置文件 commitlint.config.js 或者 .commitlintrc.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  extents:[</span><br><span class=\"line\">    &quot;@commitlint/config-conventional&quot;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  rules:&#123;</span><br><span class=\"line\">    &#x27;body-leading-blank&#x27;: [1, &#x27;always&#x27;],</span><br><span class=\"line\">    &#x27;footer-leading-blank&#x27;: [1, &#x27;always&#x27;],</span><br><span class=\"line\">    &#x27;header-max-length&#x27;: [2, &#x27;always&#x27;, 72],</span><br><span class=\"line\">    &#x27;scope-case&#x27;: [2, &#x27;always&#x27;, &#x27;lower-case&#x27;],</span><br><span class=\"line\">    &#x27;subject-case&#x27;: [</span><br><span class=\"line\">      2,</span><br><span class=\"line\">      &#x27;never&#x27;,</span><br><span class=\"line\">      [&#x27;sentence-case&#x27;, &#x27;start-case&#x27;, &#x27;pascal-case&#x27;, &#x27;upper-case&#x27;]</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &#x27;subject-empty&#x27;: [2, &#x27;never&#x27;],</span><br><span class=\"line\">    &#x27;subject-full-stop&#x27;: [2, &#x27;never&#x27;, &#x27;.&#x27;],</span><br><span class=\"line\">    &#x27;type-case&#x27;: [2, &#x27;always&#x27;, &#x27;lower-case&#x27;],</span><br><span class=\"line\">    &#x27;type-empty&#x27;: [2, &#x27;never&#x27;],</span><br><span class=\"line\">    &#x27;type-enum&#x27;: [</span><br><span class=\"line\">      2,</span><br><span class=\"line\">      &#x27;always&#x27;,</span><br><span class=\"line\">      [</span><br><span class=\"line\">        &#x27;build&#x27;,</span><br><span class=\"line\">        &#x27;chore&#x27;,</span><br><span class=\"line\">        &#x27;ci&#x27;,</span><br><span class=\"line\">        &#x27;docs&#x27;,</span><br><span class=\"line\">        &#x27;feat&#x27;,</span><br><span class=\"line\">        &#x27;fix&#x27;,</span><br><span class=\"line\">        &#x27;improvement&#x27;,</span><br><span class=\"line\">        &#x27;perf&#x27;,</span><br><span class=\"line\">        &#x27;refactor&#x27;,</span><br><span class=\"line\">        &#x27;revert&#x27;,</span><br><span class=\"line\">        &#x27;style&#x27;,</span><br><span class=\"line\">        &#x27;test&#x27;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样就可以对提交内容进行规范了</p>\n<h2 id=\"Husky限制\"><a href=\"#Husky限制\" class=\"headerlink\" title=\"Husky限制\"></a>Husky限制</h2><blockquote>\n<p>husky 负责提供更易用的 git hook。 结合 git hook 来检验 commit message，这样当你的提交不符合规范时就会阻止你提交</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm set-script prepare &quot;husky install&quot;</span><br><span class=\"line\">npm run prepare</span><br></pre></td></tr></table></figure>\n\n<p>运行命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D husky</span><br></pre></td></tr></table></figure>\n\n<p>每次运行npm install都会运行prepare命令，安装husky</p>\n<p>husky6.0 版本不在配置package.json文件，改为使用命令生成.husky文件夹</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx husky-init</span><br></pre></td></tr></table></figure>\n\n<p>会在当前项目根路径下生成.husky文件夹以及pre-commit文件，同时package.json会增加下代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">  &quot;prepare&quot;: &quot;husky install&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启用git hook钩子</p>\n<p>只有全局安装 husky 才能运行以下命令生成commit-msg文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">husky add .husky/commit-msg &quot;npx commitlint --edit --verbose&quot;</span><br></pre></td></tr></table></figure>\n\n<p>否则在.husky下手动创建commit-msg文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env sh</span><br><span class=\"line\">. &quot;$(dirname -- &quot;$0&quot;)/_/husky.sh&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">npx commitlint --edit --verbose</span><br></pre></td></tr></table></figure>\n\n<p>当你有不符合规范的时候你将提交不了</p>\n<p>安装其他 git 钩子只需要执行<code>husky add .husky/钩子名字 &quot;指令&quot;</code>就行了</p>\n<p>比如可以添加pre-commit钩子在提交前对代码进行格式化</p>\n<p>命令生成</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">husky add .husky/pre-commit &quot;npx lint-staged&quot;</span><br></pre></td></tr></table></figure>\n\n<p>手动新建pre-commit文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env sh</span><br><span class=\"line\">. &quot;$(dirname -- &quot;$0&quot;)/_/husky.sh&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">npx lint-staged</span><br></pre></td></tr></table></figure>\n\n<p>然后安装lint-staged插件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -D lint-staged</span><br></pre></td></tr></table></figure>\n\n<p>在package.json里添加</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;lint-staged&quot;: &#123;</span><br><span class=\"line\">   &quot;src/**/*.&#123;js,vue&#125;&quot;: [</span><br><span class=\"line\">     &quot;eslint --fix&quot;,</span><br><span class=\"line\">     &quot;git add&quot;</span><br><span class=\"line\">   ]</span><br><span class=\"line\"> &#125;,</span><br></pre></td></tr></table></figure>\n\n<p>最终在提交时都会进行commit-msg验证和代码格式化</p>\n<h2 id=\"自定义提交规范\"><a href=\"#自定义提交规范\" class=\"headerlink\" title=\"自定义提交规范\"></a>自定义提交规范</h2><p>如果我们想自定义提交规范也是可以的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D commitlint-config-cz  cz-customizable</span><br></pre></td></tr></table></figure>\n\n<p>并且在项目根目录创建.cz-config.js</p>\n<p>commitlint.config.js，主要区别是extends，可以只用cz</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  extends: [&#x27;@commitlint/config-conventional&#x27;, &#x27;cz&#x27;],</span><br><span class=\"line\">  rules: &#123;</span><br><span class=\"line\">    &#x27;type-enum&#x27;: [</span><br><span class=\"line\">      2,</span><br><span class=\"line\">      &#x27;always&#x27;,</span><br><span class=\"line\">      [</span><br><span class=\"line\">        &#x27;feature&#x27;, // 新功能（feature）</span><br><span class=\"line\">        &#x27;fix&#x27;, // 修补bug</span><br><span class=\"line\">        &#x27;ui&#x27;, // 更新 ui</span><br><span class=\"line\">        &#x27;docs&#x27;, // 文档（documentation）</span><br><span class=\"line\">        &#x27;style&#x27;, // 格式（不影响代码运行的变动）</span><br><span class=\"line\">        &#x27;perf&#x27;, // 性能优化</span><br><span class=\"line\">        &#x27;release&#x27;, // 发布</span><br><span class=\"line\">        &#x27;ci&#x27;, // 集成流程修改（Travis,gitlab ci）</span><br><span class=\"line\">        &#x27;refactor&#x27;, // 代码重构</span><br><span class=\"line\">        &#x27;chore&#x27;, // 不属于以上类型的其他类型(日常事务)</span><br><span class=\"line\">        &#x27;revert&#x27;, // 回退</span><br><span class=\"line\">        &#x27;merge&#x27;, // 合并分支</span><br><span class=\"line\">        &#x27;build&#x27; // 构建系统的修改</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    // &lt;type&gt; 格式 小写</span><br><span class=\"line\">    &#x27;type-case&#x27;: [2, &#x27;always&#x27;, &#x27;lower-case&#x27;],</span><br><span class=\"line\">    // &lt;type&gt; 不能为空</span><br><span class=\"line\">    &#x27;type-empty&#x27;: [2, &#x27;never&#x27;],</span><br><span class=\"line\">    // &lt;scope&gt; 范围不能为空</span><br><span class=\"line\">    &#x27;scope-empty&#x27;: [0],</span><br><span class=\"line\">    // &lt;scope&gt; 范围格式</span><br><span class=\"line\">    &#x27;scope-case&#x27;: [0],</span><br><span class=\"line\">    // &lt;subject&gt; 主要 message 不能为空</span><br><span class=\"line\">    &#x27;subject-empty&#x27;: [2, &#x27;never&#x27;],</span><br><span class=\"line\">    // &lt;subject&gt; 以什么为结束标志，禁用</span><br><span class=\"line\">    &#x27;subject-full-stop&#x27;: [0, &#x27;never&#x27;],</span><br><span class=\"line\">    // &lt;subject&gt; 格式，禁用</span><br><span class=\"line\">    &#x27;subject-case&#x27;: [0, &#x27;never&#x27;],</span><br><span class=\"line\">    // &lt;body&gt; 以空行开头</span><br><span class=\"line\">    &#x27;body-leading-blank&#x27;: [1, &#x27;always&#x27;],</span><br><span class=\"line\">    &#x27;header-max-length&#x27;: [0, &#x27;always&#x27;, 72]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改package.json</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;config&quot;: &#123;</span><br><span class=\"line\">    &quot;commitizen&quot;: &#123;</span><br><span class=\"line\">      &quot;path&quot;: &quot;node_modules/cz-customizable&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n\n<p>.cz-config.js（这是目前已在项目中使用的配置）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  types: [</span><br><span class=\"line\">    &#123; value: &#x27;feature&#x27;, name: &#x27;feature: 增加新功能&#x27; &#125;,</span><br><span class=\"line\">    &#123; value: &#x27;fix&#x27;, name: &#x27;fix: 修复bug&#x27; &#125;,</span><br><span class=\"line\">    &#123; value: &#x27;chore&#x27;,name: &#x27;chore: 日常提交&#x27; &#125;,</span><br><span class=\"line\">    &#123; value: &#x27;ui&#x27;, name: &#x27;ui: 更新UI&#x27; &#125;,</span><br><span class=\"line\">    &#123; value: &#x27;docs&#x27;, name: &#x27;docs: 文档变更&#x27; &#125;,</span><br><span class=\"line\">    &#123; value: &#x27;style&#x27;, name: &#x27;style: 代码格式&#x27; &#125;,</span><br><span class=\"line\">    &#123; value: &#x27;perf&#x27;, name: &#x27;perf: 性能优化&#x27; &#125;,</span><br><span class=\"line\">    &#123; value: &#x27;refactor&#x27;,name: &#x27;refactor: 代码重构&#x27; &#125;,</span><br><span class=\"line\">    &#123; value: &#x27;merge&#x27;, name: &#x27;merge: 合并分支&#x27; &#125;,</span><br><span class=\"line\">    &#123; value: &#x27;revert&#x27;, name: &#x27;revert: 回退&#x27; &#125;,</span><br><span class=\"line\">    &#123; value: &#x27;build&#x27;, name: &#x27;build: 构建文件变动&#x27; &#125;,</span><br><span class=\"line\">    &#123; value: &#x27;ci&#x27;, name: &#x27;ci: 集成流程变动&#x27; &#125;,</span><br><span class=\"line\">    &#123; value: &#x27;release&#x27;, name: &#x27;release: 发布&#x27; &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  // override the messages, defaults are as follows</span><br><span class=\"line\">  messages: &#123;</span><br><span class=\"line\">    type: &#x27;请选择提交类型:&#x27;,</span><br><span class=\"line\">    customScope: &#x27;请输入您修改的范围(可选):&#x27;,</span><br><span class=\"line\">    subject: &#x27;请简要描述提交 message (必填):&#x27;,</span><br><span class=\"line\">    body: &#x27;请输入详细描述(可选，待优化去除，跳过即可):&#x27;,</span><br><span class=\"line\">    footer: &#x27;请输入要关闭的issue(待优化去除，跳过即可):&#x27;,</span><br><span class=\"line\">    confirmCommit: &#x27;确认使用以上信息提交？(y/n/e/h)&#x27;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  allowCustomScopes: true,</span><br><span class=\"line\">  skipQuestions: [&#x27;body&#x27;, &#x27;footer&#x27;],</span><br><span class=\"line\">  subjectLimit: 72</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>到此，一个完整规范的git commit就完成了</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>如果不想自己手动配置也可以使用三方库，比如<a href=\"https://cz-git.qbb.sh/zh/\">cz-git</a></p>\n","site":{"data":{}},"length":1340,"excerpt":"","more":"<p>Git 每次提交代码，都要写 Commit message（提交说明），否则就不允许提交</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m &quot;hello world</span><br></pre></td></tr></table></figure>\n\n<p>上面代码的-m参数，就是用来指定 commit mesage 的。基本上写什么都行，但是，一般来说，commit message 应该清晰明了，说明本次提交的目的。</p>\n<p>本文介绍<a href=\"https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#heading=h.greljkmo14y0\">Angular 规范</a>，这是目前使用最广的写法，比较合理和系统化，并且有配套的工具。如下</p>\n<p><img src=\"https://s2.loli.net/2024/01/15/zwVTm4t5dfLNvB7.png\" alt=\"1657074699797-5b2727af-375f-4ec9-8ba2-b78a3e994a67\"></p>\n<p>通过git commit的时候弹出一个vim编辑器来编辑模板类型的一份提交信息，主要格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"built_in\">type</span>&gt;(&lt;scope&gt;):&lt;subject&gt;</span><br><span class=\"line\">&lt;BlLANK_LINE&gt;</span><br><span class=\"line\">&lt;?body&gt;</span><br><span class=\"line\">&lt;BLANK_LINE&gt;</span><br><span class=\"line\">&lt;?footer&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><p>第一行为必填项：主要就是 【提交类型(影响范围):简要描述】</p>\n</li>\n<li><p>body为详细描述</p>\n</li>\n<li><p>页脚为破坏性改变或者关闭了某个issues</p>\n</li>\n</ul>\n<h2 id=\"Comitizen\"><a href=\"#Comitizen\" class=\"headerlink\" title=\"Comitizen\"></a>Comitizen</h2><p><a href=\"https://github.com/commitizen/cz-cli\">Commitizen</a>是一个撰写合格 Commit message 的工具。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g commitizen</span><br></pre></td></tr></table></figure>\n\n<p>然后，在项目目录里，运行下面的命令，使其支持 Angular 的 Commit message 格式。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">commitizen init cz-conventional-changelog --save --save-exact</span><br></pre></td></tr></table></figure>\n\n<p>以后，凡是用到git commit命令，一律改为使用git cz。这时，就会出现选项，用来生成符合格式的 Commit message。</p>\n<p><img src=\"https://s2.loli.net/2024/01/15/L1WNUZhQIrSnAGB.png\" alt=\"1657074699797-5b2727af-375f-4ec9-8ba2-b78a3e994a67\"></p>\n<p>进行了上面的操作，其实对于一个自觉地人来说，已经够了，但是没有约束就代表了自由，自由就有人越界，我如果不按约束提交，照样玩的嗨起，那么怎么给这些自由加一些约束呢？</p>\n<h2 id=\"commitlint校验\"><a href=\"#commitlint校验\" class=\"headerlink\" title=\"commitlint校验\"></a>commitlint校验</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D @commitlint/config-conventional @commitlint/cli</span><br></pre></td></tr></table></figure>\n\n<p>在项目更目录下建立配置文件 commitlint.config.js 或者 .commitlintrc.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  extents:[</span><br><span class=\"line\">    &quot;@commitlint/config-conventional&quot;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  rules:&#123;</span><br><span class=\"line\">    &#x27;body-leading-blank&#x27;: [1, &#x27;always&#x27;],</span><br><span class=\"line\">    &#x27;footer-leading-blank&#x27;: [1, &#x27;always&#x27;],</span><br><span class=\"line\">    &#x27;header-max-length&#x27;: [2, &#x27;always&#x27;, 72],</span><br><span class=\"line\">    &#x27;scope-case&#x27;: [2, &#x27;always&#x27;, &#x27;lower-case&#x27;],</span><br><span class=\"line\">    &#x27;subject-case&#x27;: [</span><br><span class=\"line\">      2,</span><br><span class=\"line\">      &#x27;never&#x27;,</span><br><span class=\"line\">      [&#x27;sentence-case&#x27;, &#x27;start-case&#x27;, &#x27;pascal-case&#x27;, &#x27;upper-case&#x27;]</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &#x27;subject-empty&#x27;: [2, &#x27;never&#x27;],</span><br><span class=\"line\">    &#x27;subject-full-stop&#x27;: [2, &#x27;never&#x27;, &#x27;.&#x27;],</span><br><span class=\"line\">    &#x27;type-case&#x27;: [2, &#x27;always&#x27;, &#x27;lower-case&#x27;],</span><br><span class=\"line\">    &#x27;type-empty&#x27;: [2, &#x27;never&#x27;],</span><br><span class=\"line\">    &#x27;type-enum&#x27;: [</span><br><span class=\"line\">      2,</span><br><span class=\"line\">      &#x27;always&#x27;,</span><br><span class=\"line\">      [</span><br><span class=\"line\">        &#x27;build&#x27;,</span><br><span class=\"line\">        &#x27;chore&#x27;,</span><br><span class=\"line\">        &#x27;ci&#x27;,</span><br><span class=\"line\">        &#x27;docs&#x27;,</span><br><span class=\"line\">        &#x27;feat&#x27;,</span><br><span class=\"line\">        &#x27;fix&#x27;,</span><br><span class=\"line\">        &#x27;improvement&#x27;,</span><br><span class=\"line\">        &#x27;perf&#x27;,</span><br><span class=\"line\">        &#x27;refactor&#x27;,</span><br><span class=\"line\">        &#x27;revert&#x27;,</span><br><span class=\"line\">        &#x27;style&#x27;,</span><br><span class=\"line\">        &#x27;test&#x27;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样就可以对提交内容进行规范了</p>\n<h2 id=\"Husky限制\"><a href=\"#Husky限制\" class=\"headerlink\" title=\"Husky限制\"></a>Husky限制</h2><blockquote>\n<p>husky 负责提供更易用的 git hook。 结合 git hook 来检验 commit message，这样当你的提交不符合规范时就会阻止你提交</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm set-script prepare &quot;husky install&quot;</span><br><span class=\"line\">npm run prepare</span><br></pre></td></tr></table></figure>\n\n<p>运行命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D husky</span><br></pre></td></tr></table></figure>\n\n<p>每次运行npm install都会运行prepare命令，安装husky</p>\n<p>husky6.0 版本不在配置package.json文件，改为使用命令生成.husky文件夹</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx husky-init</span><br></pre></td></tr></table></figure>\n\n<p>会在当前项目根路径下生成.husky文件夹以及pre-commit文件，同时package.json会增加下代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">  &quot;prepare&quot;: &quot;husky install&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启用git hook钩子</p>\n<p>只有全局安装 husky 才能运行以下命令生成commit-msg文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">husky add .husky/commit-msg &quot;npx commitlint --edit --verbose&quot;</span><br></pre></td></tr></table></figure>\n\n<p>否则在.husky下手动创建commit-msg文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env sh</span><br><span class=\"line\">. &quot;$(dirname -- &quot;$0&quot;)/_/husky.sh&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">npx commitlint --edit --verbose</span><br></pre></td></tr></table></figure>\n\n<p>当你有不符合规范的时候你将提交不了</p>\n<p>安装其他 git 钩子只需要执行<code>husky add .husky/钩子名字 &quot;指令&quot;</code>就行了</p>\n<p>比如可以添加pre-commit钩子在提交前对代码进行格式化</p>\n<p>命令生成</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">husky add .husky/pre-commit &quot;npx lint-staged&quot;</span><br></pre></td></tr></table></figure>\n\n<p>手动新建pre-commit文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env sh</span><br><span class=\"line\">. &quot;$(dirname -- &quot;$0&quot;)/_/husky.sh&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">npx lint-staged</span><br></pre></td></tr></table></figure>\n\n<p>然后安装lint-staged插件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -D lint-staged</span><br></pre></td></tr></table></figure>\n\n<p>在package.json里添加</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;lint-staged&quot;: &#123;</span><br><span class=\"line\">   &quot;src/**/*.&#123;js,vue&#125;&quot;: [</span><br><span class=\"line\">     &quot;eslint --fix&quot;,</span><br><span class=\"line\">     &quot;git add&quot;</span><br><span class=\"line\">   ]</span><br><span class=\"line\"> &#125;,</span><br></pre></td></tr></table></figure>\n\n<p>最终在提交时都会进行commit-msg验证和代码格式化</p>\n<h2 id=\"自定义提交规范\"><a href=\"#自定义提交规范\" class=\"headerlink\" title=\"自定义提交规范\"></a>自定义提交规范</h2><p>如果我们想自定义提交规范也是可以的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D commitlint-config-cz  cz-customizable</span><br></pre></td></tr></table></figure>\n\n<p>并且在项目根目录创建.cz-config.js</p>\n<p>commitlint.config.js，主要区别是extends，可以只用cz</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  extends: [&#x27;@commitlint/config-conventional&#x27;, &#x27;cz&#x27;],</span><br><span class=\"line\">  rules: &#123;</span><br><span class=\"line\">    &#x27;type-enum&#x27;: [</span><br><span class=\"line\">      2,</span><br><span class=\"line\">      &#x27;always&#x27;,</span><br><span class=\"line\">      [</span><br><span class=\"line\">        &#x27;feature&#x27;, // 新功能（feature）</span><br><span class=\"line\">        &#x27;fix&#x27;, // 修补bug</span><br><span class=\"line\">        &#x27;ui&#x27;, // 更新 ui</span><br><span class=\"line\">        &#x27;docs&#x27;, // 文档（documentation）</span><br><span class=\"line\">        &#x27;style&#x27;, // 格式（不影响代码运行的变动）</span><br><span class=\"line\">        &#x27;perf&#x27;, // 性能优化</span><br><span class=\"line\">        &#x27;release&#x27;, // 发布</span><br><span class=\"line\">        &#x27;ci&#x27;, // 集成流程修改（Travis,gitlab ci）</span><br><span class=\"line\">        &#x27;refactor&#x27;, // 代码重构</span><br><span class=\"line\">        &#x27;chore&#x27;, // 不属于以上类型的其他类型(日常事务)</span><br><span class=\"line\">        &#x27;revert&#x27;, // 回退</span><br><span class=\"line\">        &#x27;merge&#x27;, // 合并分支</span><br><span class=\"line\">        &#x27;build&#x27; // 构建系统的修改</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    // &lt;type&gt; 格式 小写</span><br><span class=\"line\">    &#x27;type-case&#x27;: [2, &#x27;always&#x27;, &#x27;lower-case&#x27;],</span><br><span class=\"line\">    // &lt;type&gt; 不能为空</span><br><span class=\"line\">    &#x27;type-empty&#x27;: [2, &#x27;never&#x27;],</span><br><span class=\"line\">    // &lt;scope&gt; 范围不能为空</span><br><span class=\"line\">    &#x27;scope-empty&#x27;: [0],</span><br><span class=\"line\">    // &lt;scope&gt; 范围格式</span><br><span class=\"line\">    &#x27;scope-case&#x27;: [0],</span><br><span class=\"line\">    // &lt;subject&gt; 主要 message 不能为空</span><br><span class=\"line\">    &#x27;subject-empty&#x27;: [2, &#x27;never&#x27;],</span><br><span class=\"line\">    // &lt;subject&gt; 以什么为结束标志，禁用</span><br><span class=\"line\">    &#x27;subject-full-stop&#x27;: [0, &#x27;never&#x27;],</span><br><span class=\"line\">    // &lt;subject&gt; 格式，禁用</span><br><span class=\"line\">    &#x27;subject-case&#x27;: [0, &#x27;never&#x27;],</span><br><span class=\"line\">    // &lt;body&gt; 以空行开头</span><br><span class=\"line\">    &#x27;body-leading-blank&#x27;: [1, &#x27;always&#x27;],</span><br><span class=\"line\">    &#x27;header-max-length&#x27;: [0, &#x27;always&#x27;, 72]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改package.json</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;config&quot;: &#123;</span><br><span class=\"line\">    &quot;commitizen&quot;: &#123;</span><br><span class=\"line\">      &quot;path&quot;: &quot;node_modules/cz-customizable&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n\n<p>.cz-config.js（这是目前已在项目中使用的配置）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  types: [</span><br><span class=\"line\">    &#123; value: &#x27;feature&#x27;, name: &#x27;feature: 增加新功能&#x27; &#125;,</span><br><span class=\"line\">    &#123; value: &#x27;fix&#x27;, name: &#x27;fix: 修复bug&#x27; &#125;,</span><br><span class=\"line\">    &#123; value: &#x27;chore&#x27;,name: &#x27;chore: 日常提交&#x27; &#125;,</span><br><span class=\"line\">    &#123; value: &#x27;ui&#x27;, name: &#x27;ui: 更新UI&#x27; &#125;,</span><br><span class=\"line\">    &#123; value: &#x27;docs&#x27;, name: &#x27;docs: 文档变更&#x27; &#125;,</span><br><span class=\"line\">    &#123; value: &#x27;style&#x27;, name: &#x27;style: 代码格式&#x27; &#125;,</span><br><span class=\"line\">    &#123; value: &#x27;perf&#x27;, name: &#x27;perf: 性能优化&#x27; &#125;,</span><br><span class=\"line\">    &#123; value: &#x27;refactor&#x27;,name: &#x27;refactor: 代码重构&#x27; &#125;,</span><br><span class=\"line\">    &#123; value: &#x27;merge&#x27;, name: &#x27;merge: 合并分支&#x27; &#125;,</span><br><span class=\"line\">    &#123; value: &#x27;revert&#x27;, name: &#x27;revert: 回退&#x27; &#125;,</span><br><span class=\"line\">    &#123; value: &#x27;build&#x27;, name: &#x27;build: 构建文件变动&#x27; &#125;,</span><br><span class=\"line\">    &#123; value: &#x27;ci&#x27;, name: &#x27;ci: 集成流程变动&#x27; &#125;,</span><br><span class=\"line\">    &#123; value: &#x27;release&#x27;, name: &#x27;release: 发布&#x27; &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  // override the messages, defaults are as follows</span><br><span class=\"line\">  messages: &#123;</span><br><span class=\"line\">    type: &#x27;请选择提交类型:&#x27;,</span><br><span class=\"line\">    customScope: &#x27;请输入您修改的范围(可选):&#x27;,</span><br><span class=\"line\">    subject: &#x27;请简要描述提交 message (必填):&#x27;,</span><br><span class=\"line\">    body: &#x27;请输入详细描述(可选，待优化去除，跳过即可):&#x27;,</span><br><span class=\"line\">    footer: &#x27;请输入要关闭的issue(待优化去除，跳过即可):&#x27;,</span><br><span class=\"line\">    confirmCommit: &#x27;确认使用以上信息提交？(y/n/e/h)&#x27;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  allowCustomScopes: true,</span><br><span class=\"line\">  skipQuestions: [&#x27;body&#x27;, &#x27;footer&#x27;],</span><br><span class=\"line\">  subjectLimit: 72</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>到此，一个完整规范的git commit就完成了</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>如果不想自己手动配置也可以使用三方库，比如<a href=\"https://cz-git.qbb.sh/zh/\">cz-git</a></p>\n"},{"title":"局域网搭建npm私服","date":"2023-07-20T06:39:02.000Z","_content":"\n## 背景\n\n出于保密原因后续业务需要内网环境开发，这就要优先解决前端依赖的问题。\n\n## 方案\n\n#### 方案一\n\n将依赖包下载到本地，然后本地安装\n**结论**：不友好，而且只能通过文件夹来安装，麻烦\n**痛点**： 前端项目依赖多且碎，比如开源依赖又依赖别的开源依赖\n\n#### 方案二\n\n经后端同事提醒，可以搭建npm私服来解决。网上搜了一圈发现搭建npm私服软件还挺多的，不过最终选择了使用[nexus](https://www.sonatype.com/products/sonatype-nexus-oss-download)搭建（现在后端同事就是用它搭建maven私服）\n\n搭建方式就不说了，网上一堆说明。\n\nOK。假设我们已经搭建好了npm私服。那么如何使用呢？？？\n\n简单，修改npm配置镜像地址\n\n```bash\nnpm config set registry=http://xxxxxxxx  //npm 私服源地址\n```\n\n然后你就快乐的使用`npm install` 安装依赖\n\n但是你会发现你什么也没安装！！！\n\n因为私服里没有任何npm包，同时因为是内网也无法使用公网镜像，当然什么也没法安装了。\n\n要解决这个问题，两种思路。\n\n1. 暂时开通公网权限，通过设置类型为代理的私库来缓存相关的依赖包。\n\n   npm install时通过设置的代理私库地址拉取公网镜像(taobao、npm)上的依赖，然后这些依赖就会缓存在这个私库里\n\n   ![null](https://s2.loli.net/2024/01/08/gSa9DwreRELtiIN.png)\n\n   ![null](https://s2.loli.net/2024/01/08/2vkw4OJo1fUKF6S.png)\n\n   优点是操作简单\n\n   缺点是每次变更依赖都要开通公网权限\n\n2. 向Nexus上传本地的npm依赖\n\n   一句话概括：先在公网环境下载本地依赖的tgz文件，然后在内网环境上传到nexus\n\n   本地安装完依赖后使用[node_tgz_download](https://www.npmjs.com/package/node-tgz-downloader)下载所有的依赖文件。\n\n   通过`npm publish xxxx`来发布到nexus，最后安装验证是否成功。\n\n![null](https://s2.loli.net/2024/01/08/4D1fNW5ya2kxd3w.png)\n\n![null](https://s2.loli.net/2024/01/08/Dh1ZIYa9MoEKkGe.png)\n\n优点是依赖版本固定，不需要公网权限\n缺点是操作麻烦，而且存在依赖下载不全问题，需要不断安装验证，然后手动补全依赖，直到完全安装成功。\n\n![null](https://s2.loli.net/2024/01/08/uPgGiCpBUQIoSVD.png)\n![null](https://s2.loli.net/2024/01/08/2cfbWlJ4La1Y7h8.png)\n\n实际应该有602个大package，而最终本地上传的却只有559个大package，缺少部分依赖。\n\n#### 分析\n\n我们是通过分析package-lock.json文件来获取依赖tgz包进行下载的。\npackage-lock.json文件一般是基于package.json里的`dependencies`和`devDependencies`两个依赖配置项循环迭代生成。\n\n但是有种情况除外，某个package的package.json里配置了`peerDependencies`依赖。\n\n> peerDependencies，也叫同等依赖，或者叫同伴依赖，用于指定当前包（也就是你所要开发的包）使用的这个依赖要兼容的宿主环境中这个依赖的版本。用于解决插件与所依赖包不一致的问题。\n\n有点绕口，翻译下就是如果某个package把我列为依赖的话，那么那个package也必需应该有对peerDependencies里的依赖。\n\nok，如果正好宿主环境并不需要某个package`peerDependencies`里的依赖，那么它就不会在package-lock里有所体现。那就没法通过package-lock拿到这些依赖的tgz包进行下载。\n\n## 后续\n\n通过`npm i --legacy-peer-deps`命令安装可以跳过`peerDependencies`里的依赖。\n\n安装成功后运行项目，如果成功跑通没有任何报错，那就说明`peerDependencies`里的依赖确实是项目不需要的，可以不用关心；如果失败，根据错误信息按部就班的解决就行。\n\n\n\n当然也可以现在公网环境也搭建一套私服，项目依赖全部走私服。然后备份公网私服再在局域网私服同步就行","source":"_posts/局域网搭建npm私服.md","raw":"---\ntitle: 局域网搭建npm私服\ndate: 2023-07-20 14:39:02\ntags:\n    - npm\n    - 私服\n---\n\n## 背景\n\n出于保密原因后续业务需要内网环境开发，这就要优先解决前端依赖的问题。\n\n## 方案\n\n#### 方案一\n\n将依赖包下载到本地，然后本地安装\n**结论**：不友好，而且只能通过文件夹来安装，麻烦\n**痛点**： 前端项目依赖多且碎，比如开源依赖又依赖别的开源依赖\n\n#### 方案二\n\n经后端同事提醒，可以搭建npm私服来解决。网上搜了一圈发现搭建npm私服软件还挺多的，不过最终选择了使用[nexus](https://www.sonatype.com/products/sonatype-nexus-oss-download)搭建（现在后端同事就是用它搭建maven私服）\n\n搭建方式就不说了，网上一堆说明。\n\nOK。假设我们已经搭建好了npm私服。那么如何使用呢？？？\n\n简单，修改npm配置镜像地址\n\n```bash\nnpm config set registry=http://xxxxxxxx  //npm 私服源地址\n```\n\n然后你就快乐的使用`npm install` 安装依赖\n\n但是你会发现你什么也没安装！！！\n\n因为私服里没有任何npm包，同时因为是内网也无法使用公网镜像，当然什么也没法安装了。\n\n要解决这个问题，两种思路。\n\n1. 暂时开通公网权限，通过设置类型为代理的私库来缓存相关的依赖包。\n\n   npm install时通过设置的代理私库地址拉取公网镜像(taobao、npm)上的依赖，然后这些依赖就会缓存在这个私库里\n\n   ![null](https://s2.loli.net/2024/01/08/gSa9DwreRELtiIN.png)\n\n   ![null](https://s2.loli.net/2024/01/08/2vkw4OJo1fUKF6S.png)\n\n   优点是操作简单\n\n   缺点是每次变更依赖都要开通公网权限\n\n2. 向Nexus上传本地的npm依赖\n\n   一句话概括：先在公网环境下载本地依赖的tgz文件，然后在内网环境上传到nexus\n\n   本地安装完依赖后使用[node_tgz_download](https://www.npmjs.com/package/node-tgz-downloader)下载所有的依赖文件。\n\n   通过`npm publish xxxx`来发布到nexus，最后安装验证是否成功。\n\n![null](https://s2.loli.net/2024/01/08/4D1fNW5ya2kxd3w.png)\n\n![null](https://s2.loli.net/2024/01/08/Dh1ZIYa9MoEKkGe.png)\n\n优点是依赖版本固定，不需要公网权限\n缺点是操作麻烦，而且存在依赖下载不全问题，需要不断安装验证，然后手动补全依赖，直到完全安装成功。\n\n![null](https://s2.loli.net/2024/01/08/uPgGiCpBUQIoSVD.png)\n![null](https://s2.loli.net/2024/01/08/2cfbWlJ4La1Y7h8.png)\n\n实际应该有602个大package，而最终本地上传的却只有559个大package，缺少部分依赖。\n\n#### 分析\n\n我们是通过分析package-lock.json文件来获取依赖tgz包进行下载的。\npackage-lock.json文件一般是基于package.json里的`dependencies`和`devDependencies`两个依赖配置项循环迭代生成。\n\n但是有种情况除外，某个package的package.json里配置了`peerDependencies`依赖。\n\n> peerDependencies，也叫同等依赖，或者叫同伴依赖，用于指定当前包（也就是你所要开发的包）使用的这个依赖要兼容的宿主环境中这个依赖的版本。用于解决插件与所依赖包不一致的问题。\n\n有点绕口，翻译下就是如果某个package把我列为依赖的话，那么那个package也必需应该有对peerDependencies里的依赖。\n\nok，如果正好宿主环境并不需要某个package`peerDependencies`里的依赖，那么它就不会在package-lock里有所体现。那就没法通过package-lock拿到这些依赖的tgz包进行下载。\n\n## 后续\n\n通过`npm i --legacy-peer-deps`命令安装可以跳过`peerDependencies`里的依赖。\n\n安装成功后运行项目，如果成功跑通没有任何报错，那就说明`peerDependencies`里的依赖确实是项目不需要的，可以不用关心；如果失败，根据错误信息按部就班的解决就行。\n\n\n\n当然也可以现在公网环境也搭建一套私服，项目依赖全部走私服。然后备份公网私服再在局域网私服同步就行","slug":"局域网搭建npm私服","published":1,"updated":"2024-01-15T07:37:38.820Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrq64z6u000vsoipdvjqgsrs","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>出于保密原因后续业务需要内网环境开发，这就要优先解决前端依赖的问题。</p>\n<h2 id=\"方案\"><a href=\"#方案\" class=\"headerlink\" title=\"方案\"></a>方案</h2><h4 id=\"方案一\"><a href=\"#方案一\" class=\"headerlink\" title=\"方案一\"></a>方案一</h4><p>将依赖包下载到本地，然后本地安装<br><strong>结论</strong>：不友好，而且只能通过文件夹来安装，麻烦<br><strong>痛点</strong>： 前端项目依赖多且碎，比如开源依赖又依赖别的开源依赖</p>\n<h4 id=\"方案二\"><a href=\"#方案二\" class=\"headerlink\" title=\"方案二\"></a>方案二</h4><p>经后端同事提醒，可以搭建npm私服来解决。网上搜了一圈发现搭建npm私服软件还挺多的，不过最终选择了使用<a href=\"https://www.sonatype.com/products/sonatype-nexus-oss-download\">nexus</a>搭建（现在后端同事就是用它搭建maven私服）</p>\n<p>搭建方式就不说了，网上一堆说明。</p>\n<p>OK。假设我们已经搭建好了npm私服。那么如何使用呢？？？</p>\n<p>简单，修改npm配置镜像地址</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> registry=http://xxxxxxxx  //npm 私服源地址</span><br></pre></td></tr></table></figure>\n\n<p>然后你就快乐的使用<code>npm install</code> 安装依赖</p>\n<p>但是你会发现你什么也没安装！！！</p>\n<p>因为私服里没有任何npm包，同时因为是内网也无法使用公网镜像，当然什么也没法安装了。</p>\n<p>要解决这个问题，两种思路。</p>\n<ol>\n<li><p>暂时开通公网权限，通过设置类型为代理的私库来缓存相关的依赖包。</p>\n<p>npm install时通过设置的代理私库地址拉取公网镜像(taobao、npm)上的依赖，然后这些依赖就会缓存在这个私库里</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/gSa9DwreRELtiIN.png\" alt=\"null\"></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/2vkw4OJo1fUKF6S.png\" alt=\"null\"></p>\n<p>优点是操作简单</p>\n<p>缺点是每次变更依赖都要开通公网权限</p>\n</li>\n<li><p>向Nexus上传本地的npm依赖</p>\n<p>一句话概括：先在公网环境下载本地依赖的tgz文件，然后在内网环境上传到nexus</p>\n<p>本地安装完依赖后使用<a href=\"https://www.npmjs.com/package/node-tgz-downloader\">node_tgz_download</a>下载所有的依赖文件。</p>\n<p>通过<code>npm publish xxxx</code>来发布到nexus，最后安装验证是否成功。</p>\n</li>\n</ol>\n<p><img src=\"https://s2.loli.net/2024/01/08/4D1fNW5ya2kxd3w.png\" alt=\"null\"></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/Dh1ZIYa9MoEKkGe.png\" alt=\"null\"></p>\n<p>优点是依赖版本固定，不需要公网权限<br>缺点是操作麻烦，而且存在依赖下载不全问题，需要不断安装验证，然后手动补全依赖，直到完全安装成功。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/uPgGiCpBUQIoSVD.png\" alt=\"null\"><br><img src=\"https://s2.loli.net/2024/01/08/2cfbWlJ4La1Y7h8.png\" alt=\"null\"></p>\n<p>实际应该有602个大package，而最终本地上传的却只有559个大package，缺少部分依赖。</p>\n<h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>我们是通过分析package-lock.json文件来获取依赖tgz包进行下载的。<br>package-lock.json文件一般是基于package.json里的<code>dependencies</code>和<code>devDependencies</code>两个依赖配置项循环迭代生成。</p>\n<p>但是有种情况除外，某个package的package.json里配置了<code>peerDependencies</code>依赖。</p>\n<blockquote>\n<p>peerDependencies，也叫同等依赖，或者叫同伴依赖，用于指定当前包（也就是你所要开发的包）使用的这个依赖要兼容的宿主环境中这个依赖的版本。用于解决插件与所依赖包不一致的问题。</p>\n</blockquote>\n<p>有点绕口，翻译下就是如果某个package把我列为依赖的话，那么那个package也必需应该有对peerDependencies里的依赖。</p>\n<p>ok，如果正好宿主环境并不需要某个package<code>peerDependencies</code>里的依赖，那么它就不会在package-lock里有所体现。那就没法通过package-lock拿到这些依赖的tgz包进行下载。</p>\n<h2 id=\"后续\"><a href=\"#后续\" class=\"headerlink\" title=\"后续\"></a>后续</h2><p>通过<code>npm i --legacy-peer-deps</code>命令安装可以跳过<code>peerDependencies</code>里的依赖。</p>\n<p>安装成功后运行项目，如果成功跑通没有任何报错，那就说明<code>peerDependencies</code>里的依赖确实是项目不需要的，可以不用关心；如果失败，根据错误信息按部就班的解决就行。</p>\n<p>当然也可以现在公网环境也搭建一套私服，项目依赖全部走私服。然后备份公网私服再在局域网私服同步就行</p>\n","site":{"data":{}},"length":945,"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>出于保密原因后续业务需要内网环境开发，这就要优先解决前端依赖的问题。</p>\n<h2 id=\"方案\"><a href=\"#方案\" class=\"headerlink\" title=\"方案\"></a>方案</h2><h4 id=\"方案一\"><a href=\"#方案一\" class=\"headerlink\" title=\"方案一\"></a>方案一</h4><p>将依赖包下载到本地，然后本地安装<br><strong>结论</strong>：不友好，而且只能通过文件夹来安装，麻烦<br><strong>痛点</strong>： 前端项目依赖多且碎，比如开源依赖又依赖别的开源依赖</p>\n<h4 id=\"方案二\"><a href=\"#方案二\" class=\"headerlink\" title=\"方案二\"></a>方案二</h4><p>经后端同事提醒，可以搭建npm私服来解决。网上搜了一圈发现搭建npm私服软件还挺多的，不过最终选择了使用<a href=\"https://www.sonatype.com/products/sonatype-nexus-oss-download\">nexus</a>搭建（现在后端同事就是用它搭建maven私服）</p>\n<p>搭建方式就不说了，网上一堆说明。</p>\n<p>OK。假设我们已经搭建好了npm私服。那么如何使用呢？？？</p>\n<p>简单，修改npm配置镜像地址</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> registry=http://xxxxxxxx  //npm 私服源地址</span><br></pre></td></tr></table></figure>\n\n<p>然后你就快乐的使用<code>npm install</code> 安装依赖</p>\n<p>但是你会发现你什么也没安装！！！</p>\n<p>因为私服里没有任何npm包，同时因为是内网也无法使用公网镜像，当然什么也没法安装了。</p>\n<p>要解决这个问题，两种思路。</p>\n<ol>\n<li><p>暂时开通公网权限，通过设置类型为代理的私库来缓存相关的依赖包。</p>\n<p>npm install时通过设置的代理私库地址拉取公网镜像(taobao、npm)上的依赖，然后这些依赖就会缓存在这个私库里</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/gSa9DwreRELtiIN.png\" alt=\"null\"></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/2vkw4OJo1fUKF6S.png\" alt=\"null\"></p>\n<p>优点是操作简单</p>\n<p>缺点是每次变更依赖都要开通公网权限</p>\n</li>\n<li><p>向Nexus上传本地的npm依赖</p>\n<p>一句话概括：先在公网环境下载本地依赖的tgz文件，然后在内网环境上传到nexus</p>\n<p>本地安装完依赖后使用<a href=\"https://www.npmjs.com/package/node-tgz-downloader\">node_tgz_download</a>下载所有的依赖文件。</p>\n<p>通过<code>npm publish xxxx</code>来发布到nexus，最后安装验证是否成功。</p>\n</li>\n</ol>\n<p><img src=\"https://s2.loli.net/2024/01/08/4D1fNW5ya2kxd3w.png\" alt=\"null\"></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/Dh1ZIYa9MoEKkGe.png\" alt=\"null\"></p>\n<p>优点是依赖版本固定，不需要公网权限<br>缺点是操作麻烦，而且存在依赖下载不全问题，需要不断安装验证，然后手动补全依赖，直到完全安装成功。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/uPgGiCpBUQIoSVD.png\" alt=\"null\"><br><img src=\"https://s2.loli.net/2024/01/08/2cfbWlJ4La1Y7h8.png\" alt=\"null\"></p>\n<p>实际应该有602个大package，而最终本地上传的却只有559个大package，缺少部分依赖。</p>\n<h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>我们是通过分析package-lock.json文件来获取依赖tgz包进行下载的。<br>package-lock.json文件一般是基于package.json里的<code>dependencies</code>和<code>devDependencies</code>两个依赖配置项循环迭代生成。</p>\n<p>但是有种情况除外，某个package的package.json里配置了<code>peerDependencies</code>依赖。</p>\n<blockquote>\n<p>peerDependencies，也叫同等依赖，或者叫同伴依赖，用于指定当前包（也就是你所要开发的包）使用的这个依赖要兼容的宿主环境中这个依赖的版本。用于解决插件与所依赖包不一致的问题。</p>\n</blockquote>\n<p>有点绕口，翻译下就是如果某个package把我列为依赖的话，那么那个package也必需应该有对peerDependencies里的依赖。</p>\n<p>ok，如果正好宿主环境并不需要某个package<code>peerDependencies</code>里的依赖，那么它就不会在package-lock里有所体现。那就没法通过package-lock拿到这些依赖的tgz包进行下载。</p>\n<h2 id=\"后续\"><a href=\"#后续\" class=\"headerlink\" title=\"后续\"></a>后续</h2><p>通过<code>npm i --legacy-peer-deps</code>命令安装可以跳过<code>peerDependencies</code>里的依赖。</p>\n<p>安装成功后运行项目，如果成功跑通没有任何报错，那就说明<code>peerDependencies</code>里的依赖确实是项目不需要的，可以不用关心；如果失败，根据错误信息按部就班的解决就行。</p>\n<p>当然也可以现在公网环境也搭建一套私服，项目依赖全部走私服。然后备份公网私服再在局域网私服同步就行</p>\n"},{"title":"快速导出网页内容为word文档","date":"2023-03-03T01:39:58.000Z","_content":"\n## 前言\n\n最近遇到个需求，某预览页面可以导出成word文档以便用户直接使用。其实这个功能前后端都可以实现，我们项目定的结论是后端生成word文档，前端只做预览页面。\n\n当然这个结论是需求澄清后给出的，在此之前我都是认为需要前端根据html文档生成word，所以做了些调研，在这里记录下做些分享。\n\n## 前端插件\n\n网上找到一些html转word的插件，分别使用demo测试结果如下：\n\n这是html页面呈现内容\n\n![null](https://s2.loli.net/2024/01/08/l7Y3G1oJ5Ojs64R.png)\n\n插件\n\n生成word内容\n\n结论\n\n[jquery.googoose](https://github.com/aadel112/googoose)\n\n![null](https://s2.loli.net/2024/01/08/yTA5GVaz62PgdmE.png)\n\necharts图表丢失\n\n[jquery.wordexport](https://github.com/markswindoll/jQuery-Word-Export)\n\n![null](https://s2.loli.net/2024/01/08/zTaNS6pjWcR2qQX.png)\n\necharts图表丢失，表格边框丢失\n\n[export-word](https://github.com/huangbohang/export-word)\n\n![null](https://s2.loli.net/2024/01/08/zWGvMqi7SZ3uCwD.png)\n\n基本内容都有，echarts图表格式不对，不过应该是word宽度的限制\n\n从上面来看基本的html转word前端是可以实现的，主要差别在于一些非文本、表格、图表的内容上，而针对这些不支持的内容一个方法是把它们转成图片来插入文档解决。\n\n对比了以上三个插件的源码，主要不同点就是export-word多了个使用canvas转成图表功能\n\n![null](https://s2.loli.net/2024/01/08/v45FMR93qBVUbJX.png)\n\n![null](https://s2.loli.net/2024/01/08/b8sS1Q2PKlhGeiL.png)\n\n![null](https://s2.loli.net/2024/01/08/UZlP1MDYwk6R2EW.png)\n\n## 后端实现\n\n具体的后端实现我不太清楚，不过后端的难点跟前端是一致的，对于一些图表、非正常的表格等都无法获取，需要依赖前端将这些内容转成图片传给后端，然后插入文档。\n\n## 结论\n\n其实这么来说，不管前端实现还是后端实现都是一样的，难点在于非文本的一些结构如何添加到word里，解决方法都是一样的。","source":"_posts/快速导出网页内容为word文档.md","raw":"---\ntitle: 快速导出网页内容为word文档\ndate: 2023-03-03 09:39:58\ntags:\n    - web\n    - 导出\n---\n\n## 前言\n\n最近遇到个需求，某预览页面可以导出成word文档以便用户直接使用。其实这个功能前后端都可以实现，我们项目定的结论是后端生成word文档，前端只做预览页面。\n\n当然这个结论是需求澄清后给出的，在此之前我都是认为需要前端根据html文档生成word，所以做了些调研，在这里记录下做些分享。\n\n## 前端插件\n\n网上找到一些html转word的插件，分别使用demo测试结果如下：\n\n这是html页面呈现内容\n\n![null](https://s2.loli.net/2024/01/08/l7Y3G1oJ5Ojs64R.png)\n\n插件\n\n生成word内容\n\n结论\n\n[jquery.googoose](https://github.com/aadel112/googoose)\n\n![null](https://s2.loli.net/2024/01/08/yTA5GVaz62PgdmE.png)\n\necharts图表丢失\n\n[jquery.wordexport](https://github.com/markswindoll/jQuery-Word-Export)\n\n![null](https://s2.loli.net/2024/01/08/zTaNS6pjWcR2qQX.png)\n\necharts图表丢失，表格边框丢失\n\n[export-word](https://github.com/huangbohang/export-word)\n\n![null](https://s2.loli.net/2024/01/08/zWGvMqi7SZ3uCwD.png)\n\n基本内容都有，echarts图表格式不对，不过应该是word宽度的限制\n\n从上面来看基本的html转word前端是可以实现的，主要差别在于一些非文本、表格、图表的内容上，而针对这些不支持的内容一个方法是把它们转成图片来插入文档解决。\n\n对比了以上三个插件的源码，主要不同点就是export-word多了个使用canvas转成图表功能\n\n![null](https://s2.loli.net/2024/01/08/v45FMR93qBVUbJX.png)\n\n![null](https://s2.loli.net/2024/01/08/b8sS1Q2PKlhGeiL.png)\n\n![null](https://s2.loli.net/2024/01/08/UZlP1MDYwk6R2EW.png)\n\n## 后端实现\n\n具体的后端实现我不太清楚，不过后端的难点跟前端是一致的，对于一些图表、非正常的表格等都无法获取，需要依赖前端将这些内容转成图片传给后端，然后插入文档。\n\n## 结论\n\n其实这么来说，不管前端实现还是后端实现都是一样的，难点在于非文本的一些结构如何添加到word里，解决方法都是一样的。","slug":"快速导出网页内容为word文档","published":1,"updated":"2024-01-15T07:26:42.299Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrq64z6v000ysoipdx2lbb7r","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近遇到个需求，某预览页面可以导出成word文档以便用户直接使用。其实这个功能前后端都可以实现，我们项目定的结论是后端生成word文档，前端只做预览页面。</p>\n<p>当然这个结论是需求澄清后给出的，在此之前我都是认为需要前端根据html文档生成word，所以做了些调研，在这里记录下做些分享。</p>\n<h2 id=\"前端插件\"><a href=\"#前端插件\" class=\"headerlink\" title=\"前端插件\"></a>前端插件</h2><p>网上找到一些html转word的插件，分别使用demo测试结果如下：</p>\n<p>这是html页面呈现内容</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/l7Y3G1oJ5Ojs64R.png\" alt=\"null\"></p>\n<p>插件</p>\n<p>生成word内容</p>\n<p>结论</p>\n<p><a href=\"https://github.com/aadel112/googoose\">jquery.googoose</a></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/yTA5GVaz62PgdmE.png\" alt=\"null\"></p>\n<p>echarts图表丢失</p>\n<p><a href=\"https://github.com/markswindoll/jQuery-Word-Export\">jquery.wordexport</a></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/zTaNS6pjWcR2qQX.png\" alt=\"null\"></p>\n<p>echarts图表丢失，表格边框丢失</p>\n<p><a href=\"https://github.com/huangbohang/export-word\">export-word</a></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/zWGvMqi7SZ3uCwD.png\" alt=\"null\"></p>\n<p>基本内容都有，echarts图表格式不对，不过应该是word宽度的限制</p>\n<p>从上面来看基本的html转word前端是可以实现的，主要差别在于一些非文本、表格、图表的内容上，而针对这些不支持的内容一个方法是把它们转成图片来插入文档解决。</p>\n<p>对比了以上三个插件的源码，主要不同点就是export-word多了个使用canvas转成图表功能</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/v45FMR93qBVUbJX.png\" alt=\"null\"></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/b8sS1Q2PKlhGeiL.png\" alt=\"null\"></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/UZlP1MDYwk6R2EW.png\" alt=\"null\"></p>\n<h2 id=\"后端实现\"><a href=\"#后端实现\" class=\"headerlink\" title=\"后端实现\"></a>后端实现</h2><p>具体的后端实现我不太清楚，不过后端的难点跟前端是一致的，对于一些图表、非正常的表格等都无法获取，需要依赖前端将这些内容转成图片传给后端，然后插入文档。</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>其实这么来说，不管前端实现还是后端实现都是一样的，难点在于非文本的一些结构如何添加到word里，解决方法都是一样的。</p>\n","site":{"data":{}},"length":444,"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近遇到个需求，某预览页面可以导出成word文档以便用户直接使用。其实这个功能前后端都可以实现，我们项目定的结论是后端生成word文档，前端只做预览页面。</p>\n<p>当然这个结论是需求澄清后给出的，在此之前我都是认为需要前端根据html文档生成word，所以做了些调研，在这里记录下做些分享。</p>\n<h2 id=\"前端插件\"><a href=\"#前端插件\" class=\"headerlink\" title=\"前端插件\"></a>前端插件</h2><p>网上找到一些html转word的插件，分别使用demo测试结果如下：</p>\n<p>这是html页面呈现内容</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/l7Y3G1oJ5Ojs64R.png\" alt=\"null\"></p>\n<p>插件</p>\n<p>生成word内容</p>\n<p>结论</p>\n<p><a href=\"https://github.com/aadel112/googoose\">jquery.googoose</a></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/yTA5GVaz62PgdmE.png\" alt=\"null\"></p>\n<p>echarts图表丢失</p>\n<p><a href=\"https://github.com/markswindoll/jQuery-Word-Export\">jquery.wordexport</a></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/zTaNS6pjWcR2qQX.png\" alt=\"null\"></p>\n<p>echarts图表丢失，表格边框丢失</p>\n<p><a href=\"https://github.com/huangbohang/export-word\">export-word</a></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/zWGvMqi7SZ3uCwD.png\" alt=\"null\"></p>\n<p>基本内容都有，echarts图表格式不对，不过应该是word宽度的限制</p>\n<p>从上面来看基本的html转word前端是可以实现的，主要差别在于一些非文本、表格、图表的内容上，而针对这些不支持的内容一个方法是把它们转成图片来插入文档解决。</p>\n<p>对比了以上三个插件的源码，主要不同点就是export-word多了个使用canvas转成图表功能</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/v45FMR93qBVUbJX.png\" alt=\"null\"></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/b8sS1Q2PKlhGeiL.png\" alt=\"null\"></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/UZlP1MDYwk6R2EW.png\" alt=\"null\"></p>\n<h2 id=\"后端实现\"><a href=\"#后端实现\" class=\"headerlink\" title=\"后端实现\"></a>后端实现</h2><p>具体的后端实现我不太清楚，不过后端的难点跟前端是一致的，对于一些图表、非正常的表格等都无法获取，需要依赖前端将这些内容转成图片传给后端，然后插入文档。</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>其实这么来说，不管前端实现还是后端实现都是一样的，难点在于非文本的一些结构如何添加到word里，解决方法都是一样的。</p>\n"},{"title":"快速构建可视化知识图谱","date":"2022-03-29T02:41:03.000Z","_content":"\n## 基本概念\n\n**知识图谱**是一种知识库，其中的数据通过[图结构](https://zh.wikipedia.org/wiki/圖論)的[数据模型](https://zh.wikipedia.org/wiki/数据模型)或[拓扑](https://zh.wikipedia.org/wiki/拓扑学)整合而成。知识图谱通常被用来存储彼此之间具有相互联系的实体。\n\n![null](https://s2.loli.net/2024/01/08/mHApfr7wOEqziL3.png)\n经过查阅资料发现，目前市面上已知的的可视化图表库都已支持或者直接提供知识图谱类型图表。同时也发现有专门针对关系网这类图表的JS库（[Cytoscape.js](https://js.cytoscape.org/#introduction/factsheet))。\n\n这里我们选取了可视化工具的佼佼者Echarts和D3来研究，最后我们再顺便研究下Cytoscape库。\n\n## 什么是ECharts\n\n由百度团队开发的开源免费JavaScript 可视化库，可以流畅的运行在 PC 和移动设备上，兼容当前绝大部分浏览器（IE9/10/11，Chrome，Firefox，Safari等），底层依赖矢量图形库 [ZRender](https://github.com/ecomfe/zrender)，提供直观，交互丰富，可高度个性化定制的数据可视化图表。[官网](https://echarts.apache.org/zh/index.html)\n\n### 基本开发\n\n**开发流程**\n\n1. 根据需求确定图表类型(例如关系图)\n2. 查找示例找到所需图表类型配置\n3. 根据要求选择性的进行配置\n\n官方示例中找到我们所需要的关系图，查看配置结合api进行开发\n\n![null](https://s2.loli.net/2024/01/08/Hs48M3EchJmbBkt.png)\n通过文档我们发现关系图有三种布局方式。\n\n![null](https://s2.loli.net/2024/01/08/uPb4pr5vJ3GHUBh.png)\n三种布局大致展示如下，基本配置项没有区别，其中只有force布局可以设置节点是否能拖拽\n**none:**\n\n![null](https://s2.loli.net/2024/01/08/tihegIb2WfQNwcY.png)\n**circular:**\n\n![null](https://s2.loli.net/2024/01/08/dtuoTD8hUZlOq64.png)\n**force:**\n\n![null](https://s2.loli.net/2024/01/08/ip62kXvhlmq4xFM.png)\n由此可以得知三种布局都能表示节点间多对多的关系，没有特殊要求只是展示节点间关系的话可以使用none布局；需要有动效交互可以用force布局；circluar布局就看业务需求而定。\n\n## 什么是D3\n\nD3 的全称是（Data-DrivenDocuments），顾名思义是一个被数据驱动的文档。其实是对数据进行可视化的JavaScript库。D3将强大的可视化和交互技术与数据驱动的DOM操作方法相结合，能最大限度地使用现代浏览器的性能同时为设计可视化界面保留了最大的自由度。\n\n该库更接近底层，与 echarts 不同，d3不提供现成的图表直接使用，而是通过操作 svg进行图表绘制，所以拥有极大的自由度，几乎可以实现任何 2d 的设计需求。[官网](https://d3js.org/)\n\n### 基本开发\n\n要绘图就要有基本的**画布**，所以第一步就是创建画布。HTML5提供了两种画布：SVG和Canvas。\nD3库是以SVG为主，同时也支持Canvas画布，虽然没有明确要求说一定要使用SVG绘图，但是D3 提供了众多的 SVG 图形的生成器，因此，建议使用 SVG 画布。\n\n**1.创建画布**\n\n```javascript\nvar width = 400;\nvar height = 400;\n\nvar svg = d3.select(\"body\") // 选择器，类似于jquery语法\n            .append('svg') // 插入svg节点。还是类似于jquery语法\n            .attr('width', width) // 设置svg画布宽高\n            .attr('height', height)\n```\n\nCopy\n\n有了画布就可以在画布上进行作画了。\n**2.布局（数据转换）**\n布局，可以理解成 “制作常见图形的函数”，有了它制作各种相对复杂的图表就方便多了。\n\n![null](https://s2.loli.net/2024/01/08/askGpzcv89jJPtg.png)\n从上面的图可以看到，布局的作用是：将**不适合用于绘图的数据**转换成了**适合用于绘图的数据**。\n\n对于我们需要的知识图谱D3也提供了对应的布局 ：Force — 力学图、力导向图。\n\nOK，我们先定义节点数据和连线数据\n\n```javascript\nvar nodes = [ { name: \"桂林\" }, { name: \"广州\" },\n            { name: \"厦门\" }, { name: \"杭州\" },\n            { name: \"上海\" }, { name: \"青岛\" },\n            { name: \"天津\" } ];\n\nvar edges = [ { source : 0 , target: 1 } , { source : 0 , target: 2 } ,\n    { source : 0 , target: 3 } , { source : 1 , target: 4 } ,\n    { source : 1 , target: 5 } , { source : 1 , target: 6 } ];\n```\n\nCopy\n\n一看就知道这些数据是不能作图的，因为不知道节点和连线的坐标，需要用到布局。\n\n```javascript\nvar force = d3.layout.force()  // force布局接口\n              .nodes(nodes) // 指定节点数组\n              .links(edges) // 指定连线数组\n              .size([width, height]) // 指定作用域范围\n              .linkDistance(150) // 指定连线长度\n              .charge([-400]) // 相互间的作用力\nforce.start()\n```\n\nCopy\n\n这时再打印nodes和edges就会发现数据里多了好多新字段\n\n![null](https://s2.loli.net/2024/01/08/r6WAvTKe8gLJ4xm.png)\n新增字段含义如下：\n\n- index：节点的索引号\n- px, py：节点上一个时刻的坐标\n- x, y：节点的当前坐标\n- weight：节点的权重\n\n有了这些数据就可以绘制图形了。\n**3.绘制**\n\n```javascript\n// 添加连线\nvar svg_edges = svg.selectAll('line') \n                .data(edges) // 绑定一个数组到选择集上，数组的各项值分别与选择集的各元素绑定\n                .enter() // /指定选择集的enter部分，下面具体介绍\n                .append('line')\n                .style('stroke', '#ccc')\n                .style('stroke-width', 1);\n\nvar color = d3.scale.category20();\n// 添加节点\nvar svg_nodes = svg.selectAll('circle')\n                .data(nodes)\n                .enter()\n                .append('circle')\n                .attr('r', 20)\n                .style('fill', function(d, i) {\n                    return color(i)\n                })\n                .call(force.drag) // 使节点能拖动\n\nvar svg_texts = svg.selectAll('text')\n                .data(nodes)\n                .enter()\n                .append('text')\n                .style('fill', 'black')\n                .attr('dx',20)\n                .attr('dy', 8)\n                .text(function(d) {\n                    return d.name\n                })\n```\n\nCopy\n\n打开浏览器输入地址进行访问，图形堆叠在一起，为啥？？？\n\n![null](https://s2.loli.net/2024/01/08/yi1eHrtbpjUSP6V.png)\n原来力导向图是不断运动的，每一时刻都在发生更新，因此，必须不断更新节点和连线的位置。力导向图布局 force 有一个事件 tick，每进行到一个时刻，都要调用它，更新的内容就写在它的监听器里就好。\n\n```javascript\nforce.on('tick', function() {\n    svg_edges.attr('x1', function(d) {return d.source.x})\n            .attr('y1', function(d) {return d.source.y})\n            .attr('x2', function(d) {return d.target.x})\n            .attr('y2', function(d) {return d.target.y});\n\n    svg_nodes.attr('cx', function(d) {return d.x})\n            .attr('cy', function(d) {return d.y});\n\n    svg_texts.attr('x', function(d) {return d.x})\n            .attr('y', function(d) {return d.y})\n})\n```\n\nCopy\n\n再到浏览器里刷新页面，OK，关系图出来了。\n\n![null](http://yzjl2.xyz:8093/media/202304/10_1681882257.png)\n里面每一个节点都是可以拖动，同时也能引发其他节点的变化。\n\n## ECharts和D3对比\n\n在进行对比前，我们先来看下上面D3那节提到的HTML5的两种图形渲染技术：SVG和Canvas。所有的三方库底层技术都是基于这两中技术实现的。\n\n| **SVG**                                                 | **Canvas**                                                   |\n| ------------------------------------------------------- | ------------------------------------------------------------ |\n| 矢量图不依赖分辨率                                      | 依赖分辨率                                                   |\n| 支持DOM事件处理器                                       | 不支持事件处理器                                             |\n| 适合带有大型渲染区域的应用（如地图）                    | 最适合图像密集型的应用比如游戏                               |\n| 复杂度高会减慢渲染速度（任何频繁操作dom的应用都快不了） | 一旦图形绘制完成，就不会再得到浏览器的关注 如果位置或者大小变化整个区域都要重新绘制 |\n| 可以使用CSS渲染文本                                     | 文本渲染能力较弱                                             |\n\n对比很明显，各有优势：\nSVG适用于数据量不大，应用存在大量交互的场景\nCanvas比较适用于事件交互少或者数据量大刷新快的场景\n\nOK，基于上面的分析我们来对比ECharts和D3。\n\n| **ECharts**                                                  | **D3**                                                       |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| Canvas为主4.0+也支持SVG                                      | SVG为主4.0+也支持Canvas                                      |\n| 提供很多图表通过简单配置可以满足大部分需求                   | 不直接提供图表，需要手动实现绘制代码                         |\n| 自由度差，不可定制                                           | 自由度很大，基本可以自己绘制任何图表                         |\n| 提供完善中文文档，示例功能完善                               | 提供完善英文文档，大部分示例需要完善才能使用，主要是参考     |\n| 开发效率高，通过快速配置即可完成                             | 大部分图表需要自己开发，学习成本大，太底层了，对可视化理论、数学逻辑都一定要求 |\n| 大数据量性能较好                                             | 需要手动优化， 比如借助react、vue的虚拟dom                   |\n| 不支持事件处理器，官方也提供了事件处理机制监听用户操作行为，功能有限 | 支持事件处理器可直接操作dom                                  |\n\n使用ECarts有较大的优势，开发效率高，动画、事件等实现也比较完善，正常情况下基本没有bug。而数据量不是特别大或者事件交互比较精细的场景可以采用D3 SVG来实现。\n\n任何一款工具型产品，都会在\"自由度\"和\"简便性\"两者间进行权衡与取舍，EChart使用简单而自由度差，D3自由度高而使用门槛高，具体使用哪个看具体场景业务来定。\n\n## 结论\n\n针对我们所调研的关系网类知识图谱两种技术都能实现。如果只是展示图表给用户看，而不需要太多修改我们可以使用echarts；如果场景中存在跟图表较多的交互操作可以尝试使用D3。\n\n最后我们再研究下Cytoscape.js库。\n\n## Cytosapce.js\n\nCytoscape.js是一个用于分析和可视化的[图论](https://en.wikipedia.org/wiki/Graph_theory)库。这涵盖了从网络生物学到社交网络分析的各种用途。 主要是描述点和线之间的关系 。\n\n![null](https://s2.loli.net/2024/01/08/yzJ5kF3mKOpgQ9d.png)\n\n### 基本使用\n\n**1.引入cytoscapejs**\n\n- 直接从github上下载最新的release包本地引入\n- CND引入\n- npm 安装\n\n[更多引入方式](https://js.cytoscape.org/#getting-started/including-cytoscape.js)\n**2.绘制图形**\n首先新建一个容器\n\n```html\n<style>\n  #cy {\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    top: 0;\n    left:0;\n  }\n</style>\n<div id=\"cy\"></div>\n```\n\nCopy\n\n> 请注意，.js在初始化时使用HTML DOM元素容器的尺寸进行布局和渲染。因此，在任何Cytoscape.js相关代码之前将CSS样式表放在中是非常重要的。否则，可能偶尔会错误地报告尺寸，从而导致不希望的行为。 这是官方提示，DOM的样式定义需要在head标签内避免发生问题\n\n参考示例进行图表初始化\n\n```javascript\nvar cy = cytoscape({\n  container: document.getElementById('cy'), // 容器dom\n  boxSelectionEnabled: false,\n  autounselectify: true,\n  elements: [\n    { // 节点a\n      data: {id: 'a'},\n    },\n    { // 节点b\n      data: {id: 'b'}\n    },\n    { // 节点c\n      data: {id: 'c'},\n    },\n    {\n      data: {id: 'd'}\n    },\n    {\n      data: {id: 'e'},\n    },\n    { // 连线ae，源节点a,目标节点e\n      data: {id: 'ae', weight: 1, target: 'e', source: 'a'}\n    },\n    {\n      data: {id: 'ab', weight: 3, target: 'b', source: 'a'}\n    },\n    {\n      data: {id: 'be', weight: 4, target: 'e', source: 'b'}\n    },\n    {\n      data: {id: 'bc', weight: 5, target: 'c', source: 'b'}\n    },\n    {\n      data: {id: 'ce', weight: 6, target: 'e', source: 'c'}\n    },\n    {\n      data: {id: 'cd', weight: 2, target: 'd', source: 'c'}\n    },\n    {\n      data: {id: 'de', weight: 7, target: 'e', source: 'd'}\n    }\n  ],\n  style: [\n    { // 节点样式\n      selector: 'node',\n      style: {\n        'content': 'data(id)'\n      }\n    },\n    { // 连线样式\n      selector: 'edge',\n      style: {\n        'curve-style': 'bezier',\n        'width': 4,\n        'line-color': '#ddd',\n        'target-arrow-color': '#ddd',\n        'target-arrow-shape': 'triangle'\n      }\n    }\n  ],\n  layout: {\n    name: 'breadthfirst',\n    directed: true,\n    root: '#a',\n    padding: 10\n  }\n})\n```\n\nCopy\n\nOK，图表生成成功。\n\n![null](https://s2.loli.net/2024/01/08/uevfTtaRmK2G9NQ.png)\n下面贴出初始化参数列表\n\n```javascript\nvar cy = cytoscape({\n  // 基本参数\n  container: undefined, // 容器\n  elements: [ /* ... */ ], // 指定为普通对象的元素数组\n  style: [ /* ... */ ], // 用于设置图形样式的样式表\n  layout: { name: 'grid' /* , ... */ }, // 指定布局选项的普通对象\n\n  // 初始化视图:\n  zoom: 1,\n  pan: { x: 0, y: 0 },\n\n  // 交互参数:\n  minZoom: 1e-50,\n  maxZoom: 1e50,\n  zoomingEnabled: true,\n  userZoomingEnabled: true,\n  panningEnabled: true,\n  userPanningEnabled: true,\n  boxSelectionEnabled: false,\n  selectionType: 'single',\n  touchTapThreshold: 8,\n  desktopTapThreshold: 4,\n  autolock: false,\n  autoungrabify: false,\n  autounselectify: false,\n\n  // 渲染参数:\n  headless: false,\n  styleEnabled: true,\n  hideEdgesOnViewport: false,\n  hideLabelsOnViewport: false,\n  textureOnViewport: false,\n  motionBlur: false,\n  motionBlurOpacity: 0.2,\n  wheelSensitivity: 1,\n  pixelRatio: 'auto'\n});\n```\n\nCopy\n\n更多API信息请查看文档 http://js.cytoscape.org/#core/graph-manipulation\n\n## 后续\n\n在调研天眼查、企查查两个网站的关系图谱源码时我们发现，天眼查不仅使用了D3.js，同时还用到了一个cola的库；企查查则是使用了d3.js + cytoscape.js来实现。\n\n**天眼查部分逻辑：**\n\n![null](https://s2.loli.net/2024/01/08/aygfHzdFKbrAhsq.png)\n\n```javascript\n// 这是d3的force布局\nvar force = d3.layout.force() \n.nodes(nodes)\n.links(edges)\n.size([width, height]) \n.linkDistance(150)\n.charge([-400])\nforce.start()\n```\n\nCopy\n\n通过cola.js确实可以查到对应的结果。[cola.js](https://ialab.it.monash.edu/webcola/index.html)\n\n![null](https://s2.loli.net/2024/01/08/npKMf68C9YUSFZt.png)\n由此可知cola是个约束器可以很好的跟D3、Cytoscape.js等库集成，而天眼查用到的是它作为d3适配器的一个功能，作为对d3 force布局的一个扩展补充。\n在Cytoscape中使用方法是通过扩展来实现\n\n```javascript\ncy.layout({ name: 'cola' /* and maybe some other options */ });\n```\n\nCopy\n\n**企查查部分逻辑**\n\n![null](https://s2.loli.net/2024/01/08/6WNHKbMBFOicDwg.png)\n图表父节点存在cytoscape的class，可以很明确的知道图表是用cytoscpase.js实现的，哪为什么还要用d3呢？？？\n\n![null](https://s2.loli.net/2024/01/08/LiRFBrph8fkct3X.png)\n继续向上查看代码，确实找到了d3的使用逻辑。\n\n![null](https://s2.loli.net/2024/01/08/PSGl2ATnV7tdD15.png)\n\n![null](http://yzjl2.xyz:8093/media/202304/18_1681882688.png)\n结合cytoscape代码里的layout可以猜出它的基本逻辑应该是先通过d3计算出所有节点最终的位置信息，再通过cytoscape的preset布局绘制关系图。下图是cytoscape的官网说明。\n\n![null](https://s2.loli.net/2024/01/08/fMZN6qBd3kDAnuF.png)\n调试后的数据确实比原数据多了d3的位置信息，后面数据转化也确实用到了这些信息\n![null](https://s2.loli.net/2024/01/08/QPH2Brcq9vXOCnJ.png)\n\n![null](https://s2.loli.net/2024/01/08/ojbJcT4VROfZCS2.png)\n不管是天眼查还是企查查都没有单独使用d3，而是d3+cola.js或者d3+cytoscape.js来实现这类关系图表。我推测可能跟d3的force布局特性有关（没找到相应资料，瞎猜的)。\nforce布局正式名称是力导图，正常情况下所有节点都是运动中的，拖拽某个节点不单单是被拖动的节点会移动，其他受其力作用的节点也会一起移动，所以如果需要天眼查这种静态的效果，就要想办法再绘画完后固定所有节点，比如企查查用的cytoscape的preset布局和天眼查使用cola来stop动画，以及给每个节点设置fixed。\n\n![null](https://s2.loli.net/2024/01/08/BqS4vAIWLYJZb3k.png)\n\n> **力导向图形绘制算法**是以美观的方式绘制图形的一类算法。它们的目的是将一个图的节点定位在二维或二维三维空间中，这样所有的边或多或少都是等长的，交叉的边越少越好。方法是根据边和节点的相对位置在边和节点的集合中分配力，然后利用这些力模拟边和节点的运动\n","source":"_posts/快速构建可视化知识图谱.md","raw":"---\ntitle: 快速构建可视化知识图谱\ndate: 2022-03-29 10:41:03\ntags:\n    - 知识图谱\n---\n\n## 基本概念\n\n**知识图谱**是一种知识库，其中的数据通过[图结构](https://zh.wikipedia.org/wiki/圖論)的[数据模型](https://zh.wikipedia.org/wiki/数据模型)或[拓扑](https://zh.wikipedia.org/wiki/拓扑学)整合而成。知识图谱通常被用来存储彼此之间具有相互联系的实体。\n\n![null](https://s2.loli.net/2024/01/08/mHApfr7wOEqziL3.png)\n经过查阅资料发现，目前市面上已知的的可视化图表库都已支持或者直接提供知识图谱类型图表。同时也发现有专门针对关系网这类图表的JS库（[Cytoscape.js](https://js.cytoscape.org/#introduction/factsheet))。\n\n这里我们选取了可视化工具的佼佼者Echarts和D3来研究，最后我们再顺便研究下Cytoscape库。\n\n## 什么是ECharts\n\n由百度团队开发的开源免费JavaScript 可视化库，可以流畅的运行在 PC 和移动设备上，兼容当前绝大部分浏览器（IE9/10/11，Chrome，Firefox，Safari等），底层依赖矢量图形库 [ZRender](https://github.com/ecomfe/zrender)，提供直观，交互丰富，可高度个性化定制的数据可视化图表。[官网](https://echarts.apache.org/zh/index.html)\n\n### 基本开发\n\n**开发流程**\n\n1. 根据需求确定图表类型(例如关系图)\n2. 查找示例找到所需图表类型配置\n3. 根据要求选择性的进行配置\n\n官方示例中找到我们所需要的关系图，查看配置结合api进行开发\n\n![null](https://s2.loli.net/2024/01/08/Hs48M3EchJmbBkt.png)\n通过文档我们发现关系图有三种布局方式。\n\n![null](https://s2.loli.net/2024/01/08/uPb4pr5vJ3GHUBh.png)\n三种布局大致展示如下，基本配置项没有区别，其中只有force布局可以设置节点是否能拖拽\n**none:**\n\n![null](https://s2.loli.net/2024/01/08/tihegIb2WfQNwcY.png)\n**circular:**\n\n![null](https://s2.loli.net/2024/01/08/dtuoTD8hUZlOq64.png)\n**force:**\n\n![null](https://s2.loli.net/2024/01/08/ip62kXvhlmq4xFM.png)\n由此可以得知三种布局都能表示节点间多对多的关系，没有特殊要求只是展示节点间关系的话可以使用none布局；需要有动效交互可以用force布局；circluar布局就看业务需求而定。\n\n## 什么是D3\n\nD3 的全称是（Data-DrivenDocuments），顾名思义是一个被数据驱动的文档。其实是对数据进行可视化的JavaScript库。D3将强大的可视化和交互技术与数据驱动的DOM操作方法相结合，能最大限度地使用现代浏览器的性能同时为设计可视化界面保留了最大的自由度。\n\n该库更接近底层，与 echarts 不同，d3不提供现成的图表直接使用，而是通过操作 svg进行图表绘制，所以拥有极大的自由度，几乎可以实现任何 2d 的设计需求。[官网](https://d3js.org/)\n\n### 基本开发\n\n要绘图就要有基本的**画布**，所以第一步就是创建画布。HTML5提供了两种画布：SVG和Canvas。\nD3库是以SVG为主，同时也支持Canvas画布，虽然没有明确要求说一定要使用SVG绘图，但是D3 提供了众多的 SVG 图形的生成器，因此，建议使用 SVG 画布。\n\n**1.创建画布**\n\n```javascript\nvar width = 400;\nvar height = 400;\n\nvar svg = d3.select(\"body\") // 选择器，类似于jquery语法\n            .append('svg') // 插入svg节点。还是类似于jquery语法\n            .attr('width', width) // 设置svg画布宽高\n            .attr('height', height)\n```\n\nCopy\n\n有了画布就可以在画布上进行作画了。\n**2.布局（数据转换）**\n布局，可以理解成 “制作常见图形的函数”，有了它制作各种相对复杂的图表就方便多了。\n\n![null](https://s2.loli.net/2024/01/08/askGpzcv89jJPtg.png)\n从上面的图可以看到，布局的作用是：将**不适合用于绘图的数据**转换成了**适合用于绘图的数据**。\n\n对于我们需要的知识图谱D3也提供了对应的布局 ：Force — 力学图、力导向图。\n\nOK，我们先定义节点数据和连线数据\n\n```javascript\nvar nodes = [ { name: \"桂林\" }, { name: \"广州\" },\n            { name: \"厦门\" }, { name: \"杭州\" },\n            { name: \"上海\" }, { name: \"青岛\" },\n            { name: \"天津\" } ];\n\nvar edges = [ { source : 0 , target: 1 } , { source : 0 , target: 2 } ,\n    { source : 0 , target: 3 } , { source : 1 , target: 4 } ,\n    { source : 1 , target: 5 } , { source : 1 , target: 6 } ];\n```\n\nCopy\n\n一看就知道这些数据是不能作图的，因为不知道节点和连线的坐标，需要用到布局。\n\n```javascript\nvar force = d3.layout.force()  // force布局接口\n              .nodes(nodes) // 指定节点数组\n              .links(edges) // 指定连线数组\n              .size([width, height]) // 指定作用域范围\n              .linkDistance(150) // 指定连线长度\n              .charge([-400]) // 相互间的作用力\nforce.start()\n```\n\nCopy\n\n这时再打印nodes和edges就会发现数据里多了好多新字段\n\n![null](https://s2.loli.net/2024/01/08/r6WAvTKe8gLJ4xm.png)\n新增字段含义如下：\n\n- index：节点的索引号\n- px, py：节点上一个时刻的坐标\n- x, y：节点的当前坐标\n- weight：节点的权重\n\n有了这些数据就可以绘制图形了。\n**3.绘制**\n\n```javascript\n// 添加连线\nvar svg_edges = svg.selectAll('line') \n                .data(edges) // 绑定一个数组到选择集上，数组的各项值分别与选择集的各元素绑定\n                .enter() // /指定选择集的enter部分，下面具体介绍\n                .append('line')\n                .style('stroke', '#ccc')\n                .style('stroke-width', 1);\n\nvar color = d3.scale.category20();\n// 添加节点\nvar svg_nodes = svg.selectAll('circle')\n                .data(nodes)\n                .enter()\n                .append('circle')\n                .attr('r', 20)\n                .style('fill', function(d, i) {\n                    return color(i)\n                })\n                .call(force.drag) // 使节点能拖动\n\nvar svg_texts = svg.selectAll('text')\n                .data(nodes)\n                .enter()\n                .append('text')\n                .style('fill', 'black')\n                .attr('dx',20)\n                .attr('dy', 8)\n                .text(function(d) {\n                    return d.name\n                })\n```\n\nCopy\n\n打开浏览器输入地址进行访问，图形堆叠在一起，为啥？？？\n\n![null](https://s2.loli.net/2024/01/08/yi1eHrtbpjUSP6V.png)\n原来力导向图是不断运动的，每一时刻都在发生更新，因此，必须不断更新节点和连线的位置。力导向图布局 force 有一个事件 tick，每进行到一个时刻，都要调用它，更新的内容就写在它的监听器里就好。\n\n```javascript\nforce.on('tick', function() {\n    svg_edges.attr('x1', function(d) {return d.source.x})\n            .attr('y1', function(d) {return d.source.y})\n            .attr('x2', function(d) {return d.target.x})\n            .attr('y2', function(d) {return d.target.y});\n\n    svg_nodes.attr('cx', function(d) {return d.x})\n            .attr('cy', function(d) {return d.y});\n\n    svg_texts.attr('x', function(d) {return d.x})\n            .attr('y', function(d) {return d.y})\n})\n```\n\nCopy\n\n再到浏览器里刷新页面，OK，关系图出来了。\n\n![null](http://yzjl2.xyz:8093/media/202304/10_1681882257.png)\n里面每一个节点都是可以拖动，同时也能引发其他节点的变化。\n\n## ECharts和D3对比\n\n在进行对比前，我们先来看下上面D3那节提到的HTML5的两种图形渲染技术：SVG和Canvas。所有的三方库底层技术都是基于这两中技术实现的。\n\n| **SVG**                                                 | **Canvas**                                                   |\n| ------------------------------------------------------- | ------------------------------------------------------------ |\n| 矢量图不依赖分辨率                                      | 依赖分辨率                                                   |\n| 支持DOM事件处理器                                       | 不支持事件处理器                                             |\n| 适合带有大型渲染区域的应用（如地图）                    | 最适合图像密集型的应用比如游戏                               |\n| 复杂度高会减慢渲染速度（任何频繁操作dom的应用都快不了） | 一旦图形绘制完成，就不会再得到浏览器的关注 如果位置或者大小变化整个区域都要重新绘制 |\n| 可以使用CSS渲染文本                                     | 文本渲染能力较弱                                             |\n\n对比很明显，各有优势：\nSVG适用于数据量不大，应用存在大量交互的场景\nCanvas比较适用于事件交互少或者数据量大刷新快的场景\n\nOK，基于上面的分析我们来对比ECharts和D3。\n\n| **ECharts**                                                  | **D3**                                                       |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| Canvas为主4.0+也支持SVG                                      | SVG为主4.0+也支持Canvas                                      |\n| 提供很多图表通过简单配置可以满足大部分需求                   | 不直接提供图表，需要手动实现绘制代码                         |\n| 自由度差，不可定制                                           | 自由度很大，基本可以自己绘制任何图表                         |\n| 提供完善中文文档，示例功能完善                               | 提供完善英文文档，大部分示例需要完善才能使用，主要是参考     |\n| 开发效率高，通过快速配置即可完成                             | 大部分图表需要自己开发，学习成本大，太底层了，对可视化理论、数学逻辑都一定要求 |\n| 大数据量性能较好                                             | 需要手动优化， 比如借助react、vue的虚拟dom                   |\n| 不支持事件处理器，官方也提供了事件处理机制监听用户操作行为，功能有限 | 支持事件处理器可直接操作dom                                  |\n\n使用ECarts有较大的优势，开发效率高，动画、事件等实现也比较完善，正常情况下基本没有bug。而数据量不是特别大或者事件交互比较精细的场景可以采用D3 SVG来实现。\n\n任何一款工具型产品，都会在\"自由度\"和\"简便性\"两者间进行权衡与取舍，EChart使用简单而自由度差，D3自由度高而使用门槛高，具体使用哪个看具体场景业务来定。\n\n## 结论\n\n针对我们所调研的关系网类知识图谱两种技术都能实现。如果只是展示图表给用户看，而不需要太多修改我们可以使用echarts；如果场景中存在跟图表较多的交互操作可以尝试使用D3。\n\n最后我们再研究下Cytoscape.js库。\n\n## Cytosapce.js\n\nCytoscape.js是一个用于分析和可视化的[图论](https://en.wikipedia.org/wiki/Graph_theory)库。这涵盖了从网络生物学到社交网络分析的各种用途。 主要是描述点和线之间的关系 。\n\n![null](https://s2.loli.net/2024/01/08/yzJ5kF3mKOpgQ9d.png)\n\n### 基本使用\n\n**1.引入cytoscapejs**\n\n- 直接从github上下载最新的release包本地引入\n- CND引入\n- npm 安装\n\n[更多引入方式](https://js.cytoscape.org/#getting-started/including-cytoscape.js)\n**2.绘制图形**\n首先新建一个容器\n\n```html\n<style>\n  #cy {\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    top: 0;\n    left:0;\n  }\n</style>\n<div id=\"cy\"></div>\n```\n\nCopy\n\n> 请注意，.js在初始化时使用HTML DOM元素容器的尺寸进行布局和渲染。因此，在任何Cytoscape.js相关代码之前将CSS样式表放在中是非常重要的。否则，可能偶尔会错误地报告尺寸，从而导致不希望的行为。 这是官方提示，DOM的样式定义需要在head标签内避免发生问题\n\n参考示例进行图表初始化\n\n```javascript\nvar cy = cytoscape({\n  container: document.getElementById('cy'), // 容器dom\n  boxSelectionEnabled: false,\n  autounselectify: true,\n  elements: [\n    { // 节点a\n      data: {id: 'a'},\n    },\n    { // 节点b\n      data: {id: 'b'}\n    },\n    { // 节点c\n      data: {id: 'c'},\n    },\n    {\n      data: {id: 'd'}\n    },\n    {\n      data: {id: 'e'},\n    },\n    { // 连线ae，源节点a,目标节点e\n      data: {id: 'ae', weight: 1, target: 'e', source: 'a'}\n    },\n    {\n      data: {id: 'ab', weight: 3, target: 'b', source: 'a'}\n    },\n    {\n      data: {id: 'be', weight: 4, target: 'e', source: 'b'}\n    },\n    {\n      data: {id: 'bc', weight: 5, target: 'c', source: 'b'}\n    },\n    {\n      data: {id: 'ce', weight: 6, target: 'e', source: 'c'}\n    },\n    {\n      data: {id: 'cd', weight: 2, target: 'd', source: 'c'}\n    },\n    {\n      data: {id: 'de', weight: 7, target: 'e', source: 'd'}\n    }\n  ],\n  style: [\n    { // 节点样式\n      selector: 'node',\n      style: {\n        'content': 'data(id)'\n      }\n    },\n    { // 连线样式\n      selector: 'edge',\n      style: {\n        'curve-style': 'bezier',\n        'width': 4,\n        'line-color': '#ddd',\n        'target-arrow-color': '#ddd',\n        'target-arrow-shape': 'triangle'\n      }\n    }\n  ],\n  layout: {\n    name: 'breadthfirst',\n    directed: true,\n    root: '#a',\n    padding: 10\n  }\n})\n```\n\nCopy\n\nOK，图表生成成功。\n\n![null](https://s2.loli.net/2024/01/08/uevfTtaRmK2G9NQ.png)\n下面贴出初始化参数列表\n\n```javascript\nvar cy = cytoscape({\n  // 基本参数\n  container: undefined, // 容器\n  elements: [ /* ... */ ], // 指定为普通对象的元素数组\n  style: [ /* ... */ ], // 用于设置图形样式的样式表\n  layout: { name: 'grid' /* , ... */ }, // 指定布局选项的普通对象\n\n  // 初始化视图:\n  zoom: 1,\n  pan: { x: 0, y: 0 },\n\n  // 交互参数:\n  minZoom: 1e-50,\n  maxZoom: 1e50,\n  zoomingEnabled: true,\n  userZoomingEnabled: true,\n  panningEnabled: true,\n  userPanningEnabled: true,\n  boxSelectionEnabled: false,\n  selectionType: 'single',\n  touchTapThreshold: 8,\n  desktopTapThreshold: 4,\n  autolock: false,\n  autoungrabify: false,\n  autounselectify: false,\n\n  // 渲染参数:\n  headless: false,\n  styleEnabled: true,\n  hideEdgesOnViewport: false,\n  hideLabelsOnViewport: false,\n  textureOnViewport: false,\n  motionBlur: false,\n  motionBlurOpacity: 0.2,\n  wheelSensitivity: 1,\n  pixelRatio: 'auto'\n});\n```\n\nCopy\n\n更多API信息请查看文档 http://js.cytoscape.org/#core/graph-manipulation\n\n## 后续\n\n在调研天眼查、企查查两个网站的关系图谱源码时我们发现，天眼查不仅使用了D3.js，同时还用到了一个cola的库；企查查则是使用了d3.js + cytoscape.js来实现。\n\n**天眼查部分逻辑：**\n\n![null](https://s2.loli.net/2024/01/08/aygfHzdFKbrAhsq.png)\n\n```javascript\n// 这是d3的force布局\nvar force = d3.layout.force() \n.nodes(nodes)\n.links(edges)\n.size([width, height]) \n.linkDistance(150)\n.charge([-400])\nforce.start()\n```\n\nCopy\n\n通过cola.js确实可以查到对应的结果。[cola.js](https://ialab.it.monash.edu/webcola/index.html)\n\n![null](https://s2.loli.net/2024/01/08/npKMf68C9YUSFZt.png)\n由此可知cola是个约束器可以很好的跟D3、Cytoscape.js等库集成，而天眼查用到的是它作为d3适配器的一个功能，作为对d3 force布局的一个扩展补充。\n在Cytoscape中使用方法是通过扩展来实现\n\n```javascript\ncy.layout({ name: 'cola' /* and maybe some other options */ });\n```\n\nCopy\n\n**企查查部分逻辑**\n\n![null](https://s2.loli.net/2024/01/08/6WNHKbMBFOicDwg.png)\n图表父节点存在cytoscape的class，可以很明确的知道图表是用cytoscpase.js实现的，哪为什么还要用d3呢？？？\n\n![null](https://s2.loli.net/2024/01/08/LiRFBrph8fkct3X.png)\n继续向上查看代码，确实找到了d3的使用逻辑。\n\n![null](https://s2.loli.net/2024/01/08/PSGl2ATnV7tdD15.png)\n\n![null](http://yzjl2.xyz:8093/media/202304/18_1681882688.png)\n结合cytoscape代码里的layout可以猜出它的基本逻辑应该是先通过d3计算出所有节点最终的位置信息，再通过cytoscape的preset布局绘制关系图。下图是cytoscape的官网说明。\n\n![null](https://s2.loli.net/2024/01/08/fMZN6qBd3kDAnuF.png)\n调试后的数据确实比原数据多了d3的位置信息，后面数据转化也确实用到了这些信息\n![null](https://s2.loli.net/2024/01/08/QPH2Brcq9vXOCnJ.png)\n\n![null](https://s2.loli.net/2024/01/08/ojbJcT4VROfZCS2.png)\n不管是天眼查还是企查查都没有单独使用d3，而是d3+cola.js或者d3+cytoscape.js来实现这类关系图表。我推测可能跟d3的force布局特性有关（没找到相应资料，瞎猜的)。\nforce布局正式名称是力导图，正常情况下所有节点都是运动中的，拖拽某个节点不单单是被拖动的节点会移动，其他受其力作用的节点也会一起移动，所以如果需要天眼查这种静态的效果，就要想办法再绘画完后固定所有节点，比如企查查用的cytoscape的preset布局和天眼查使用cola来stop动画，以及给每个节点设置fixed。\n\n![null](https://s2.loli.net/2024/01/08/BqS4vAIWLYJZb3k.png)\n\n> **力导向图形绘制算法**是以美观的方式绘制图形的一类算法。它们的目的是将一个图的节点定位在二维或二维三维空间中，这样所有的边或多或少都是等长的，交叉的边越少越好。方法是根据边和节点的相对位置在边和节点的集合中分配力，然后利用这些力模拟边和节点的运动\n","slug":"快速构建可视化知识图谱","published":1,"updated":"2024-01-15T07:39:02.631Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrq64z6v0010soip1pmweax9","content":"<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><p><strong>知识图谱</strong>是一种知识库，其中的数据通过<a href=\"https://zh.wikipedia.org/wiki/%E5%9C%96%E8%AB%96\">图结构</a>的<a href=\"https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B\">数据模型</a>或<a href=\"https://zh.wikipedia.org/wiki/%E6%8B%93%E6%89%91%E5%AD%A6\">拓扑</a>整合而成。知识图谱通常被用来存储彼此之间具有相互联系的实体。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/mHApfr7wOEqziL3.png\" alt=\"null\"><br>经过查阅资料发现，目前市面上已知的的可视化图表库都已支持或者直接提供知识图谱类型图表。同时也发现有专门针对关系网这类图表的JS库（<a href=\"https://js.cytoscape.org/#introduction/factsheet\">Cytoscape.js</a>)。</p>\n<p>这里我们选取了可视化工具的佼佼者Echarts和D3来研究，最后我们再顺便研究下Cytoscape库。</p>\n<h2 id=\"什么是ECharts\"><a href=\"#什么是ECharts\" class=\"headerlink\" title=\"什么是ECharts\"></a>什么是ECharts</h2><p>由百度团队开发的开源免费JavaScript 可视化库，可以流畅的运行在 PC 和移动设备上，兼容当前绝大部分浏览器（IE9&#x2F;10&#x2F;11，Chrome，Firefox，Safari等），底层依赖矢量图形库 <a href=\"https://github.com/ecomfe/zrender\">ZRender</a>，提供直观，交互丰富，可高度个性化定制的数据可视化图表。<a href=\"https://echarts.apache.org/zh/index.html\">官网</a></p>\n<h3 id=\"基本开发\"><a href=\"#基本开发\" class=\"headerlink\" title=\"基本开发\"></a>基本开发</h3><p><strong>开发流程</strong></p>\n<ol>\n<li>根据需求确定图表类型(例如关系图)</li>\n<li>查找示例找到所需图表类型配置</li>\n<li>根据要求选择性的进行配置</li>\n</ol>\n<p>官方示例中找到我们所需要的关系图，查看配置结合api进行开发</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/Hs48M3EchJmbBkt.png\" alt=\"null\"><br>通过文档我们发现关系图有三种布局方式。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/uPb4pr5vJ3GHUBh.png\" alt=\"null\"><br>三种布局大致展示如下，基本配置项没有区别，其中只有force布局可以设置节点是否能拖拽<br><strong>none:</strong></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/tihegIb2WfQNwcY.png\" alt=\"null\"><br><strong>circular:</strong></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/dtuoTD8hUZlOq64.png\" alt=\"null\"><br><strong>force:</strong></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/ip62kXvhlmq4xFM.png\" alt=\"null\"><br>由此可以得知三种布局都能表示节点间多对多的关系，没有特殊要求只是展示节点间关系的话可以使用none布局；需要有动效交互可以用force布局；circluar布局就看业务需求而定。</p>\n<h2 id=\"什么是D3\"><a href=\"#什么是D3\" class=\"headerlink\" title=\"什么是D3\"></a>什么是D3</h2><p>D3 的全称是（Data-DrivenDocuments），顾名思义是一个被数据驱动的文档。其实是对数据进行可视化的JavaScript库。D3将强大的可视化和交互技术与数据驱动的DOM操作方法相结合，能最大限度地使用现代浏览器的性能同时为设计可视化界面保留了最大的自由度。</p>\n<p>该库更接近底层，与 echarts 不同，d3不提供现成的图表直接使用，而是通过操作 svg进行图表绘制，所以拥有极大的自由度，几乎可以实现任何 2d 的设计需求。<a href=\"https://d3js.org/\">官网</a></p>\n<h3 id=\"基本开发-1\"><a href=\"#基本开发-1\" class=\"headerlink\" title=\"基本开发\"></a>基本开发</h3><p>要绘图就要有基本的<strong>画布</strong>，所以第一步就是创建画布。HTML5提供了两种画布：SVG和Canvas。<br>D3库是以SVG为主，同时也支持Canvas画布，虽然没有明确要求说一定要使用SVG绘图，但是D3 提供了众多的 SVG 图形的生成器，因此，建议使用 SVG 画布。</p>\n<p><strong>1.创建画布</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> width = <span class=\"number\">400</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> height = <span class=\"number\">400</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> svg = d3.<span class=\"title function_\">select</span>(<span class=\"string\">&quot;body&quot;</span>) <span class=\"comment\">// 选择器，类似于jquery语法</span></span><br><span class=\"line\">            .<span class=\"title function_\">append</span>(<span class=\"string\">&#x27;svg&#x27;</span>) <span class=\"comment\">// 插入svg节点。还是类似于jquery语法</span></span><br><span class=\"line\">            .<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;width&#x27;</span>, width) <span class=\"comment\">// 设置svg画布宽高</span></span><br><span class=\"line\">            .<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;height&#x27;</span>, height)</span><br></pre></td></tr></table></figure>\n\n<p>Copy</p>\n<p>有了画布就可以在画布上进行作画了。<br><strong>2.布局（数据转换）</strong><br>布局，可以理解成 “制作常见图形的函数”，有了它制作各种相对复杂的图表就方便多了。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/askGpzcv89jJPtg.png\" alt=\"null\"><br>从上面的图可以看到，布局的作用是：将<strong>不适合用于绘图的数据</strong>转换成了<strong>适合用于绘图的数据</strong>。</p>\n<p>对于我们需要的知识图谱D3也提供了对应的布局 ：Force — 力学图、力导向图。</p>\n<p>OK，我们先定义节点数据和连线数据</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> nodes = [ &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;桂林&quot;</span> &#125;, &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;广州&quot;</span> &#125;,</span><br><span class=\"line\">            &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;厦门&quot;</span> &#125;, &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;杭州&quot;</span> &#125;,</span><br><span class=\"line\">            &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;上海&quot;</span> &#125;, &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;青岛&quot;</span> &#125;,</span><br><span class=\"line\">            &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;天津&quot;</span> &#125; ];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> edges = [ &#123; source : <span class=\"number\">0</span> , <span class=\"attr\">target</span>: <span class=\"number\">1</span> &#125; , &#123; source : <span class=\"number\">0</span> , <span class=\"attr\">target</span>: <span class=\"number\">2</span> &#125; ,</span><br><span class=\"line\">    &#123; source : <span class=\"number\">0</span> , <span class=\"attr\">target</span>: <span class=\"number\">3</span> &#125; , &#123; source : <span class=\"number\">1</span> , <span class=\"attr\">target</span>: <span class=\"number\">4</span> &#125; ,</span><br><span class=\"line\">    &#123; source : <span class=\"number\">1</span> , <span class=\"attr\">target</span>: <span class=\"number\">5</span> &#125; , &#123; source : <span class=\"number\">1</span> , <span class=\"attr\">target</span>: <span class=\"number\">6</span> &#125; ];</span><br></pre></td></tr></table></figure>\n\n<p>Copy</p>\n<p>一看就知道这些数据是不能作图的，因为不知道节点和连线的坐标，需要用到布局。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> force = d3.<span class=\"property\">layout</span>.<span class=\"title function_\">force</span>()  <span class=\"comment\">// force布局接口</span></span><br><span class=\"line\">              .<span class=\"title function_\">nodes</span>(nodes) <span class=\"comment\">// 指定节点数组</span></span><br><span class=\"line\">              .<span class=\"title function_\">links</span>(edges) <span class=\"comment\">// 指定连线数组</span></span><br><span class=\"line\">              .<span class=\"title function_\">size</span>([width, height]) <span class=\"comment\">// 指定作用域范围</span></span><br><span class=\"line\">              .<span class=\"title function_\">linkDistance</span>(<span class=\"number\">150</span>) <span class=\"comment\">// 指定连线长度</span></span><br><span class=\"line\">              .<span class=\"title function_\">charge</span>([-<span class=\"number\">400</span>]) <span class=\"comment\">// 相互间的作用力</span></span><br><span class=\"line\">force.<span class=\"title function_\">start</span>()</span><br></pre></td></tr></table></figure>\n\n<p>Copy</p>\n<p>这时再打印nodes和edges就会发现数据里多了好多新字段</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/r6WAvTKe8gLJ4xm.png\" alt=\"null\"><br>新增字段含义如下：</p>\n<ul>\n<li>index：节点的索引号</li>\n<li>px, py：节点上一个时刻的坐标</li>\n<li>x, y：节点的当前坐标</li>\n<li>weight：节点的权重</li>\n</ul>\n<p>有了这些数据就可以绘制图形了。<br><strong>3.绘制</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 添加连线</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> svg_edges = svg.<span class=\"title function_\">selectAll</span>(<span class=\"string\">&#x27;line&#x27;</span>) </span><br><span class=\"line\">                .<span class=\"title function_\">data</span>(edges) <span class=\"comment\">// 绑定一个数组到选择集上，数组的各项值分别与选择集的各元素绑定</span></span><br><span class=\"line\">                .<span class=\"title function_\">enter</span>() <span class=\"comment\">// /指定选择集的enter部分，下面具体介绍</span></span><br><span class=\"line\">                .<span class=\"title function_\">append</span>(<span class=\"string\">&#x27;line&#x27;</span>)</span><br><span class=\"line\">                .<span class=\"title function_\">style</span>(<span class=\"string\">&#x27;stroke&#x27;</span>, <span class=\"string\">&#x27;#ccc&#x27;</span>)</span><br><span class=\"line\">                .<span class=\"title function_\">style</span>(<span class=\"string\">&#x27;stroke-width&#x27;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> color = d3.<span class=\"property\">scale</span>.<span class=\"title function_\">category20</span>();</span><br><span class=\"line\"><span class=\"comment\">// 添加节点</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> svg_nodes = svg.<span class=\"title function_\">selectAll</span>(<span class=\"string\">&#x27;circle&#x27;</span>)</span><br><span class=\"line\">                .<span class=\"title function_\">data</span>(nodes)</span><br><span class=\"line\">                .<span class=\"title function_\">enter</span>()</span><br><span class=\"line\">                .<span class=\"title function_\">append</span>(<span class=\"string\">&#x27;circle&#x27;</span>)</span><br><span class=\"line\">                .<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;r&#x27;</span>, <span class=\"number\">20</span>)</span><br><span class=\"line\">                .<span class=\"title function_\">style</span>(<span class=\"string\">&#x27;fill&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">d, i</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"title function_\">color</span>(i)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                .<span class=\"title function_\">call</span>(force.<span class=\"property\">drag</span>) <span class=\"comment\">// 使节点能拖动</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> svg_texts = svg.<span class=\"title function_\">selectAll</span>(<span class=\"string\">&#x27;text&#x27;</span>)</span><br><span class=\"line\">                .<span class=\"title function_\">data</span>(nodes)</span><br><span class=\"line\">                .<span class=\"title function_\">enter</span>()</span><br><span class=\"line\">                .<span class=\"title function_\">append</span>(<span class=\"string\">&#x27;text&#x27;</span>)</span><br><span class=\"line\">                .<span class=\"title function_\">style</span>(<span class=\"string\">&#x27;fill&#x27;</span>, <span class=\"string\">&#x27;black&#x27;</span>)</span><br><span class=\"line\">                .<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;dx&#x27;</span>,<span class=\"number\">20</span>)</span><br><span class=\"line\">                .<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;dy&#x27;</span>, <span class=\"number\">8</span>)</span><br><span class=\"line\">                .<span class=\"title function_\">text</span>(<span class=\"keyword\">function</span>(<span class=\"params\">d</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> d.<span class=\"property\">name</span></span><br><span class=\"line\">                &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>Copy</p>\n<p>打开浏览器输入地址进行访问，图形堆叠在一起，为啥？？？</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/yi1eHrtbpjUSP6V.png\" alt=\"null\"><br>原来力导向图是不断运动的，每一时刻都在发生更新，因此，必须不断更新节点和连线的位置。力导向图布局 force 有一个事件 tick，每进行到一个时刻，都要调用它，更新的内容就写在它的监听器里就好。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">force.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;tick&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    svg_edges.<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;x1&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">d</span>) &#123;<span class=\"keyword\">return</span> d.<span class=\"property\">source</span>.<span class=\"property\">x</span>&#125;)</span><br><span class=\"line\">            .<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;y1&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">d</span>) &#123;<span class=\"keyword\">return</span> d.<span class=\"property\">source</span>.<span class=\"property\">y</span>&#125;)</span><br><span class=\"line\">            .<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;x2&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">d</span>) &#123;<span class=\"keyword\">return</span> d.<span class=\"property\">target</span>.<span class=\"property\">x</span>&#125;)</span><br><span class=\"line\">            .<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;y2&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">d</span>) &#123;<span class=\"keyword\">return</span> d.<span class=\"property\">target</span>.<span class=\"property\">y</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    svg_nodes.<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;cx&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">d</span>) &#123;<span class=\"keyword\">return</span> d.<span class=\"property\">x</span>&#125;)</span><br><span class=\"line\">            .<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;cy&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">d</span>) &#123;<span class=\"keyword\">return</span> d.<span class=\"property\">y</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    svg_texts.<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;x&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">d</span>) &#123;<span class=\"keyword\">return</span> d.<span class=\"property\">x</span>&#125;)</span><br><span class=\"line\">            .<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;y&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">d</span>) &#123;<span class=\"keyword\">return</span> d.<span class=\"property\">y</span>&#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>Copy</p>\n<p>再到浏览器里刷新页面，OK，关系图出来了。</p>\n<p><img src=\"http://yzjl2.xyz:8093/media/202304/10_1681882257.png\" alt=\"null\"><br>里面每一个节点都是可以拖动，同时也能引发其他节点的变化。</p>\n<h2 id=\"ECharts和D3对比\"><a href=\"#ECharts和D3对比\" class=\"headerlink\" title=\"ECharts和D3对比\"></a>ECharts和D3对比</h2><p>在进行对比前，我们先来看下上面D3那节提到的HTML5的两种图形渲染技术：SVG和Canvas。所有的三方库底层技术都是基于这两中技术实现的。</p>\n<table>\n<thead>\n<tr>\n<th><strong>SVG</strong></th>\n<th><strong>Canvas</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>矢量图不依赖分辨率</td>\n<td>依赖分辨率</td>\n</tr>\n<tr>\n<td>支持DOM事件处理器</td>\n<td>不支持事件处理器</td>\n</tr>\n<tr>\n<td>适合带有大型渲染区域的应用（如地图）</td>\n<td>最适合图像密集型的应用比如游戏</td>\n</tr>\n<tr>\n<td>复杂度高会减慢渲染速度（任何频繁操作dom的应用都快不了）</td>\n<td>一旦图形绘制完成，就不会再得到浏览器的关注 如果位置或者大小变化整个区域都要重新绘制</td>\n</tr>\n<tr>\n<td>可以使用CSS渲染文本</td>\n<td>文本渲染能力较弱</td>\n</tr>\n</tbody></table>\n<p>对比很明显，各有优势：<br>SVG适用于数据量不大，应用存在大量交互的场景<br>Canvas比较适用于事件交互少或者数据量大刷新快的场景</p>\n<p>OK，基于上面的分析我们来对比ECharts和D3。</p>\n<table>\n<thead>\n<tr>\n<th><strong>ECharts</strong></th>\n<th><strong>D3</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Canvas为主4.0+也支持SVG</td>\n<td>SVG为主4.0+也支持Canvas</td>\n</tr>\n<tr>\n<td>提供很多图表通过简单配置可以满足大部分需求</td>\n<td>不直接提供图表，需要手动实现绘制代码</td>\n</tr>\n<tr>\n<td>自由度差，不可定制</td>\n<td>自由度很大，基本可以自己绘制任何图表</td>\n</tr>\n<tr>\n<td>提供完善中文文档，示例功能完善</td>\n<td>提供完善英文文档，大部分示例需要完善才能使用，主要是参考</td>\n</tr>\n<tr>\n<td>开发效率高，通过快速配置即可完成</td>\n<td>大部分图表需要自己开发，学习成本大，太底层了，对可视化理论、数学逻辑都一定要求</td>\n</tr>\n<tr>\n<td>大数据量性能较好</td>\n<td>需要手动优化， 比如借助react、vue的虚拟dom</td>\n</tr>\n<tr>\n<td>不支持事件处理器，官方也提供了事件处理机制监听用户操作行为，功能有限</td>\n<td>支持事件处理器可直接操作dom</td>\n</tr>\n</tbody></table>\n<p>使用ECarts有较大的优势，开发效率高，动画、事件等实现也比较完善，正常情况下基本没有bug。而数据量不是特别大或者事件交互比较精细的场景可以采用D3 SVG来实现。</p>\n<p>任何一款工具型产品，都会在”自由度”和”简便性”两者间进行权衡与取舍，EChart使用简单而自由度差，D3自由度高而使用门槛高，具体使用哪个看具体场景业务来定。</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>针对我们所调研的关系网类知识图谱两种技术都能实现。如果只是展示图表给用户看，而不需要太多修改我们可以使用echarts；如果场景中存在跟图表较多的交互操作可以尝试使用D3。</p>\n<p>最后我们再研究下Cytoscape.js库。</p>\n<h2 id=\"Cytosapce-js\"><a href=\"#Cytosapce-js\" class=\"headerlink\" title=\"Cytosapce.js\"></a>Cytosapce.js</h2><p>Cytoscape.js是一个用于分析和可视化的<a href=\"https://en.wikipedia.org/wiki/Graph_theory\">图论</a>库。这涵盖了从网络生物学到社交网络分析的各种用途。 主要是描述点和线之间的关系 。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/yzJ5kF3mKOpgQ9d.png\" alt=\"null\"></p>\n<h3 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h3><p><strong>1.引入cytoscapejs</strong></p>\n<ul>\n<li>直接从github上下载最新的release包本地引入</li>\n<li>CND引入</li>\n<li>npm 安装</li>\n</ul>\n<p><a href=\"https://js.cytoscape.org/#getting-started/including-cytoscape.js\">更多引入方式</a><br><strong>2.绘制图形</strong><br>首先新建一个容器</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"selector-id\">#cy</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">position</span>: absolute;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">left</span>:<span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;cy&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Copy</p>\n<blockquote>\n<p>请注意，.js在初始化时使用HTML DOM元素容器的尺寸进行布局和渲染。因此，在任何Cytoscape.js相关代码之前将CSS样式表放在中是非常重要的。否则，可能偶尔会错误地报告尺寸，从而导致不希望的行为。 这是官方提示，DOM的样式定义需要在head标签内避免发生问题</p>\n</blockquote>\n<p>参考示例进行图表初始化</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cy = <span class=\"title function_\">cytoscape</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">container</span>: <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;cy&#x27;</span>), <span class=\"comment\">// 容器dom</span></span><br><span class=\"line\">  <span class=\"attr\">boxSelectionEnabled</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">autounselectify</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">elements</span>: [</span><br><span class=\"line\">    &#123; <span class=\"comment\">// 节点a</span></span><br><span class=\"line\">      <span class=\"attr\">data</span>: &#123;<span class=\"attr\">id</span>: <span class=\"string\">&#x27;a&#x27;</span>&#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123; <span class=\"comment\">// 节点b</span></span><br><span class=\"line\">      <span class=\"attr\">data</span>: &#123;<span class=\"attr\">id</span>: <span class=\"string\">&#x27;b&#x27;</span>&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123; <span class=\"comment\">// 节点c</span></span><br><span class=\"line\">      <span class=\"attr\">data</span>: &#123;<span class=\"attr\">id</span>: <span class=\"string\">&#x27;c&#x27;</span>&#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">data</span>: &#123;<span class=\"attr\">id</span>: <span class=\"string\">&#x27;d&#x27;</span>&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">data</span>: &#123;<span class=\"attr\">id</span>: <span class=\"string\">&#x27;e&#x27;</span>&#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123; <span class=\"comment\">// 连线ae，源节点a,目标节点e</span></span><br><span class=\"line\">      <span class=\"attr\">data</span>: &#123;<span class=\"attr\">id</span>: <span class=\"string\">&#x27;ae&#x27;</span>, <span class=\"attr\">weight</span>: <span class=\"number\">1</span>, <span class=\"attr\">target</span>: <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"attr\">source</span>: <span class=\"string\">&#x27;a&#x27;</span>&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">data</span>: &#123;<span class=\"attr\">id</span>: <span class=\"string\">&#x27;ab&#x27;</span>, <span class=\"attr\">weight</span>: <span class=\"number\">3</span>, <span class=\"attr\">target</span>: <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"attr\">source</span>: <span class=\"string\">&#x27;a&#x27;</span>&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">data</span>: &#123;<span class=\"attr\">id</span>: <span class=\"string\">&#x27;be&#x27;</span>, <span class=\"attr\">weight</span>: <span class=\"number\">4</span>, <span class=\"attr\">target</span>: <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"attr\">source</span>: <span class=\"string\">&#x27;b&#x27;</span>&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">data</span>: &#123;<span class=\"attr\">id</span>: <span class=\"string\">&#x27;bc&#x27;</span>, <span class=\"attr\">weight</span>: <span class=\"number\">5</span>, <span class=\"attr\">target</span>: <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"attr\">source</span>: <span class=\"string\">&#x27;b&#x27;</span>&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">data</span>: &#123;<span class=\"attr\">id</span>: <span class=\"string\">&#x27;ce&#x27;</span>, <span class=\"attr\">weight</span>: <span class=\"number\">6</span>, <span class=\"attr\">target</span>: <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"attr\">source</span>: <span class=\"string\">&#x27;c&#x27;</span>&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">data</span>: &#123;<span class=\"attr\">id</span>: <span class=\"string\">&#x27;cd&#x27;</span>, <span class=\"attr\">weight</span>: <span class=\"number\">2</span>, <span class=\"attr\">target</span>: <span class=\"string\">&#x27;d&#x27;</span>, <span class=\"attr\">source</span>: <span class=\"string\">&#x27;c&#x27;</span>&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">data</span>: &#123;<span class=\"attr\">id</span>: <span class=\"string\">&#x27;de&#x27;</span>, <span class=\"attr\">weight</span>: <span class=\"number\">7</span>, <span class=\"attr\">target</span>: <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"attr\">source</span>: <span class=\"string\">&#x27;d&#x27;</span>&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">style</span>: [</span><br><span class=\"line\">    &#123; <span class=\"comment\">// 节点样式</span></span><br><span class=\"line\">      <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;node&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">style</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;content&#x27;</span>: <span class=\"string\">&#x27;data(id)&#x27;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123; <span class=\"comment\">// 连线样式</span></span><br><span class=\"line\">      <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;edge&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">style</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;curve-style&#x27;</span>: <span class=\"string\">&#x27;bezier&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;width&#x27;</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;line-color&#x27;</span>: <span class=\"string\">&#x27;#ddd&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;target-arrow-color&#x27;</span>: <span class=\"string\">&#x27;#ddd&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;target-arrow-shape&#x27;</span>: <span class=\"string\">&#x27;triangle&#x27;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">layout</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;breadthfirst&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">directed</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">root</span>: <span class=\"string\">&#x27;#a&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">padding</span>: <span class=\"number\">10</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>Copy</p>\n<p>OK，图表生成成功。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/uevfTtaRmK2G9NQ.png\" alt=\"null\"><br>下面贴出初始化参数列表</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cy = <span class=\"title function_\">cytoscape</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 基本参数</span></span><br><span class=\"line\">  <span class=\"attr\">container</span>: <span class=\"literal\">undefined</span>, <span class=\"comment\">// 容器</span></span><br><span class=\"line\">  <span class=\"attr\">elements</span>: [ <span class=\"comment\">/* ... */</span> ], <span class=\"comment\">// 指定为普通对象的元素数组</span></span><br><span class=\"line\">  <span class=\"attr\">style</span>: [ <span class=\"comment\">/* ... */</span> ], <span class=\"comment\">// 用于设置图形样式的样式表</span></span><br><span class=\"line\">  <span class=\"attr\">layout</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;grid&#x27;</span> <span class=\"comment\">/* , ... */</span> &#125;, <span class=\"comment\">// 指定布局选项的普通对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 初始化视图:</span></span><br><span class=\"line\">  <span class=\"attr\">zoom</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">pan</span>: &#123; <span class=\"attr\">x</span>: <span class=\"number\">0</span>, <span class=\"attr\">y</span>: <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 交互参数:</span></span><br><span class=\"line\">  <span class=\"attr\">minZoom</span>: <span class=\"number\">1e-50</span>,</span><br><span class=\"line\">  <span class=\"attr\">maxZoom</span>: <span class=\"number\">1e50</span>,</span><br><span class=\"line\">  <span class=\"attr\">zoomingEnabled</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">userZoomingEnabled</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">panningEnabled</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">userPanningEnabled</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">boxSelectionEnabled</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">selectionType</span>: <span class=\"string\">&#x27;single&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">touchTapThreshold</span>: <span class=\"number\">8</span>,</span><br><span class=\"line\">  <span class=\"attr\">desktopTapThreshold</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">  <span class=\"attr\">autolock</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">autoungrabify</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">autounselectify</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 渲染参数:</span></span><br><span class=\"line\">  <span class=\"attr\">headless</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleEnabled</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">hideEdgesOnViewport</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">hideLabelsOnViewport</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">textureOnViewport</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">motionBlur</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">motionBlurOpacity</span>: <span class=\"number\">0.2</span>,</span><br><span class=\"line\">  <span class=\"attr\">wheelSensitivity</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">pixelRatio</span>: <span class=\"string\">&#x27;auto&#x27;</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Copy</p>\n<p>更多API信息请查看文档 <a href=\"http://js.cytoscape.org/#core/graph-manipulation\">http://js.cytoscape.org/#core/graph-manipulation</a></p>\n<h2 id=\"后续\"><a href=\"#后续\" class=\"headerlink\" title=\"后续\"></a>后续</h2><p>在调研天眼查、企查查两个网站的关系图谱源码时我们发现，天眼查不仅使用了D3.js，同时还用到了一个cola的库；企查查则是使用了d3.js + cytoscape.js来实现。</p>\n<p><strong>天眼查部分逻辑：</strong></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/aygfHzdFKbrAhsq.png\" alt=\"null\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这是d3的force布局</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> force = d3.<span class=\"property\">layout</span>.<span class=\"title function_\">force</span>() </span><br><span class=\"line\">.<span class=\"title function_\">nodes</span>(nodes)</span><br><span class=\"line\">.<span class=\"title function_\">links</span>(edges)</span><br><span class=\"line\">.<span class=\"title function_\">size</span>([width, height]) </span><br><span class=\"line\">.<span class=\"title function_\">linkDistance</span>(<span class=\"number\">150</span>)</span><br><span class=\"line\">.<span class=\"title function_\">charge</span>([-<span class=\"number\">400</span>])</span><br><span class=\"line\">force.<span class=\"title function_\">start</span>()</span><br></pre></td></tr></table></figure>\n\n<p>Copy</p>\n<p>通过cola.js确实可以查到对应的结果。<a href=\"https://ialab.it.monash.edu/webcola/index.html\">cola.js</a></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/npKMf68C9YUSFZt.png\" alt=\"null\"><br>由此可知cola是个约束器可以很好的跟D3、Cytoscape.js等库集成，而天眼查用到的是它作为d3适配器的一个功能，作为对d3 force布局的一个扩展补充。<br>在Cytoscape中使用方法是通过扩展来实现</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cy.<span class=\"title function_\">layout</span>(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;cola&#x27;</span> <span class=\"comment\">/* and maybe some other options */</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Copy</p>\n<p><strong>企查查部分逻辑</strong></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/6WNHKbMBFOicDwg.png\" alt=\"null\"><br>图表父节点存在cytoscape的class，可以很明确的知道图表是用cytoscpase.js实现的，哪为什么还要用d3呢？？？</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/LiRFBrph8fkct3X.png\" alt=\"null\"><br>继续向上查看代码，确实找到了d3的使用逻辑。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/PSGl2ATnV7tdD15.png\" alt=\"null\"></p>\n<p><img src=\"http://yzjl2.xyz:8093/media/202304/18_1681882688.png\" alt=\"null\"><br>结合cytoscape代码里的layout可以猜出它的基本逻辑应该是先通过d3计算出所有节点最终的位置信息，再通过cytoscape的preset布局绘制关系图。下图是cytoscape的官网说明。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/fMZN6qBd3kDAnuF.png\" alt=\"null\"><br>调试后的数据确实比原数据多了d3的位置信息，后面数据转化也确实用到了这些信息<br><img src=\"https://s2.loli.net/2024/01/08/QPH2Brcq9vXOCnJ.png\" alt=\"null\"></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/ojbJcT4VROfZCS2.png\" alt=\"null\"><br>不管是天眼查还是企查查都没有单独使用d3，而是d3+cola.js或者d3+cytoscape.js来实现这类关系图表。我推测可能跟d3的force布局特性有关（没找到相应资料，瞎猜的)。<br>force布局正式名称是力导图，正常情况下所有节点都是运动中的，拖拽某个节点不单单是被拖动的节点会移动，其他受其力作用的节点也会一起移动，所以如果需要天眼查这种静态的效果，就要想办法再绘画完后固定所有节点，比如企查查用的cytoscape的preset布局和天眼查使用cola来stop动画，以及给每个节点设置fixed。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/BqS4vAIWLYJZb3k.png\" alt=\"null\"></p>\n<blockquote>\n<p><strong>力导向图形绘制算法</strong>是以美观的方式绘制图形的一类算法。它们的目的是将一个图的节点定位在二维或二维三维空间中，这样所有的边或多或少都是等长的，交叉的边越少越好。方法是根据边和节点的相对位置在边和节点的集合中分配力，然后利用这些力模拟边和节点的运动</p>\n</blockquote>\n","site":{"data":{}},"length":3400,"excerpt":"","more":"<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><p><strong>知识图谱</strong>是一种知识库，其中的数据通过<a href=\"https://zh.wikipedia.org/wiki/%E5%9C%96%E8%AB%96\">图结构</a>的<a href=\"https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B\">数据模型</a>或<a href=\"https://zh.wikipedia.org/wiki/%E6%8B%93%E6%89%91%E5%AD%A6\">拓扑</a>整合而成。知识图谱通常被用来存储彼此之间具有相互联系的实体。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/mHApfr7wOEqziL3.png\" alt=\"null\"><br>经过查阅资料发现，目前市面上已知的的可视化图表库都已支持或者直接提供知识图谱类型图表。同时也发现有专门针对关系网这类图表的JS库（<a href=\"https://js.cytoscape.org/#introduction/factsheet\">Cytoscape.js</a>)。</p>\n<p>这里我们选取了可视化工具的佼佼者Echarts和D3来研究，最后我们再顺便研究下Cytoscape库。</p>\n<h2 id=\"什么是ECharts\"><a href=\"#什么是ECharts\" class=\"headerlink\" title=\"什么是ECharts\"></a>什么是ECharts</h2><p>由百度团队开发的开源免费JavaScript 可视化库，可以流畅的运行在 PC 和移动设备上，兼容当前绝大部分浏览器（IE9&#x2F;10&#x2F;11，Chrome，Firefox，Safari等），底层依赖矢量图形库 <a href=\"https://github.com/ecomfe/zrender\">ZRender</a>，提供直观，交互丰富，可高度个性化定制的数据可视化图表。<a href=\"https://echarts.apache.org/zh/index.html\">官网</a></p>\n<h3 id=\"基本开发\"><a href=\"#基本开发\" class=\"headerlink\" title=\"基本开发\"></a>基本开发</h3><p><strong>开发流程</strong></p>\n<ol>\n<li>根据需求确定图表类型(例如关系图)</li>\n<li>查找示例找到所需图表类型配置</li>\n<li>根据要求选择性的进行配置</li>\n</ol>\n<p>官方示例中找到我们所需要的关系图，查看配置结合api进行开发</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/Hs48M3EchJmbBkt.png\" alt=\"null\"><br>通过文档我们发现关系图有三种布局方式。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/uPb4pr5vJ3GHUBh.png\" alt=\"null\"><br>三种布局大致展示如下，基本配置项没有区别，其中只有force布局可以设置节点是否能拖拽<br><strong>none:</strong></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/tihegIb2WfQNwcY.png\" alt=\"null\"><br><strong>circular:</strong></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/dtuoTD8hUZlOq64.png\" alt=\"null\"><br><strong>force:</strong></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/ip62kXvhlmq4xFM.png\" alt=\"null\"><br>由此可以得知三种布局都能表示节点间多对多的关系，没有特殊要求只是展示节点间关系的话可以使用none布局；需要有动效交互可以用force布局；circluar布局就看业务需求而定。</p>\n<h2 id=\"什么是D3\"><a href=\"#什么是D3\" class=\"headerlink\" title=\"什么是D3\"></a>什么是D3</h2><p>D3 的全称是（Data-DrivenDocuments），顾名思义是一个被数据驱动的文档。其实是对数据进行可视化的JavaScript库。D3将强大的可视化和交互技术与数据驱动的DOM操作方法相结合，能最大限度地使用现代浏览器的性能同时为设计可视化界面保留了最大的自由度。</p>\n<p>该库更接近底层，与 echarts 不同，d3不提供现成的图表直接使用，而是通过操作 svg进行图表绘制，所以拥有极大的自由度，几乎可以实现任何 2d 的设计需求。<a href=\"https://d3js.org/\">官网</a></p>\n<h3 id=\"基本开发-1\"><a href=\"#基本开发-1\" class=\"headerlink\" title=\"基本开发\"></a>基本开发</h3><p>要绘图就要有基本的<strong>画布</strong>，所以第一步就是创建画布。HTML5提供了两种画布：SVG和Canvas。<br>D3库是以SVG为主，同时也支持Canvas画布，虽然没有明确要求说一定要使用SVG绘图，但是D3 提供了众多的 SVG 图形的生成器，因此，建议使用 SVG 画布。</p>\n<p><strong>1.创建画布</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> width = <span class=\"number\">400</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> height = <span class=\"number\">400</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> svg = d3.<span class=\"title function_\">select</span>(<span class=\"string\">&quot;body&quot;</span>) <span class=\"comment\">// 选择器，类似于jquery语法</span></span><br><span class=\"line\">            .<span class=\"title function_\">append</span>(<span class=\"string\">&#x27;svg&#x27;</span>) <span class=\"comment\">// 插入svg节点。还是类似于jquery语法</span></span><br><span class=\"line\">            .<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;width&#x27;</span>, width) <span class=\"comment\">// 设置svg画布宽高</span></span><br><span class=\"line\">            .<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;height&#x27;</span>, height)</span><br></pre></td></tr></table></figure>\n\n<p>Copy</p>\n<p>有了画布就可以在画布上进行作画了。<br><strong>2.布局（数据转换）</strong><br>布局，可以理解成 “制作常见图形的函数”，有了它制作各种相对复杂的图表就方便多了。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/askGpzcv89jJPtg.png\" alt=\"null\"><br>从上面的图可以看到，布局的作用是：将<strong>不适合用于绘图的数据</strong>转换成了<strong>适合用于绘图的数据</strong>。</p>\n<p>对于我们需要的知识图谱D3也提供了对应的布局 ：Force — 力学图、力导向图。</p>\n<p>OK，我们先定义节点数据和连线数据</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> nodes = [ &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;桂林&quot;</span> &#125;, &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;广州&quot;</span> &#125;,</span><br><span class=\"line\">            &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;厦门&quot;</span> &#125;, &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;杭州&quot;</span> &#125;,</span><br><span class=\"line\">            &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;上海&quot;</span> &#125;, &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;青岛&quot;</span> &#125;,</span><br><span class=\"line\">            &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;天津&quot;</span> &#125; ];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> edges = [ &#123; source : <span class=\"number\">0</span> , <span class=\"attr\">target</span>: <span class=\"number\">1</span> &#125; , &#123; source : <span class=\"number\">0</span> , <span class=\"attr\">target</span>: <span class=\"number\">2</span> &#125; ,</span><br><span class=\"line\">    &#123; source : <span class=\"number\">0</span> , <span class=\"attr\">target</span>: <span class=\"number\">3</span> &#125; , &#123; source : <span class=\"number\">1</span> , <span class=\"attr\">target</span>: <span class=\"number\">4</span> &#125; ,</span><br><span class=\"line\">    &#123; source : <span class=\"number\">1</span> , <span class=\"attr\">target</span>: <span class=\"number\">5</span> &#125; , &#123; source : <span class=\"number\">1</span> , <span class=\"attr\">target</span>: <span class=\"number\">6</span> &#125; ];</span><br></pre></td></tr></table></figure>\n\n<p>Copy</p>\n<p>一看就知道这些数据是不能作图的，因为不知道节点和连线的坐标，需要用到布局。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> force = d3.<span class=\"property\">layout</span>.<span class=\"title function_\">force</span>()  <span class=\"comment\">// force布局接口</span></span><br><span class=\"line\">              .<span class=\"title function_\">nodes</span>(nodes) <span class=\"comment\">// 指定节点数组</span></span><br><span class=\"line\">              .<span class=\"title function_\">links</span>(edges) <span class=\"comment\">// 指定连线数组</span></span><br><span class=\"line\">              .<span class=\"title function_\">size</span>([width, height]) <span class=\"comment\">// 指定作用域范围</span></span><br><span class=\"line\">              .<span class=\"title function_\">linkDistance</span>(<span class=\"number\">150</span>) <span class=\"comment\">// 指定连线长度</span></span><br><span class=\"line\">              .<span class=\"title function_\">charge</span>([-<span class=\"number\">400</span>]) <span class=\"comment\">// 相互间的作用力</span></span><br><span class=\"line\">force.<span class=\"title function_\">start</span>()</span><br></pre></td></tr></table></figure>\n\n<p>Copy</p>\n<p>这时再打印nodes和edges就会发现数据里多了好多新字段</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/r6WAvTKe8gLJ4xm.png\" alt=\"null\"><br>新增字段含义如下：</p>\n<ul>\n<li>index：节点的索引号</li>\n<li>px, py：节点上一个时刻的坐标</li>\n<li>x, y：节点的当前坐标</li>\n<li>weight：节点的权重</li>\n</ul>\n<p>有了这些数据就可以绘制图形了。<br><strong>3.绘制</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 添加连线</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> svg_edges = svg.<span class=\"title function_\">selectAll</span>(<span class=\"string\">&#x27;line&#x27;</span>) </span><br><span class=\"line\">                .<span class=\"title function_\">data</span>(edges) <span class=\"comment\">// 绑定一个数组到选择集上，数组的各项值分别与选择集的各元素绑定</span></span><br><span class=\"line\">                .<span class=\"title function_\">enter</span>() <span class=\"comment\">// /指定选择集的enter部分，下面具体介绍</span></span><br><span class=\"line\">                .<span class=\"title function_\">append</span>(<span class=\"string\">&#x27;line&#x27;</span>)</span><br><span class=\"line\">                .<span class=\"title function_\">style</span>(<span class=\"string\">&#x27;stroke&#x27;</span>, <span class=\"string\">&#x27;#ccc&#x27;</span>)</span><br><span class=\"line\">                .<span class=\"title function_\">style</span>(<span class=\"string\">&#x27;stroke-width&#x27;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> color = d3.<span class=\"property\">scale</span>.<span class=\"title function_\">category20</span>();</span><br><span class=\"line\"><span class=\"comment\">// 添加节点</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> svg_nodes = svg.<span class=\"title function_\">selectAll</span>(<span class=\"string\">&#x27;circle&#x27;</span>)</span><br><span class=\"line\">                .<span class=\"title function_\">data</span>(nodes)</span><br><span class=\"line\">                .<span class=\"title function_\">enter</span>()</span><br><span class=\"line\">                .<span class=\"title function_\">append</span>(<span class=\"string\">&#x27;circle&#x27;</span>)</span><br><span class=\"line\">                .<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;r&#x27;</span>, <span class=\"number\">20</span>)</span><br><span class=\"line\">                .<span class=\"title function_\">style</span>(<span class=\"string\">&#x27;fill&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">d, i</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"title function_\">color</span>(i)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                .<span class=\"title function_\">call</span>(force.<span class=\"property\">drag</span>) <span class=\"comment\">// 使节点能拖动</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> svg_texts = svg.<span class=\"title function_\">selectAll</span>(<span class=\"string\">&#x27;text&#x27;</span>)</span><br><span class=\"line\">                .<span class=\"title function_\">data</span>(nodes)</span><br><span class=\"line\">                .<span class=\"title function_\">enter</span>()</span><br><span class=\"line\">                .<span class=\"title function_\">append</span>(<span class=\"string\">&#x27;text&#x27;</span>)</span><br><span class=\"line\">                .<span class=\"title function_\">style</span>(<span class=\"string\">&#x27;fill&#x27;</span>, <span class=\"string\">&#x27;black&#x27;</span>)</span><br><span class=\"line\">                .<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;dx&#x27;</span>,<span class=\"number\">20</span>)</span><br><span class=\"line\">                .<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;dy&#x27;</span>, <span class=\"number\">8</span>)</span><br><span class=\"line\">                .<span class=\"title function_\">text</span>(<span class=\"keyword\">function</span>(<span class=\"params\">d</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> d.<span class=\"property\">name</span></span><br><span class=\"line\">                &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>Copy</p>\n<p>打开浏览器输入地址进行访问，图形堆叠在一起，为啥？？？</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/yi1eHrtbpjUSP6V.png\" alt=\"null\"><br>原来力导向图是不断运动的，每一时刻都在发生更新，因此，必须不断更新节点和连线的位置。力导向图布局 force 有一个事件 tick，每进行到一个时刻，都要调用它，更新的内容就写在它的监听器里就好。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">force.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;tick&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    svg_edges.<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;x1&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">d</span>) &#123;<span class=\"keyword\">return</span> d.<span class=\"property\">source</span>.<span class=\"property\">x</span>&#125;)</span><br><span class=\"line\">            .<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;y1&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">d</span>) &#123;<span class=\"keyword\">return</span> d.<span class=\"property\">source</span>.<span class=\"property\">y</span>&#125;)</span><br><span class=\"line\">            .<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;x2&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">d</span>) &#123;<span class=\"keyword\">return</span> d.<span class=\"property\">target</span>.<span class=\"property\">x</span>&#125;)</span><br><span class=\"line\">            .<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;y2&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">d</span>) &#123;<span class=\"keyword\">return</span> d.<span class=\"property\">target</span>.<span class=\"property\">y</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    svg_nodes.<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;cx&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">d</span>) &#123;<span class=\"keyword\">return</span> d.<span class=\"property\">x</span>&#125;)</span><br><span class=\"line\">            .<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;cy&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">d</span>) &#123;<span class=\"keyword\">return</span> d.<span class=\"property\">y</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    svg_texts.<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;x&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">d</span>) &#123;<span class=\"keyword\">return</span> d.<span class=\"property\">x</span>&#125;)</span><br><span class=\"line\">            .<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;y&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">d</span>) &#123;<span class=\"keyword\">return</span> d.<span class=\"property\">y</span>&#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>Copy</p>\n<p>再到浏览器里刷新页面，OK，关系图出来了。</p>\n<p><img src=\"http://yzjl2.xyz:8093/media/202304/10_1681882257.png\" alt=\"null\"><br>里面每一个节点都是可以拖动，同时也能引发其他节点的变化。</p>\n<h2 id=\"ECharts和D3对比\"><a href=\"#ECharts和D3对比\" class=\"headerlink\" title=\"ECharts和D3对比\"></a>ECharts和D3对比</h2><p>在进行对比前，我们先来看下上面D3那节提到的HTML5的两种图形渲染技术：SVG和Canvas。所有的三方库底层技术都是基于这两中技术实现的。</p>\n<table>\n<thead>\n<tr>\n<th><strong>SVG</strong></th>\n<th><strong>Canvas</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>矢量图不依赖分辨率</td>\n<td>依赖分辨率</td>\n</tr>\n<tr>\n<td>支持DOM事件处理器</td>\n<td>不支持事件处理器</td>\n</tr>\n<tr>\n<td>适合带有大型渲染区域的应用（如地图）</td>\n<td>最适合图像密集型的应用比如游戏</td>\n</tr>\n<tr>\n<td>复杂度高会减慢渲染速度（任何频繁操作dom的应用都快不了）</td>\n<td>一旦图形绘制完成，就不会再得到浏览器的关注 如果位置或者大小变化整个区域都要重新绘制</td>\n</tr>\n<tr>\n<td>可以使用CSS渲染文本</td>\n<td>文本渲染能力较弱</td>\n</tr>\n</tbody></table>\n<p>对比很明显，各有优势：<br>SVG适用于数据量不大，应用存在大量交互的场景<br>Canvas比较适用于事件交互少或者数据量大刷新快的场景</p>\n<p>OK，基于上面的分析我们来对比ECharts和D3。</p>\n<table>\n<thead>\n<tr>\n<th><strong>ECharts</strong></th>\n<th><strong>D3</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Canvas为主4.0+也支持SVG</td>\n<td>SVG为主4.0+也支持Canvas</td>\n</tr>\n<tr>\n<td>提供很多图表通过简单配置可以满足大部分需求</td>\n<td>不直接提供图表，需要手动实现绘制代码</td>\n</tr>\n<tr>\n<td>自由度差，不可定制</td>\n<td>自由度很大，基本可以自己绘制任何图表</td>\n</tr>\n<tr>\n<td>提供完善中文文档，示例功能完善</td>\n<td>提供完善英文文档，大部分示例需要完善才能使用，主要是参考</td>\n</tr>\n<tr>\n<td>开发效率高，通过快速配置即可完成</td>\n<td>大部分图表需要自己开发，学习成本大，太底层了，对可视化理论、数学逻辑都一定要求</td>\n</tr>\n<tr>\n<td>大数据量性能较好</td>\n<td>需要手动优化， 比如借助react、vue的虚拟dom</td>\n</tr>\n<tr>\n<td>不支持事件处理器，官方也提供了事件处理机制监听用户操作行为，功能有限</td>\n<td>支持事件处理器可直接操作dom</td>\n</tr>\n</tbody></table>\n<p>使用ECarts有较大的优势，开发效率高，动画、事件等实现也比较完善，正常情况下基本没有bug。而数据量不是特别大或者事件交互比较精细的场景可以采用D3 SVG来实现。</p>\n<p>任何一款工具型产品，都会在”自由度”和”简便性”两者间进行权衡与取舍，EChart使用简单而自由度差，D3自由度高而使用门槛高，具体使用哪个看具体场景业务来定。</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>针对我们所调研的关系网类知识图谱两种技术都能实现。如果只是展示图表给用户看，而不需要太多修改我们可以使用echarts；如果场景中存在跟图表较多的交互操作可以尝试使用D3。</p>\n<p>最后我们再研究下Cytoscape.js库。</p>\n<h2 id=\"Cytosapce-js\"><a href=\"#Cytosapce-js\" class=\"headerlink\" title=\"Cytosapce.js\"></a>Cytosapce.js</h2><p>Cytoscape.js是一个用于分析和可视化的<a href=\"https://en.wikipedia.org/wiki/Graph_theory\">图论</a>库。这涵盖了从网络生物学到社交网络分析的各种用途。 主要是描述点和线之间的关系 。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/yzJ5kF3mKOpgQ9d.png\" alt=\"null\"></p>\n<h3 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h3><p><strong>1.引入cytoscapejs</strong></p>\n<ul>\n<li>直接从github上下载最新的release包本地引入</li>\n<li>CND引入</li>\n<li>npm 安装</li>\n</ul>\n<p><a href=\"https://js.cytoscape.org/#getting-started/including-cytoscape.js\">更多引入方式</a><br><strong>2.绘制图形</strong><br>首先新建一个容器</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"selector-id\">#cy</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">position</span>: absolute;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">left</span>:<span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;cy&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Copy</p>\n<blockquote>\n<p>请注意，.js在初始化时使用HTML DOM元素容器的尺寸进行布局和渲染。因此，在任何Cytoscape.js相关代码之前将CSS样式表放在中是非常重要的。否则，可能偶尔会错误地报告尺寸，从而导致不希望的行为。 这是官方提示，DOM的样式定义需要在head标签内避免发生问题</p>\n</blockquote>\n<p>参考示例进行图表初始化</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cy = <span class=\"title function_\">cytoscape</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">container</span>: <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;cy&#x27;</span>), <span class=\"comment\">// 容器dom</span></span><br><span class=\"line\">  <span class=\"attr\">boxSelectionEnabled</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">autounselectify</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">elements</span>: [</span><br><span class=\"line\">    &#123; <span class=\"comment\">// 节点a</span></span><br><span class=\"line\">      <span class=\"attr\">data</span>: &#123;<span class=\"attr\">id</span>: <span class=\"string\">&#x27;a&#x27;</span>&#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123; <span class=\"comment\">// 节点b</span></span><br><span class=\"line\">      <span class=\"attr\">data</span>: &#123;<span class=\"attr\">id</span>: <span class=\"string\">&#x27;b&#x27;</span>&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123; <span class=\"comment\">// 节点c</span></span><br><span class=\"line\">      <span class=\"attr\">data</span>: &#123;<span class=\"attr\">id</span>: <span class=\"string\">&#x27;c&#x27;</span>&#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">data</span>: &#123;<span class=\"attr\">id</span>: <span class=\"string\">&#x27;d&#x27;</span>&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">data</span>: &#123;<span class=\"attr\">id</span>: <span class=\"string\">&#x27;e&#x27;</span>&#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123; <span class=\"comment\">// 连线ae，源节点a,目标节点e</span></span><br><span class=\"line\">      <span class=\"attr\">data</span>: &#123;<span class=\"attr\">id</span>: <span class=\"string\">&#x27;ae&#x27;</span>, <span class=\"attr\">weight</span>: <span class=\"number\">1</span>, <span class=\"attr\">target</span>: <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"attr\">source</span>: <span class=\"string\">&#x27;a&#x27;</span>&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">data</span>: &#123;<span class=\"attr\">id</span>: <span class=\"string\">&#x27;ab&#x27;</span>, <span class=\"attr\">weight</span>: <span class=\"number\">3</span>, <span class=\"attr\">target</span>: <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"attr\">source</span>: <span class=\"string\">&#x27;a&#x27;</span>&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">data</span>: &#123;<span class=\"attr\">id</span>: <span class=\"string\">&#x27;be&#x27;</span>, <span class=\"attr\">weight</span>: <span class=\"number\">4</span>, <span class=\"attr\">target</span>: <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"attr\">source</span>: <span class=\"string\">&#x27;b&#x27;</span>&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">data</span>: &#123;<span class=\"attr\">id</span>: <span class=\"string\">&#x27;bc&#x27;</span>, <span class=\"attr\">weight</span>: <span class=\"number\">5</span>, <span class=\"attr\">target</span>: <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"attr\">source</span>: <span class=\"string\">&#x27;b&#x27;</span>&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">data</span>: &#123;<span class=\"attr\">id</span>: <span class=\"string\">&#x27;ce&#x27;</span>, <span class=\"attr\">weight</span>: <span class=\"number\">6</span>, <span class=\"attr\">target</span>: <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"attr\">source</span>: <span class=\"string\">&#x27;c&#x27;</span>&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">data</span>: &#123;<span class=\"attr\">id</span>: <span class=\"string\">&#x27;cd&#x27;</span>, <span class=\"attr\">weight</span>: <span class=\"number\">2</span>, <span class=\"attr\">target</span>: <span class=\"string\">&#x27;d&#x27;</span>, <span class=\"attr\">source</span>: <span class=\"string\">&#x27;c&#x27;</span>&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">data</span>: &#123;<span class=\"attr\">id</span>: <span class=\"string\">&#x27;de&#x27;</span>, <span class=\"attr\">weight</span>: <span class=\"number\">7</span>, <span class=\"attr\">target</span>: <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"attr\">source</span>: <span class=\"string\">&#x27;d&#x27;</span>&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">style</span>: [</span><br><span class=\"line\">    &#123; <span class=\"comment\">// 节点样式</span></span><br><span class=\"line\">      <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;node&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">style</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;content&#x27;</span>: <span class=\"string\">&#x27;data(id)&#x27;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123; <span class=\"comment\">// 连线样式</span></span><br><span class=\"line\">      <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;edge&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">style</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;curve-style&#x27;</span>: <span class=\"string\">&#x27;bezier&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;width&#x27;</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;line-color&#x27;</span>: <span class=\"string\">&#x27;#ddd&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;target-arrow-color&#x27;</span>: <span class=\"string\">&#x27;#ddd&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;target-arrow-shape&#x27;</span>: <span class=\"string\">&#x27;triangle&#x27;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">layout</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;breadthfirst&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">directed</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">root</span>: <span class=\"string\">&#x27;#a&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">padding</span>: <span class=\"number\">10</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>Copy</p>\n<p>OK，图表生成成功。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/uevfTtaRmK2G9NQ.png\" alt=\"null\"><br>下面贴出初始化参数列表</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cy = <span class=\"title function_\">cytoscape</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 基本参数</span></span><br><span class=\"line\">  <span class=\"attr\">container</span>: <span class=\"literal\">undefined</span>, <span class=\"comment\">// 容器</span></span><br><span class=\"line\">  <span class=\"attr\">elements</span>: [ <span class=\"comment\">/* ... */</span> ], <span class=\"comment\">// 指定为普通对象的元素数组</span></span><br><span class=\"line\">  <span class=\"attr\">style</span>: [ <span class=\"comment\">/* ... */</span> ], <span class=\"comment\">// 用于设置图形样式的样式表</span></span><br><span class=\"line\">  <span class=\"attr\">layout</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;grid&#x27;</span> <span class=\"comment\">/* , ... */</span> &#125;, <span class=\"comment\">// 指定布局选项的普通对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 初始化视图:</span></span><br><span class=\"line\">  <span class=\"attr\">zoom</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">pan</span>: &#123; <span class=\"attr\">x</span>: <span class=\"number\">0</span>, <span class=\"attr\">y</span>: <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 交互参数:</span></span><br><span class=\"line\">  <span class=\"attr\">minZoom</span>: <span class=\"number\">1e-50</span>,</span><br><span class=\"line\">  <span class=\"attr\">maxZoom</span>: <span class=\"number\">1e50</span>,</span><br><span class=\"line\">  <span class=\"attr\">zoomingEnabled</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">userZoomingEnabled</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">panningEnabled</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">userPanningEnabled</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">boxSelectionEnabled</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">selectionType</span>: <span class=\"string\">&#x27;single&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">touchTapThreshold</span>: <span class=\"number\">8</span>,</span><br><span class=\"line\">  <span class=\"attr\">desktopTapThreshold</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">  <span class=\"attr\">autolock</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">autoungrabify</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">autounselectify</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 渲染参数:</span></span><br><span class=\"line\">  <span class=\"attr\">headless</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">styleEnabled</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">hideEdgesOnViewport</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">hideLabelsOnViewport</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">textureOnViewport</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">motionBlur</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">motionBlurOpacity</span>: <span class=\"number\">0.2</span>,</span><br><span class=\"line\">  <span class=\"attr\">wheelSensitivity</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">pixelRatio</span>: <span class=\"string\">&#x27;auto&#x27;</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Copy</p>\n<p>更多API信息请查看文档 <a href=\"http://js.cytoscape.org/#core/graph-manipulation\">http://js.cytoscape.org/#core/graph-manipulation</a></p>\n<h2 id=\"后续\"><a href=\"#后续\" class=\"headerlink\" title=\"后续\"></a>后续</h2><p>在调研天眼查、企查查两个网站的关系图谱源码时我们发现，天眼查不仅使用了D3.js，同时还用到了一个cola的库；企查查则是使用了d3.js + cytoscape.js来实现。</p>\n<p><strong>天眼查部分逻辑：</strong></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/aygfHzdFKbrAhsq.png\" alt=\"null\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这是d3的force布局</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> force = d3.<span class=\"property\">layout</span>.<span class=\"title function_\">force</span>() </span><br><span class=\"line\">.<span class=\"title function_\">nodes</span>(nodes)</span><br><span class=\"line\">.<span class=\"title function_\">links</span>(edges)</span><br><span class=\"line\">.<span class=\"title function_\">size</span>([width, height]) </span><br><span class=\"line\">.<span class=\"title function_\">linkDistance</span>(<span class=\"number\">150</span>)</span><br><span class=\"line\">.<span class=\"title function_\">charge</span>([-<span class=\"number\">400</span>])</span><br><span class=\"line\">force.<span class=\"title function_\">start</span>()</span><br></pre></td></tr></table></figure>\n\n<p>Copy</p>\n<p>通过cola.js确实可以查到对应的结果。<a href=\"https://ialab.it.monash.edu/webcola/index.html\">cola.js</a></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/npKMf68C9YUSFZt.png\" alt=\"null\"><br>由此可知cola是个约束器可以很好的跟D3、Cytoscape.js等库集成，而天眼查用到的是它作为d3适配器的一个功能，作为对d3 force布局的一个扩展补充。<br>在Cytoscape中使用方法是通过扩展来实现</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cy.<span class=\"title function_\">layout</span>(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;cola&#x27;</span> <span class=\"comment\">/* and maybe some other options */</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Copy</p>\n<p><strong>企查查部分逻辑</strong></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/6WNHKbMBFOicDwg.png\" alt=\"null\"><br>图表父节点存在cytoscape的class，可以很明确的知道图表是用cytoscpase.js实现的，哪为什么还要用d3呢？？？</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/LiRFBrph8fkct3X.png\" alt=\"null\"><br>继续向上查看代码，确实找到了d3的使用逻辑。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/PSGl2ATnV7tdD15.png\" alt=\"null\"></p>\n<p><img src=\"http://yzjl2.xyz:8093/media/202304/18_1681882688.png\" alt=\"null\"><br>结合cytoscape代码里的layout可以猜出它的基本逻辑应该是先通过d3计算出所有节点最终的位置信息，再通过cytoscape的preset布局绘制关系图。下图是cytoscape的官网说明。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/fMZN6qBd3kDAnuF.png\" alt=\"null\"><br>调试后的数据确实比原数据多了d3的位置信息，后面数据转化也确实用到了这些信息<br><img src=\"https://s2.loli.net/2024/01/08/QPH2Brcq9vXOCnJ.png\" alt=\"null\"></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/ojbJcT4VROfZCS2.png\" alt=\"null\"><br>不管是天眼查还是企查查都没有单独使用d3，而是d3+cola.js或者d3+cytoscape.js来实现这类关系图表。我推测可能跟d3的force布局特性有关（没找到相应资料，瞎猜的)。<br>force布局正式名称是力导图，正常情况下所有节点都是运动中的，拖拽某个节点不单单是被拖动的节点会移动，其他受其力作用的节点也会一起移动，所以如果需要天眼查这种静态的效果，就要想办法再绘画完后固定所有节点，比如企查查用的cytoscape的preset布局和天眼查使用cola来stop动画，以及给每个节点设置fixed。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/BqS4vAIWLYJZb3k.png\" alt=\"null\"></p>\n<blockquote>\n<p><strong>力导向图形绘制算法</strong>是以美观的方式绘制图形的一类算法。它们的目的是将一个图的节点定位在二维或二维三维空间中，这样所有的边或多或少都是等长的，交叉的边越少越好。方法是根据边和节点的相对位置在边和节点的集合中分配力，然后利用这些力模拟边和节点的运动</p>\n</blockquote>\n"},{"title":"快速构建一个完整的图片标注功能","date":"2023-09-06T06:03:01.000Z","_content":"\n\n## 需求分析\n\n页面中显示需要标注的图片，鼠标绘制矩形进行标注(考虑到实际情况，可能还有多边形、圆形等等多种形状)。最后可以拿到标注的内容位置信息、标注信息等并且回显所有标注内容。在图片上进行绘制，首先想到的是用canvas，canvas强大的功能能让我们在图片上为所欲为。但是原生的canvas API众多且繁杂，上手不易，所以最好使用成熟的canvas框架来实现。\n\n## 使用ailabel\n\n![null](https://s2.loli.net/2024/01/08/xnuH7rYwkTWBm1X.png)\n\n[ailabel](https://www.npmjs.com/package/ailabel?activeTab=readme)只看说明这个框架好像完全满足我们的需求，但是可惜源码地址已经不存在了，文档也无法访问。不过好在网上有人fork源码库，我们可以直接下载后查看文档和demo。\n\n好，先安装依赖`nmp install`，然后打开`demo/index.html`文件，就可以看到demo了。\n\n但是但是但是啊，项目报错了，不管是绘制什么图形，鼠标松开后都不显示图形。F12查看发现一堆报错信息，除了第一条信息外全都是没有EventEmitter导致的。看来是没有事件触发与事件监听器功能导致绘制事件无法执行。\n\n![null](https://s2.loli.net/2024/01/08/8cTdNhFZAQgRMJp.png)\n\n通过package.json可以知道ailabel使用了events库来作为事件机制，应该是这个库没起作用。幸运的是ailabel是支持手动编译的，也就是说我们可以修改它的源码。替换一个跟events库相同功能的库[tiny-mitter](https://www.npmjs.com/package/tiny-emitter)(我们项目中正在使用的事件发射器库)。\n\n![null](https://s2.loli.net/2024/01/08/rS5AXoaDEdgNtOM.png)\n\n运行`npm run build`重新打包，更新demo的引用文件，再次运行demo。图片已显示，标注也能正常显示，控制台也没有报错信息，一切OK。\n\n![null](https://s2.loli.net/2024/01/08/GrdWYi3wuqcpZbX.png)\n\n通过一系列验证测试基本可以认定该框架满足需求，可以使用。\n\nailabel确实可以满足大部分图片标注功能，但是它可定制行、可扩展性很小，而且源码库不在说明作者已经不维护，这就需求我们手动维护。\n\n下面介绍一种完全定制化标注的基础实现。\n\n## 使用fabric\n\n[fabricjs](http://fabricjs.com/)是一个基于canvas的强大的框架，提供一种类似面向对象的方法来编写canvas,在原生canvas之上提供了交互式对象模型，通过简洁的API就可以在画布上进行丰富的操作\n\n关于fabricjs的介绍和使用请参考[ fabricjs从精通到](https://juejin.cn/post/7026941253845516324)，我们重点介绍标注画框的交互。\n\n### 绘制标注\n\nfabric提供了一系列的事件帮助我们来很好的对画布进行各种操作，标注画框主要用到的是下图中的`mouse:down`:画笔落下;`mouse:move`:画框;`mouse:up`画笔抬起事件\n\n![null](https://s2.loli.net/2024/01/08/zu9iYLjKpnFwQ5h.png)\n\n下面以绘制矩形为例进行说明\n\n```bash\n    var fabCanvas = new fabric.Canvas(id,{xxxx})\n    var line, isDown, origX, origY, pointer\n\n    fabCanvas.on('mouse:down', function (o) {\n      isDown = true\n      fabCanvas.selection = false\n      pointer = fabCanvas.getPointer(o.e)\n      origX = pointer.x\n      origY = pointer.y\n      pointer = fabCanvas.getPointer(o.e)\n      line = new fabric.Rect({\n        left: origX,\n        top: origY,\n        originX: 'left',\n        originY: 'top',\n        width: pointer.x - origX,\n        height: pointer.y - origY,\n        angle: 0,\n        fill: '#07ff11a3',\n        stroke: 'black',\n        transparentCorners: false\n      })\n      fabCanvas.add(line)\n    })\n\n    fabCanvas.on('mouse:move', function (o) {\n      if (!isDown) return\n      var pointer = fabCanvas.getPointer(o.e)\n\n      if (origX > pointer.x) {\n        line.set({ left: Math.abs(pointer.x) })\n      }\n      if (origY > pointer.y) {\n        line.set({ top: Math.abs(pointer.y) })\n      }\n\n      line.set({ width: Math.abs(origX - pointer.x) })\n      line.set({ height: Math.abs(origY - pointer.y) })\n\n      fabCanvas.renderAll()\n    })\n\n    fabCanvas.on('mouse:up', function (o) {\n      isDown = false\n      removeEvents()\n    })\n```\n\n![null](https://s2.loli.net/2024/01/08/MLJksG7IeQHgCDK.png)\n\n其他形状如圆形、线段、多边形等实现逻辑都是大同小异，fabric都是支持对应形状的绘制的。\n\n### 调整标注\n\n如果初始化设置画布不可选，要先把画布设为可选才能选中标注\n\n```bash\nfabCanvas.set({\n    selectable: true\n})\n```\n\nCopy\n\n如果要修改标注的默认选中样式，可以修改标注的对应参数\n\n```bash\nfabCanvas.on('selection:created': (e)=>{\n    console.log('selection created')\n    e.target.set({\n        transparentCorners: false,\n        cornerColor: '#ff7a55',\n        cornerStrokeColor: '#ff7a55',\n        borderColor: 'red',\n        cornerSize: 12,\n        padding: 10,\n        cornerStyle: 'circle',\n        borderDashArray: [3, 3]\n    });\n})\n```\n\n调整画框主要用到上述的`object:moving`:对象移动；`object:modified`:对象调整；\n\n```bash\nfabCanvas.on('object:modified':(e)=> {\n   //修改对象\n   console.log( 'object:modified')\n   console.log(e.target);\n  // 修改逻辑\n})\n```\n\n### 选中标注\n\n在新建形状中监听`select`事件，可以抛出对应事件\n\n```bash\nrect.on('selected',(e)=>{\n    this.$emit('objectSelected', e.target)\n})\n```\n\n### 删除标注\n\n直接调用fabric的remove事件\n\n```bash\nfabCanvas.remove(rect)\n```\n\n### 清空所有画框\n\n```bash\nclearAllMark(){\n    const objects = fabCanvas.getObjects()\n    for(let i in objects){\n        fabCanvas.remove(i)\n    }\n    this.$emit('clearAllMark')\n}\n```\n\n### 放大缩小\n\n```bash\nfabCanvas.setZoom(10)\n```\n\n以上交互已经包含了绝大部分的图片交互，只是有点碎。\n\n## 总结\n\n`ailabel`提供了一套完整的打点，绘制矩形、多边形等各种形状的标注框架。简单易用功能完善，但是可扩展性差而且需要自行维护（作者已经删库）\n\n`fabricjs` 是基于canvas类似面向对象的框架。可以绘制什么图形，可扩展和定制型强，但是需要手动监听鼠标事件自己实现绘制标注逻辑，时间成本高\n","source":"_posts/快速构建一个完整的图片标注功能.md","raw":"---\ntitle: 快速构建一个完整的图片标注功能\ndate: 2023-09-06 14:03:01\ntags:\n    - canvas\n    - 标注\n---\n\n\n## 需求分析\n\n页面中显示需要标注的图片，鼠标绘制矩形进行标注(考虑到实际情况，可能还有多边形、圆形等等多种形状)。最后可以拿到标注的内容位置信息、标注信息等并且回显所有标注内容。在图片上进行绘制，首先想到的是用canvas，canvas强大的功能能让我们在图片上为所欲为。但是原生的canvas API众多且繁杂，上手不易，所以最好使用成熟的canvas框架来实现。\n\n## 使用ailabel\n\n![null](https://s2.loli.net/2024/01/08/xnuH7rYwkTWBm1X.png)\n\n[ailabel](https://www.npmjs.com/package/ailabel?activeTab=readme)只看说明这个框架好像完全满足我们的需求，但是可惜源码地址已经不存在了，文档也无法访问。不过好在网上有人fork源码库，我们可以直接下载后查看文档和demo。\n\n好，先安装依赖`nmp install`，然后打开`demo/index.html`文件，就可以看到demo了。\n\n但是但是但是啊，项目报错了，不管是绘制什么图形，鼠标松开后都不显示图形。F12查看发现一堆报错信息，除了第一条信息外全都是没有EventEmitter导致的。看来是没有事件触发与事件监听器功能导致绘制事件无法执行。\n\n![null](https://s2.loli.net/2024/01/08/8cTdNhFZAQgRMJp.png)\n\n通过package.json可以知道ailabel使用了events库来作为事件机制，应该是这个库没起作用。幸运的是ailabel是支持手动编译的，也就是说我们可以修改它的源码。替换一个跟events库相同功能的库[tiny-mitter](https://www.npmjs.com/package/tiny-emitter)(我们项目中正在使用的事件发射器库)。\n\n![null](https://s2.loli.net/2024/01/08/rS5AXoaDEdgNtOM.png)\n\n运行`npm run build`重新打包，更新demo的引用文件，再次运行demo。图片已显示，标注也能正常显示，控制台也没有报错信息，一切OK。\n\n![null](https://s2.loli.net/2024/01/08/GrdWYi3wuqcpZbX.png)\n\n通过一系列验证测试基本可以认定该框架满足需求，可以使用。\n\nailabel确实可以满足大部分图片标注功能，但是它可定制行、可扩展性很小，而且源码库不在说明作者已经不维护，这就需求我们手动维护。\n\n下面介绍一种完全定制化标注的基础实现。\n\n## 使用fabric\n\n[fabricjs](http://fabricjs.com/)是一个基于canvas的强大的框架，提供一种类似面向对象的方法来编写canvas,在原生canvas之上提供了交互式对象模型，通过简洁的API就可以在画布上进行丰富的操作\n\n关于fabricjs的介绍和使用请参考[ fabricjs从精通到](https://juejin.cn/post/7026941253845516324)，我们重点介绍标注画框的交互。\n\n### 绘制标注\n\nfabric提供了一系列的事件帮助我们来很好的对画布进行各种操作，标注画框主要用到的是下图中的`mouse:down`:画笔落下;`mouse:move`:画框;`mouse:up`画笔抬起事件\n\n![null](https://s2.loli.net/2024/01/08/zu9iYLjKpnFwQ5h.png)\n\n下面以绘制矩形为例进行说明\n\n```bash\n    var fabCanvas = new fabric.Canvas(id,{xxxx})\n    var line, isDown, origX, origY, pointer\n\n    fabCanvas.on('mouse:down', function (o) {\n      isDown = true\n      fabCanvas.selection = false\n      pointer = fabCanvas.getPointer(o.e)\n      origX = pointer.x\n      origY = pointer.y\n      pointer = fabCanvas.getPointer(o.e)\n      line = new fabric.Rect({\n        left: origX,\n        top: origY,\n        originX: 'left',\n        originY: 'top',\n        width: pointer.x - origX,\n        height: pointer.y - origY,\n        angle: 0,\n        fill: '#07ff11a3',\n        stroke: 'black',\n        transparentCorners: false\n      })\n      fabCanvas.add(line)\n    })\n\n    fabCanvas.on('mouse:move', function (o) {\n      if (!isDown) return\n      var pointer = fabCanvas.getPointer(o.e)\n\n      if (origX > pointer.x) {\n        line.set({ left: Math.abs(pointer.x) })\n      }\n      if (origY > pointer.y) {\n        line.set({ top: Math.abs(pointer.y) })\n      }\n\n      line.set({ width: Math.abs(origX - pointer.x) })\n      line.set({ height: Math.abs(origY - pointer.y) })\n\n      fabCanvas.renderAll()\n    })\n\n    fabCanvas.on('mouse:up', function (o) {\n      isDown = false\n      removeEvents()\n    })\n```\n\n![null](https://s2.loli.net/2024/01/08/MLJksG7IeQHgCDK.png)\n\n其他形状如圆形、线段、多边形等实现逻辑都是大同小异，fabric都是支持对应形状的绘制的。\n\n### 调整标注\n\n如果初始化设置画布不可选，要先把画布设为可选才能选中标注\n\n```bash\nfabCanvas.set({\n    selectable: true\n})\n```\n\nCopy\n\n如果要修改标注的默认选中样式，可以修改标注的对应参数\n\n```bash\nfabCanvas.on('selection:created': (e)=>{\n    console.log('selection created')\n    e.target.set({\n        transparentCorners: false,\n        cornerColor: '#ff7a55',\n        cornerStrokeColor: '#ff7a55',\n        borderColor: 'red',\n        cornerSize: 12,\n        padding: 10,\n        cornerStyle: 'circle',\n        borderDashArray: [3, 3]\n    });\n})\n```\n\n调整画框主要用到上述的`object:moving`:对象移动；`object:modified`:对象调整；\n\n```bash\nfabCanvas.on('object:modified':(e)=> {\n   //修改对象\n   console.log( 'object:modified')\n   console.log(e.target);\n  // 修改逻辑\n})\n```\n\n### 选中标注\n\n在新建形状中监听`select`事件，可以抛出对应事件\n\n```bash\nrect.on('selected',(e)=>{\n    this.$emit('objectSelected', e.target)\n})\n```\n\n### 删除标注\n\n直接调用fabric的remove事件\n\n```bash\nfabCanvas.remove(rect)\n```\n\n### 清空所有画框\n\n```bash\nclearAllMark(){\n    const objects = fabCanvas.getObjects()\n    for(let i in objects){\n        fabCanvas.remove(i)\n    }\n    this.$emit('clearAllMark')\n}\n```\n\n### 放大缩小\n\n```bash\nfabCanvas.setZoom(10)\n```\n\n以上交互已经包含了绝大部分的图片交互，只是有点碎。\n\n## 总结\n\n`ailabel`提供了一套完整的打点，绘制矩形、多边形等各种形状的标注框架。简单易用功能完善，但是可扩展性差而且需要自行维护（作者已经删库）\n\n`fabricjs` 是基于canvas类似面向对象的框架。可以绘制什么图形，可扩展和定制型强，但是需要手动监听鼠标事件自己实现绘制标注逻辑，时间成本高\n","slug":"快速构建一个完整的图片标注功能","published":1,"updated":"2024-01-15T07:41:30.524Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrq64z6w0013soipcvd7hdi5","content":"<h2 id=\"需求分析\"><a href=\"#需求分析\" class=\"headerlink\" title=\"需求分析\"></a>需求分析</h2><p>页面中显示需要标注的图片，鼠标绘制矩形进行标注(考虑到实际情况，可能还有多边形、圆形等等多种形状)。最后可以拿到标注的内容位置信息、标注信息等并且回显所有标注内容。在图片上进行绘制，首先想到的是用canvas，canvas强大的功能能让我们在图片上为所欲为。但是原生的canvas API众多且繁杂，上手不易，所以最好使用成熟的canvas框架来实现。</p>\n<h2 id=\"使用ailabel\"><a href=\"#使用ailabel\" class=\"headerlink\" title=\"使用ailabel\"></a>使用ailabel</h2><p><img src=\"https://s2.loli.net/2024/01/08/xnuH7rYwkTWBm1X.png\" alt=\"null\"></p>\n<p><a href=\"https://www.npmjs.com/package/ailabel?activeTab=readme\">ailabel</a>只看说明这个框架好像完全满足我们的需求，但是可惜源码地址已经不存在了，文档也无法访问。不过好在网上有人fork源码库，我们可以直接下载后查看文档和demo。</p>\n<p>好，先安装依赖<code>nmp install</code>，然后打开<code>demo/index.html</code>文件，就可以看到demo了。</p>\n<p>但是但是但是啊，项目报错了，不管是绘制什么图形，鼠标松开后都不显示图形。F12查看发现一堆报错信息，除了第一条信息外全都是没有EventEmitter导致的。看来是没有事件触发与事件监听器功能导致绘制事件无法执行。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/8cTdNhFZAQgRMJp.png\" alt=\"null\"></p>\n<p>通过package.json可以知道ailabel使用了events库来作为事件机制，应该是这个库没起作用。幸运的是ailabel是支持手动编译的，也就是说我们可以修改它的源码。替换一个跟events库相同功能的库<a href=\"https://www.npmjs.com/package/tiny-emitter\">tiny-mitter</a>(我们项目中正在使用的事件发射器库)。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/rS5AXoaDEdgNtOM.png\" alt=\"null\"></p>\n<p>运行<code>npm run build</code>重新打包，更新demo的引用文件，再次运行demo。图片已显示，标注也能正常显示，控制台也没有报错信息，一切OK。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/GrdWYi3wuqcpZbX.png\" alt=\"null\"></p>\n<p>通过一系列验证测试基本可以认定该框架满足需求，可以使用。</p>\n<p>ailabel确实可以满足大部分图片标注功能，但是它可定制行、可扩展性很小，而且源码库不在说明作者已经不维护，这就需求我们手动维护。</p>\n<p>下面介绍一种完全定制化标注的基础实现。</p>\n<h2 id=\"使用fabric\"><a href=\"#使用fabric\" class=\"headerlink\" title=\"使用fabric\"></a>使用fabric</h2><p><a href=\"http://fabricjs.com/\">fabricjs</a>是一个基于canvas的强大的框架，提供一种类似面向对象的方法来编写canvas,在原生canvas之上提供了交互式对象模型，通过简洁的API就可以在画布上进行丰富的操作</p>\n<p>关于fabricjs的介绍和使用请参考<a href=\"https://juejin.cn/post/7026941253845516324\"> fabricjs从精通到</a>，我们重点介绍标注画框的交互。</p>\n<h3 id=\"绘制标注\"><a href=\"#绘制标注\" class=\"headerlink\" title=\"绘制标注\"></a>绘制标注</h3><p>fabric提供了一系列的事件帮助我们来很好的对画布进行各种操作，标注画框主要用到的是下图中的<code>mouse:down</code>:画笔落下;<code>mouse:move</code>:画框;<code>mouse:up</code>画笔抬起事件</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/zu9iYLjKpnFwQ5h.png\" alt=\"null\"></p>\n<p>下面以绘制矩形为例进行说明</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fabCanvas = new fabric.Canvas(<span class=\"built_in\">id</span>,&#123;xxxx&#125;)</span><br><span class=\"line\">var line, isDown, origX, origY, pointer</span><br><span class=\"line\"></span><br><span class=\"line\">fabCanvas.on(<span class=\"string\">&#x27;mouse:down&#x27;</span>, <span class=\"keyword\">function</span> (o) &#123;</span><br><span class=\"line\">  isDown = <span class=\"literal\">true</span></span><br><span class=\"line\">  fabCanvas.selection = <span class=\"literal\">false</span></span><br><span class=\"line\">  pointer = fabCanvas.getPointer(o.e)</span><br><span class=\"line\">  origX = pointer.x</span><br><span class=\"line\">  origY = pointer.y</span><br><span class=\"line\">  pointer = fabCanvas.getPointer(o.e)</span><br><span class=\"line\">  line = new fabric.Rect(&#123;</span><br><span class=\"line\">    left: origX,</span><br><span class=\"line\">    top: origY,</span><br><span class=\"line\">    originX: <span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">    originY: <span class=\"string\">&#x27;top&#x27;</span>,</span><br><span class=\"line\">    width: pointer.x - origX,</span><br><span class=\"line\">    height: pointer.y - origY,</span><br><span class=\"line\">    angle: 0,</span><br><span class=\"line\">    fill: <span class=\"string\">&#x27;#07ff11a3&#x27;</span>,</span><br><span class=\"line\">    stroke: <span class=\"string\">&#x27;black&#x27;</span>,</span><br><span class=\"line\">    transparentCorners: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  fabCanvas.add(line)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">fabCanvas.on(<span class=\"string\">&#x27;mouse:move&#x27;</span>, <span class=\"keyword\">function</span> (o) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!isDown) <span class=\"built_in\">return</span></span><br><span class=\"line\">  var pointer = fabCanvas.getPointer(o.e)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (origX &gt; pointer.x) &#123;</span><br><span class=\"line\">    line.set(&#123; left: Math.abs(pointer.x) &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (origY &gt; pointer.y) &#123;</span><br><span class=\"line\">    line.set(&#123; top: Math.abs(pointer.y) &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  line.set(&#123; width: Math.abs(origX - pointer.x) &#125;)</span><br><span class=\"line\">  line.set(&#123; height: Math.abs(origY - pointer.y) &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  fabCanvas.renderAll()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">fabCanvas.on(<span class=\"string\">&#x27;mouse:up&#x27;</span>, <span class=\"keyword\">function</span> (o) &#123;</span><br><span class=\"line\">  isDown = <span class=\"literal\">false</span></span><br><span class=\"line\">  removeEvents()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s2.loli.net/2024/01/08/MLJksG7IeQHgCDK.png\" alt=\"null\"></p>\n<p>其他形状如圆形、线段、多边形等实现逻辑都是大同小异，fabric都是支持对应形状的绘制的。</p>\n<h3 id=\"调整标注\"><a href=\"#调整标注\" class=\"headerlink\" title=\"调整标注\"></a>调整标注</h3><p>如果初始化设置画布不可选，要先把画布设为可选才能选中标注</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fabCanvas.<span class=\"built_in\">set</span>(&#123;</span><br><span class=\"line\">    selectable: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>Copy</p>\n<p>如果要修改标注的默认选中样式，可以修改标注的对应参数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fabCanvas.on(<span class=\"string\">&#x27;selection:created&#x27;</span>: (e)=&gt;&#123;</span><br><span class=\"line\">    console.log(<span class=\"string\">&#x27;selection created&#x27;</span>)</span><br><span class=\"line\">    e.target.set(&#123;</span><br><span class=\"line\">        transparentCorners: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        cornerColor: <span class=\"string\">&#x27;#ff7a55&#x27;</span>,</span><br><span class=\"line\">        cornerStrokeColor: <span class=\"string\">&#x27;#ff7a55&#x27;</span>,</span><br><span class=\"line\">        borderColor: <span class=\"string\">&#x27;red&#x27;</span>,</span><br><span class=\"line\">        cornerSize: 12,</span><br><span class=\"line\">        padding: 10,</span><br><span class=\"line\">        cornerStyle: <span class=\"string\">&#x27;circle&#x27;</span>,</span><br><span class=\"line\">        borderDashArray: [3, 3]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>调整画框主要用到上述的<code>object:moving</code>:对象移动；<code>object:modified</code>:对象调整；</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fabCanvas.on(<span class=\"string\">&#x27;object:modified&#x27;</span>:(e)=&gt; &#123;</span><br><span class=\"line\">   //修改对象</span><br><span class=\"line\">   console.log( <span class=\"string\">&#x27;object:modified&#x27;</span>)</span><br><span class=\"line\">   console.log(e.target);</span><br><span class=\"line\">  // 修改逻辑</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"选中标注\"><a href=\"#选中标注\" class=\"headerlink\" title=\"选中标注\"></a>选中标注</h3><p>在新建形状中监听<code>select</code>事件，可以抛出对应事件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rect.on(<span class=\"string\">&#x27;selected&#x27;</span>,(e)=&gt;&#123;</span><br><span class=\"line\">    this.<span class=\"variable\">$emit</span>(<span class=\"string\">&#x27;objectSelected&#x27;</span>, e.target)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除标注\"><a href=\"#删除标注\" class=\"headerlink\" title=\"删除标注\"></a>删除标注</h3><p>直接调用fabric的remove事件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fabCanvas.remove(rect)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"清空所有画框\"><a href=\"#清空所有画框\" class=\"headerlink\" title=\"清空所有画框\"></a>清空所有画框</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">clearAllMark</span></span>()&#123;</span><br><span class=\"line\">    const objects = fabCanvas.getObjects()</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"built_in\">let</span> i <span class=\"keyword\">in</span> objects)&#123;</span><br><span class=\"line\">        fabCanvas.remove(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    this.<span class=\"variable\">$emit</span>(<span class=\"string\">&#x27;clearAllMark&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"放大缩小\"><a href=\"#放大缩小\" class=\"headerlink\" title=\"放大缩小\"></a>放大缩小</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fabCanvas.setZoom(10)</span><br></pre></td></tr></table></figure>\n\n<p>以上交互已经包含了绝大部分的图片交互，只是有点碎。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><code>ailabel</code>提供了一套完整的打点，绘制矩形、多边形等各种形状的标注框架。简单易用功能完善，但是可扩展性差而且需要自行维护（作者已经删库）</p>\n<p><code>fabricjs</code> 是基于canvas类似面向对象的框架。可以绘制什么图形，可扩展和定制型强，但是需要手动监听鼠标事件自己实现绘制标注逻辑，时间成本高</p>\n","site":{"data":{}},"length":1211,"excerpt":"","more":"<h2 id=\"需求分析\"><a href=\"#需求分析\" class=\"headerlink\" title=\"需求分析\"></a>需求分析</h2><p>页面中显示需要标注的图片，鼠标绘制矩形进行标注(考虑到实际情况，可能还有多边形、圆形等等多种形状)。最后可以拿到标注的内容位置信息、标注信息等并且回显所有标注内容。在图片上进行绘制，首先想到的是用canvas，canvas强大的功能能让我们在图片上为所欲为。但是原生的canvas API众多且繁杂，上手不易，所以最好使用成熟的canvas框架来实现。</p>\n<h2 id=\"使用ailabel\"><a href=\"#使用ailabel\" class=\"headerlink\" title=\"使用ailabel\"></a>使用ailabel</h2><p><img src=\"https://s2.loli.net/2024/01/08/xnuH7rYwkTWBm1X.png\" alt=\"null\"></p>\n<p><a href=\"https://www.npmjs.com/package/ailabel?activeTab=readme\">ailabel</a>只看说明这个框架好像完全满足我们的需求，但是可惜源码地址已经不存在了，文档也无法访问。不过好在网上有人fork源码库，我们可以直接下载后查看文档和demo。</p>\n<p>好，先安装依赖<code>nmp install</code>，然后打开<code>demo/index.html</code>文件，就可以看到demo了。</p>\n<p>但是但是但是啊，项目报错了，不管是绘制什么图形，鼠标松开后都不显示图形。F12查看发现一堆报错信息，除了第一条信息外全都是没有EventEmitter导致的。看来是没有事件触发与事件监听器功能导致绘制事件无法执行。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/8cTdNhFZAQgRMJp.png\" alt=\"null\"></p>\n<p>通过package.json可以知道ailabel使用了events库来作为事件机制，应该是这个库没起作用。幸运的是ailabel是支持手动编译的，也就是说我们可以修改它的源码。替换一个跟events库相同功能的库<a href=\"https://www.npmjs.com/package/tiny-emitter\">tiny-mitter</a>(我们项目中正在使用的事件发射器库)。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/rS5AXoaDEdgNtOM.png\" alt=\"null\"></p>\n<p>运行<code>npm run build</code>重新打包，更新demo的引用文件，再次运行demo。图片已显示，标注也能正常显示，控制台也没有报错信息，一切OK。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/GrdWYi3wuqcpZbX.png\" alt=\"null\"></p>\n<p>通过一系列验证测试基本可以认定该框架满足需求，可以使用。</p>\n<p>ailabel确实可以满足大部分图片标注功能，但是它可定制行、可扩展性很小，而且源码库不在说明作者已经不维护，这就需求我们手动维护。</p>\n<p>下面介绍一种完全定制化标注的基础实现。</p>\n<h2 id=\"使用fabric\"><a href=\"#使用fabric\" class=\"headerlink\" title=\"使用fabric\"></a>使用fabric</h2><p><a href=\"http://fabricjs.com/\">fabricjs</a>是一个基于canvas的强大的框架，提供一种类似面向对象的方法来编写canvas,在原生canvas之上提供了交互式对象模型，通过简洁的API就可以在画布上进行丰富的操作</p>\n<p>关于fabricjs的介绍和使用请参考<a href=\"https://juejin.cn/post/7026941253845516324\"> fabricjs从精通到</a>，我们重点介绍标注画框的交互。</p>\n<h3 id=\"绘制标注\"><a href=\"#绘制标注\" class=\"headerlink\" title=\"绘制标注\"></a>绘制标注</h3><p>fabric提供了一系列的事件帮助我们来很好的对画布进行各种操作，标注画框主要用到的是下图中的<code>mouse:down</code>:画笔落下;<code>mouse:move</code>:画框;<code>mouse:up</code>画笔抬起事件</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/zu9iYLjKpnFwQ5h.png\" alt=\"null\"></p>\n<p>下面以绘制矩形为例进行说明</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fabCanvas = new fabric.Canvas(<span class=\"built_in\">id</span>,&#123;xxxx&#125;)</span><br><span class=\"line\">var line, isDown, origX, origY, pointer</span><br><span class=\"line\"></span><br><span class=\"line\">fabCanvas.on(<span class=\"string\">&#x27;mouse:down&#x27;</span>, <span class=\"keyword\">function</span> (o) &#123;</span><br><span class=\"line\">  isDown = <span class=\"literal\">true</span></span><br><span class=\"line\">  fabCanvas.selection = <span class=\"literal\">false</span></span><br><span class=\"line\">  pointer = fabCanvas.getPointer(o.e)</span><br><span class=\"line\">  origX = pointer.x</span><br><span class=\"line\">  origY = pointer.y</span><br><span class=\"line\">  pointer = fabCanvas.getPointer(o.e)</span><br><span class=\"line\">  line = new fabric.Rect(&#123;</span><br><span class=\"line\">    left: origX,</span><br><span class=\"line\">    top: origY,</span><br><span class=\"line\">    originX: <span class=\"string\">&#x27;left&#x27;</span>,</span><br><span class=\"line\">    originY: <span class=\"string\">&#x27;top&#x27;</span>,</span><br><span class=\"line\">    width: pointer.x - origX,</span><br><span class=\"line\">    height: pointer.y - origY,</span><br><span class=\"line\">    angle: 0,</span><br><span class=\"line\">    fill: <span class=\"string\">&#x27;#07ff11a3&#x27;</span>,</span><br><span class=\"line\">    stroke: <span class=\"string\">&#x27;black&#x27;</span>,</span><br><span class=\"line\">    transparentCorners: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  fabCanvas.add(line)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">fabCanvas.on(<span class=\"string\">&#x27;mouse:move&#x27;</span>, <span class=\"keyword\">function</span> (o) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!isDown) <span class=\"built_in\">return</span></span><br><span class=\"line\">  var pointer = fabCanvas.getPointer(o.e)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (origX &gt; pointer.x) &#123;</span><br><span class=\"line\">    line.set(&#123; left: Math.abs(pointer.x) &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (origY &gt; pointer.y) &#123;</span><br><span class=\"line\">    line.set(&#123; top: Math.abs(pointer.y) &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  line.set(&#123; width: Math.abs(origX - pointer.x) &#125;)</span><br><span class=\"line\">  line.set(&#123; height: Math.abs(origY - pointer.y) &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  fabCanvas.renderAll()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">fabCanvas.on(<span class=\"string\">&#x27;mouse:up&#x27;</span>, <span class=\"keyword\">function</span> (o) &#123;</span><br><span class=\"line\">  isDown = <span class=\"literal\">false</span></span><br><span class=\"line\">  removeEvents()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s2.loli.net/2024/01/08/MLJksG7IeQHgCDK.png\" alt=\"null\"></p>\n<p>其他形状如圆形、线段、多边形等实现逻辑都是大同小异，fabric都是支持对应形状的绘制的。</p>\n<h3 id=\"调整标注\"><a href=\"#调整标注\" class=\"headerlink\" title=\"调整标注\"></a>调整标注</h3><p>如果初始化设置画布不可选，要先把画布设为可选才能选中标注</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fabCanvas.<span class=\"built_in\">set</span>(&#123;</span><br><span class=\"line\">    selectable: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>Copy</p>\n<p>如果要修改标注的默认选中样式，可以修改标注的对应参数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fabCanvas.on(<span class=\"string\">&#x27;selection:created&#x27;</span>: (e)=&gt;&#123;</span><br><span class=\"line\">    console.log(<span class=\"string\">&#x27;selection created&#x27;</span>)</span><br><span class=\"line\">    e.target.set(&#123;</span><br><span class=\"line\">        transparentCorners: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        cornerColor: <span class=\"string\">&#x27;#ff7a55&#x27;</span>,</span><br><span class=\"line\">        cornerStrokeColor: <span class=\"string\">&#x27;#ff7a55&#x27;</span>,</span><br><span class=\"line\">        borderColor: <span class=\"string\">&#x27;red&#x27;</span>,</span><br><span class=\"line\">        cornerSize: 12,</span><br><span class=\"line\">        padding: 10,</span><br><span class=\"line\">        cornerStyle: <span class=\"string\">&#x27;circle&#x27;</span>,</span><br><span class=\"line\">        borderDashArray: [3, 3]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>调整画框主要用到上述的<code>object:moving</code>:对象移动；<code>object:modified</code>:对象调整；</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fabCanvas.on(<span class=\"string\">&#x27;object:modified&#x27;</span>:(e)=&gt; &#123;</span><br><span class=\"line\">   //修改对象</span><br><span class=\"line\">   console.log( <span class=\"string\">&#x27;object:modified&#x27;</span>)</span><br><span class=\"line\">   console.log(e.target);</span><br><span class=\"line\">  // 修改逻辑</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"选中标注\"><a href=\"#选中标注\" class=\"headerlink\" title=\"选中标注\"></a>选中标注</h3><p>在新建形状中监听<code>select</code>事件，可以抛出对应事件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rect.on(<span class=\"string\">&#x27;selected&#x27;</span>,(e)=&gt;&#123;</span><br><span class=\"line\">    this.<span class=\"variable\">$emit</span>(<span class=\"string\">&#x27;objectSelected&#x27;</span>, e.target)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除标注\"><a href=\"#删除标注\" class=\"headerlink\" title=\"删除标注\"></a>删除标注</h3><p>直接调用fabric的remove事件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fabCanvas.remove(rect)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"清空所有画框\"><a href=\"#清空所有画框\" class=\"headerlink\" title=\"清空所有画框\"></a>清空所有画框</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">clearAllMark</span></span>()&#123;</span><br><span class=\"line\">    const objects = fabCanvas.getObjects()</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"built_in\">let</span> i <span class=\"keyword\">in</span> objects)&#123;</span><br><span class=\"line\">        fabCanvas.remove(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    this.<span class=\"variable\">$emit</span>(<span class=\"string\">&#x27;clearAllMark&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"放大缩小\"><a href=\"#放大缩小\" class=\"headerlink\" title=\"放大缩小\"></a>放大缩小</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fabCanvas.setZoom(10)</span><br></pre></td></tr></table></figure>\n\n<p>以上交互已经包含了绝大部分的图片交互，只是有点碎。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><code>ailabel</code>提供了一套完整的打点，绘制矩形、多边形等各种形状的标注框架。简单易用功能完善，但是可扩展性差而且需要自行维护（作者已经删库）</p>\n<p><code>fabricjs</code> 是基于canvas类似面向对象的框架。可以绘制什么图形，可扩展和定制型强，但是需要手动监听鼠标事件自己实现绘制标注逻辑，时间成本高</p>\n"},{"title":"移动端Fixed布局下Input-Bug解决","date":"2019-07-23T02:53:52.000Z","_content":"\n在移动端开发中，fixed 元素和 input 输入框在同一页面是常有的事。但是 在键盘配唤起\n（也就是输入框获取焦点）的情况下，会出现一些莫名其妙的 Bug，尤其在 ios 中。这里记录下我遇到的一些问题以及解决方案。\n\n# ios 下的 Fixed 和 Input Bug\n\n假设有这样一个页面：\n\n```\n  <body>\n    <header>\n      ...\n    </header>\n\n    <main>\n      ...\n    </main>\n\n    <footer>\n      <input type=\"text\" value=\"\">\n      <button class=\"btn\"></button>\n    </footer>\n  </body>\n```\n\n对应的页面样式如下:\n\n```\n  header{\n    position: fixed;\n    height: 44px;\n    left:0;\n    right:0;\n    top:0;\n  }\n  footer {\n    position: fixed;\n    height: 40px;\n    left: 0;\n    right:0;\n    bottom:0;\n  }\n  main{\n    min-height: 100%;\n    margin-top:44px;\n    margin-bottom: 40px;\n  }\n```\n\n这样一个常规的 fixed 布局就完成了，目前事完全正常的。\n\n但是底部输入框唤起键盘以后，再次滑动页面，就会发现 fixed 布局元素跟随页面滚动起来了？？？fixed 属性失效了！！！\n\n怎么回事啊，老弟？？？\n\n原来是在键盘被唤起后，fixed 元素失效，换句话说就是元素不能浮动，与 absolute 一致，而当页面高度超出一屏时，失效的 fixed 元素会随页面滚动一起滚动。\n\n既然如此，那让页面整体高度固定且不能滚动，就算 fixed 属性还是失效，也不就会出现上面的问题了。\n\nOK，照着这个方法，fixed 元素的父级不能滚动，就要将原本的滚动区域移到一个固定高度的元素里，还按照上面那个布局来看，就是将滚动内容移到 main 内部，再给 main 一个定高，代码如下:\n\n```\n<body>\n    <header>\n      ...\n    </header>\n\n    <main>\n      <div class=\"contene\">\n        ...\n      </div>\n    </main>\n\n    <footer>\n      <input type=\"text\" value=\"\">\n      <button class=\"btn\"></button>\n    </footer>\n  </body>\n```\n\n```\n  其他布局不变\n\n  main {\n    position: absolute;\n    top: 44px;\n    bottom: 40px;\n    overflow-y: scroll\n  }\n```\n\n看上去时解决问题了，在手机上实际测试一下，也是没问题的，但是发现滚动十分不流畅，手指\n松开后，滚动立即停止。加上下面的属性就可以恢复弹性滚动。\n\n```\n  -webkit-overflow-scrolling: touch\n```\n\n再来看下，嗯~ o(_￣ ▽ ￣_)o，立刻纵享丝滑。\n\n好的，到此为止，fixed 布局在 ios 中的 bug 总算解决了。当然，还可以借助 isScroll.js 解决这个问题。\n\n此外，在 ios 中使用第三方输入法，输入法在被唤起时经常盖住输入框，只有在输入文字\n后，输入框才会浮出。目前没有发现什么好方法可以解决这个问题，算是 ios 的一个坑。\n\n# 混合 App 下的布局\n\n在 app 里唤起键盘后，键盘同样也占据一定的屏幕高度，结果就会导致整个页面的高度被挤压。由于 fixed 元素是相对于 body 定位的，这样会出现 fixed 元素盖住输入框的情况（在一些小屏手机上更严重）。\n\n例如下面这个示例:\n\n```\n  <body class=\"layou-fixed>\n    <form class=\"form\">\n      <input type=\"text\">\n    </form>\n    <button class=\"btn\">提交</button>\n  </body>\n```\n\n```\n  .layout-fixed {\n    ...\n  }\n\n  .form {\n    ...\n  }\n\n  .btn {\n    position: fixed;\n    bottom: 30px;\n    ...\n  }\n```\n\n编译打包成 App，在手机上测试一下，就出现上述问题。\n\n由于是键盘导致的页面高度不够，所以尽量不要用 fixed 布局。这里可以使用 css 最新的 flex 布局，完美的解决了页面高度不够的问题。\n\n```\n  .layout-fixed{\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n  }\n  .form{\n    flex: 1;\n  }\n  .btn{\n    margin-bottom: 30px;\n  }\n```\n\n这样当键盘唤起造成页面高度不够时，页面会变成可滚动的，而整体布局不会变化，避开了 fixed 布局的 bug。\n\n# 其他\n\n有时候输入框获取焦点(focus)后，会出现键盘盖住输入框的情况，这时候可以尝试 input 元素的 scrolltoView 进行修复。\n\n页面滚动到上下边缘的时候，一旦继续拖拽会将整个 view 一起拖拽走，导致页面露底。\n\n为了防止页面露底，可以在页面拖拽到页面边缘的时候，通过判断拖拽方向以及是否为边缘来阻止 touchmove 事件，防止页面继续拖拽。\n\n以上面 ios 下的 fixed 布局为例，一下代码仅供参考:\n\n```\n  // 防止内容区域滚到底后引起页面整体的滚动\n  var content = document.querySelector('main');\n  var startY;\n\n  content.addEventListener('touchstart', function (e) {\n      startY = e.touches[0].clientY;\n  });\n\n  content.addEventListener('touchmove', function (e) {\n      // 高位表示向上滚动\n      // 底位表示向下滚动\n      // 1容许 0禁止\n      var status = '11';\n      var ele = this;\n\n      var currentY = e.touches[0].clientY;\n\n      if (ele.scrollTop === 0) {\n          // 如果内容小于容器则同时禁止上下滚动\n          status = ele.offsetHeight >= ele.scrollHeight ? '00' : '01';\n      } else if (ele.scrollTop + ele.offsetHeight >= ele.scrollHeight) {\n          // 已经滚到底部了只能向上滚动\n          status = '10';\n      }\n\n      if (status != '11') {\n          // 判断当前的滚动方向\n          var direction = currentY - startY > 0 ? '10' : '01';\n          // 操作方向和当前允许状态求与运算，运算结果为0，就说明不允许该方向滚动，则禁止默认事件，阻止滚动\n          if (!(parseInt(status, 2) & parseInt(direction, 2))) {\n              stopEvent(e);\n          }\n      }\n  });\n```\n\n# 参考\n\n[web 移动端 Fixed 布局解决 iOS 下的 Fixed+Input BUG 现象](\"http://menvscode.com/detail/597ee129549d941107716d14\")\n","source":"_posts/移动端Fixed布局下Input-Bug解决.md","raw":"---\ntitle: 移动端Fixed布局下Input-Bug解决\ndate: 2019-07-23 10:53:52\ntags:\n  - ios\n  - bug\n---\n\n在移动端开发中，fixed 元素和 input 输入框在同一页面是常有的事。但是 在键盘配唤起\n（也就是输入框获取焦点）的情况下，会出现一些莫名其妙的 Bug，尤其在 ios 中。这里记录下我遇到的一些问题以及解决方案。\n\n# ios 下的 Fixed 和 Input Bug\n\n假设有这样一个页面：\n\n```\n  <body>\n    <header>\n      ...\n    </header>\n\n    <main>\n      ...\n    </main>\n\n    <footer>\n      <input type=\"text\" value=\"\">\n      <button class=\"btn\"></button>\n    </footer>\n  </body>\n```\n\n对应的页面样式如下:\n\n```\n  header{\n    position: fixed;\n    height: 44px;\n    left:0;\n    right:0;\n    top:0;\n  }\n  footer {\n    position: fixed;\n    height: 40px;\n    left: 0;\n    right:0;\n    bottom:0;\n  }\n  main{\n    min-height: 100%;\n    margin-top:44px;\n    margin-bottom: 40px;\n  }\n```\n\n这样一个常规的 fixed 布局就完成了，目前事完全正常的。\n\n但是底部输入框唤起键盘以后，再次滑动页面，就会发现 fixed 布局元素跟随页面滚动起来了？？？fixed 属性失效了！！！\n\n怎么回事啊，老弟？？？\n\n原来是在键盘被唤起后，fixed 元素失效，换句话说就是元素不能浮动，与 absolute 一致，而当页面高度超出一屏时，失效的 fixed 元素会随页面滚动一起滚动。\n\n既然如此，那让页面整体高度固定且不能滚动，就算 fixed 属性还是失效，也不就会出现上面的问题了。\n\nOK，照着这个方法，fixed 元素的父级不能滚动，就要将原本的滚动区域移到一个固定高度的元素里，还按照上面那个布局来看，就是将滚动内容移到 main 内部，再给 main 一个定高，代码如下:\n\n```\n<body>\n    <header>\n      ...\n    </header>\n\n    <main>\n      <div class=\"contene\">\n        ...\n      </div>\n    </main>\n\n    <footer>\n      <input type=\"text\" value=\"\">\n      <button class=\"btn\"></button>\n    </footer>\n  </body>\n```\n\n```\n  其他布局不变\n\n  main {\n    position: absolute;\n    top: 44px;\n    bottom: 40px;\n    overflow-y: scroll\n  }\n```\n\n看上去时解决问题了，在手机上实际测试一下，也是没问题的，但是发现滚动十分不流畅，手指\n松开后，滚动立即停止。加上下面的属性就可以恢复弹性滚动。\n\n```\n  -webkit-overflow-scrolling: touch\n```\n\n再来看下，嗯~ o(_￣ ▽ ￣_)o，立刻纵享丝滑。\n\n好的，到此为止，fixed 布局在 ios 中的 bug 总算解决了。当然，还可以借助 isScroll.js 解决这个问题。\n\n此外，在 ios 中使用第三方输入法，输入法在被唤起时经常盖住输入框，只有在输入文字\n后，输入框才会浮出。目前没有发现什么好方法可以解决这个问题，算是 ios 的一个坑。\n\n# 混合 App 下的布局\n\n在 app 里唤起键盘后，键盘同样也占据一定的屏幕高度，结果就会导致整个页面的高度被挤压。由于 fixed 元素是相对于 body 定位的，这样会出现 fixed 元素盖住输入框的情况（在一些小屏手机上更严重）。\n\n例如下面这个示例:\n\n```\n  <body class=\"layou-fixed>\n    <form class=\"form\">\n      <input type=\"text\">\n    </form>\n    <button class=\"btn\">提交</button>\n  </body>\n```\n\n```\n  .layout-fixed {\n    ...\n  }\n\n  .form {\n    ...\n  }\n\n  .btn {\n    position: fixed;\n    bottom: 30px;\n    ...\n  }\n```\n\n编译打包成 App，在手机上测试一下，就出现上述问题。\n\n由于是键盘导致的页面高度不够，所以尽量不要用 fixed 布局。这里可以使用 css 最新的 flex 布局，完美的解决了页面高度不够的问题。\n\n```\n  .layout-fixed{\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n  }\n  .form{\n    flex: 1;\n  }\n  .btn{\n    margin-bottom: 30px;\n  }\n```\n\n这样当键盘唤起造成页面高度不够时，页面会变成可滚动的，而整体布局不会变化，避开了 fixed 布局的 bug。\n\n# 其他\n\n有时候输入框获取焦点(focus)后，会出现键盘盖住输入框的情况，这时候可以尝试 input 元素的 scrolltoView 进行修复。\n\n页面滚动到上下边缘的时候，一旦继续拖拽会将整个 view 一起拖拽走，导致页面露底。\n\n为了防止页面露底，可以在页面拖拽到页面边缘的时候，通过判断拖拽方向以及是否为边缘来阻止 touchmove 事件，防止页面继续拖拽。\n\n以上面 ios 下的 fixed 布局为例，一下代码仅供参考:\n\n```\n  // 防止内容区域滚到底后引起页面整体的滚动\n  var content = document.querySelector('main');\n  var startY;\n\n  content.addEventListener('touchstart', function (e) {\n      startY = e.touches[0].clientY;\n  });\n\n  content.addEventListener('touchmove', function (e) {\n      // 高位表示向上滚动\n      // 底位表示向下滚动\n      // 1容许 0禁止\n      var status = '11';\n      var ele = this;\n\n      var currentY = e.touches[0].clientY;\n\n      if (ele.scrollTop === 0) {\n          // 如果内容小于容器则同时禁止上下滚动\n          status = ele.offsetHeight >= ele.scrollHeight ? '00' : '01';\n      } else if (ele.scrollTop + ele.offsetHeight >= ele.scrollHeight) {\n          // 已经滚到底部了只能向上滚动\n          status = '10';\n      }\n\n      if (status != '11') {\n          // 判断当前的滚动方向\n          var direction = currentY - startY > 0 ? '10' : '01';\n          // 操作方向和当前允许状态求与运算，运算结果为0，就说明不允许该方向滚动，则禁止默认事件，阻止滚动\n          if (!(parseInt(status, 2) & parseInt(direction, 2))) {\n              stopEvent(e);\n          }\n      }\n  });\n```\n\n# 参考\n\n[web 移动端 Fixed 布局解决 iOS 下的 Fixed+Input BUG 现象](\"http://menvscode.com/detail/597ee129549d941107716d14\")\n","slug":"移动端Fixed布局下Input-Bug解决","published":1,"updated":"2024-01-08T06:31:52.839Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrq64z6w0014soipexu31y16","content":"<p>在移动端开发中，fixed 元素和 input 输入框在同一页面是常有的事。但是 在键盘配唤起<br>（也就是输入框获取焦点）的情况下，会出现一些莫名其妙的 Bug，尤其在 ios 中。这里记录下我遇到的一些问题以及解决方案。</p>\n<h1 id=\"ios-下的-Fixed-和-Input-Bug\"><a href=\"#ios-下的-Fixed-和-Input-Bug\" class=\"headerlink\" title=\"ios 下的 Fixed 和 Input Bug\"></a>ios 下的 Fixed 和 Input Bug</h1><p>假设有这样一个页面：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;header&gt;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &lt;/header&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;main&gt;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &lt;/main&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;footer&gt;</span><br><span class=\"line\">    &lt;input type=&quot;text&quot; value=&quot;&quot;&gt;</span><br><span class=\"line\">    &lt;button class=&quot;btn&quot;&gt;&lt;/button&gt;</span><br><span class=\"line\">  &lt;/footer&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>对应的页面样式如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">header&#123;</span><br><span class=\"line\">  position: fixed;</span><br><span class=\"line\">  height: 44px;</span><br><span class=\"line\">  left:0;</span><br><span class=\"line\">  right:0;</span><br><span class=\"line\">  top:0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">footer &#123;</span><br><span class=\"line\">  position: fixed;</span><br><span class=\"line\">  height: 40px;</span><br><span class=\"line\">  left: 0;</span><br><span class=\"line\">  right:0;</span><br><span class=\"line\">  bottom:0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">main&#123;</span><br><span class=\"line\">  min-height: 100%;</span><br><span class=\"line\">  margin-top:44px;</span><br><span class=\"line\">  margin-bottom: 40px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样一个常规的 fixed 布局就完成了，目前事完全正常的。</p>\n<p>但是底部输入框唤起键盘以后，再次滑动页面，就会发现 fixed 布局元素跟随页面滚动起来了？？？fixed 属性失效了！！！</p>\n<p>怎么回事啊，老弟？？？</p>\n<p>原来是在键盘被唤起后，fixed 元素失效，换句话说就是元素不能浮动，与 absolute 一致，而当页面高度超出一屏时，失效的 fixed 元素会随页面滚动一起滚动。</p>\n<p>既然如此，那让页面整体高度固定且不能滚动，就算 fixed 属性还是失效，也不就会出现上面的问题了。</p>\n<p>OK，照着这个方法，fixed 元素的父级不能滚动，就要将原本的滚动区域移到一个固定高度的元素里，还按照上面那个布局来看，就是将滚动内容移到 main 内部，再给 main 一个定高，代码如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;header&gt;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    &lt;/header&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;main&gt;</span><br><span class=\"line\">      &lt;div class=&quot;contene&quot;&gt;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    &lt;/main&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;footer&gt;</span><br><span class=\"line\">      &lt;input type=&quot;text&quot; value=&quot;&quot;&gt;</span><br><span class=\"line\">      &lt;button class=&quot;btn&quot;&gt;&lt;/button&gt;</span><br><span class=\"line\">    &lt;/footer&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">其他布局不变</span><br><span class=\"line\"></span><br><span class=\"line\">main &#123;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">  top: 44px;</span><br><span class=\"line\">  bottom: 40px;</span><br><span class=\"line\">  overflow-y: scroll</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>看上去时解决问题了，在手机上实际测试一下，也是没问题的，但是发现滚动十分不流畅，手指<br>松开后，滚动立即停止。加上下面的属性就可以恢复弹性滚动。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-webkit-overflow-scrolling: touch</span><br></pre></td></tr></table></figure>\n\n<p>再来看下，嗯~ o(<em>￣ ▽ ￣</em>)o，立刻纵享丝滑。</p>\n<p>好的，到此为止，fixed 布局在 ios 中的 bug 总算解决了。当然，还可以借助 isScroll.js 解决这个问题。</p>\n<p>此外，在 ios 中使用第三方输入法，输入法在被唤起时经常盖住输入框，只有在输入文字<br>后，输入框才会浮出。目前没有发现什么好方法可以解决这个问题，算是 ios 的一个坑。</p>\n<h1 id=\"混合-App-下的布局\"><a href=\"#混合-App-下的布局\" class=\"headerlink\" title=\"混合 App 下的布局\"></a>混合 App 下的布局</h1><p>在 app 里唤起键盘后，键盘同样也占据一定的屏幕高度，结果就会导致整个页面的高度被挤压。由于 fixed 元素是相对于 body 定位的，这样会出现 fixed 元素盖住输入框的情况（在一些小屏手机上更严重）。</p>\n<p>例如下面这个示例:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body class=&quot;layou-fixed&gt;</span><br><span class=\"line\">  &lt;form class=&quot;form&quot;&gt;</span><br><span class=\"line\">    &lt;input type=&quot;text&quot;&gt;</span><br><span class=\"line\">  &lt;/form&gt;</span><br><span class=\"line\">  &lt;button class=&quot;btn&quot;&gt;提交&lt;/button&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.layout-fixed &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.form &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.btn &#123;</span><br><span class=\"line\">  position: fixed;</span><br><span class=\"line\">  bottom: 30px;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译打包成 App，在手机上测试一下，就出现上述问题。</p>\n<p>由于是键盘导致的页面高度不够，所以尽量不要用 fixed 布局。这里可以使用 css 最新的 flex 布局，完美的解决了页面高度不够的问题。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.layout-fixed&#123;</span><br><span class=\"line\">  display: flex;</span><br><span class=\"line\">  flex-direction: column;</span><br><span class=\"line\">  justify-content: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.form&#123;</span><br><span class=\"line\">  flex: 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.btn&#123;</span><br><span class=\"line\">  margin-bottom: 30px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样当键盘唤起造成页面高度不够时，页面会变成可滚动的，而整体布局不会变化，避开了 fixed 布局的 bug。</p>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><p>有时候输入框获取焦点(focus)后，会出现键盘盖住输入框的情况，这时候可以尝试 input 元素的 scrolltoView 进行修复。</p>\n<p>页面滚动到上下边缘的时候，一旦继续拖拽会将整个 view 一起拖拽走，导致页面露底。</p>\n<p>为了防止页面露底，可以在页面拖拽到页面边缘的时候，通过判断拖拽方向以及是否为边缘来阻止 touchmove 事件，防止页面继续拖拽。</p>\n<p>以上面 ios 下的 fixed 布局为例，一下代码仅供参考:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 防止内容区域滚到底后引起页面整体的滚动</span><br><span class=\"line\">var content = document.querySelector(&#x27;main&#x27;);</span><br><span class=\"line\">var startY;</span><br><span class=\"line\"></span><br><span class=\"line\">content.addEventListener(&#x27;touchstart&#x27;, function (e) &#123;</span><br><span class=\"line\">    startY = e.touches[0].clientY;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">content.addEventListener(&#x27;touchmove&#x27;, function (e) &#123;</span><br><span class=\"line\">    // 高位表示向上滚动</span><br><span class=\"line\">    // 底位表示向下滚动</span><br><span class=\"line\">    // 1容许 0禁止</span><br><span class=\"line\">    var status = &#x27;11&#x27;;</span><br><span class=\"line\">    var ele = this;</span><br><span class=\"line\"></span><br><span class=\"line\">    var currentY = e.touches[0].clientY;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (ele.scrollTop === 0) &#123;</span><br><span class=\"line\">        // 如果内容小于容器则同时禁止上下滚动</span><br><span class=\"line\">        status = ele.offsetHeight &gt;= ele.scrollHeight ? &#x27;00&#x27; : &#x27;01&#x27;;</span><br><span class=\"line\">    &#125; else if (ele.scrollTop + ele.offsetHeight &gt;= ele.scrollHeight) &#123;</span><br><span class=\"line\">        // 已经滚到底部了只能向上滚动</span><br><span class=\"line\">        status = &#x27;10&#x27;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (status != &#x27;11&#x27;) &#123;</span><br><span class=\"line\">        // 判断当前的滚动方向</span><br><span class=\"line\">        var direction = currentY - startY &gt; 0 ? &#x27;10&#x27; : &#x27;01&#x27;;</span><br><span class=\"line\">        // 操作方向和当前允许状态求与运算，运算结果为0，就说明不允许该方向滚动，则禁止默认事件，阻止滚动</span><br><span class=\"line\">        if (!(parseInt(status, 2) &amp; parseInt(direction, 2))) &#123;</span><br><span class=\"line\">            stopEvent(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"%22http://menvscode.com/detail/597ee129549d941107716d14%22\">web 移动端 Fixed 布局解决 iOS 下的 Fixed+Input BUG 现象</a></p>\n","site":{"data":{}},"length":1220,"excerpt":"","more":"<p>在移动端开发中，fixed 元素和 input 输入框在同一页面是常有的事。但是 在键盘配唤起<br>（也就是输入框获取焦点）的情况下，会出现一些莫名其妙的 Bug，尤其在 ios 中。这里记录下我遇到的一些问题以及解决方案。</p>\n<h1 id=\"ios-下的-Fixed-和-Input-Bug\"><a href=\"#ios-下的-Fixed-和-Input-Bug\" class=\"headerlink\" title=\"ios 下的 Fixed 和 Input Bug\"></a>ios 下的 Fixed 和 Input Bug</h1><p>假设有这样一个页面：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;header&gt;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &lt;/header&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;main&gt;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &lt;/main&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;footer&gt;</span><br><span class=\"line\">    &lt;input type=&quot;text&quot; value=&quot;&quot;&gt;</span><br><span class=\"line\">    &lt;button class=&quot;btn&quot;&gt;&lt;/button&gt;</span><br><span class=\"line\">  &lt;/footer&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>对应的页面样式如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">header&#123;</span><br><span class=\"line\">  position: fixed;</span><br><span class=\"line\">  height: 44px;</span><br><span class=\"line\">  left:0;</span><br><span class=\"line\">  right:0;</span><br><span class=\"line\">  top:0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">footer &#123;</span><br><span class=\"line\">  position: fixed;</span><br><span class=\"line\">  height: 40px;</span><br><span class=\"line\">  left: 0;</span><br><span class=\"line\">  right:0;</span><br><span class=\"line\">  bottom:0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">main&#123;</span><br><span class=\"line\">  min-height: 100%;</span><br><span class=\"line\">  margin-top:44px;</span><br><span class=\"line\">  margin-bottom: 40px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样一个常规的 fixed 布局就完成了，目前事完全正常的。</p>\n<p>但是底部输入框唤起键盘以后，再次滑动页面，就会发现 fixed 布局元素跟随页面滚动起来了？？？fixed 属性失效了！！！</p>\n<p>怎么回事啊，老弟？？？</p>\n<p>原来是在键盘被唤起后，fixed 元素失效，换句话说就是元素不能浮动，与 absolute 一致，而当页面高度超出一屏时，失效的 fixed 元素会随页面滚动一起滚动。</p>\n<p>既然如此，那让页面整体高度固定且不能滚动，就算 fixed 属性还是失效，也不就会出现上面的问题了。</p>\n<p>OK，照着这个方法，fixed 元素的父级不能滚动，就要将原本的滚动区域移到一个固定高度的元素里，还按照上面那个布局来看，就是将滚动内容移到 main 内部，再给 main 一个定高，代码如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;header&gt;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    &lt;/header&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;main&gt;</span><br><span class=\"line\">      &lt;div class=&quot;contene&quot;&gt;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    &lt;/main&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;footer&gt;</span><br><span class=\"line\">      &lt;input type=&quot;text&quot; value=&quot;&quot;&gt;</span><br><span class=\"line\">      &lt;button class=&quot;btn&quot;&gt;&lt;/button&gt;</span><br><span class=\"line\">    &lt;/footer&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">其他布局不变</span><br><span class=\"line\"></span><br><span class=\"line\">main &#123;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">  top: 44px;</span><br><span class=\"line\">  bottom: 40px;</span><br><span class=\"line\">  overflow-y: scroll</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>看上去时解决问题了，在手机上实际测试一下，也是没问题的，但是发现滚动十分不流畅，手指<br>松开后，滚动立即停止。加上下面的属性就可以恢复弹性滚动。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-webkit-overflow-scrolling: touch</span><br></pre></td></tr></table></figure>\n\n<p>再来看下，嗯~ o(<em>￣ ▽ ￣</em>)o，立刻纵享丝滑。</p>\n<p>好的，到此为止，fixed 布局在 ios 中的 bug 总算解决了。当然，还可以借助 isScroll.js 解决这个问题。</p>\n<p>此外，在 ios 中使用第三方输入法，输入法在被唤起时经常盖住输入框，只有在输入文字<br>后，输入框才会浮出。目前没有发现什么好方法可以解决这个问题，算是 ios 的一个坑。</p>\n<h1 id=\"混合-App-下的布局\"><a href=\"#混合-App-下的布局\" class=\"headerlink\" title=\"混合 App 下的布局\"></a>混合 App 下的布局</h1><p>在 app 里唤起键盘后，键盘同样也占据一定的屏幕高度，结果就会导致整个页面的高度被挤压。由于 fixed 元素是相对于 body 定位的，这样会出现 fixed 元素盖住输入框的情况（在一些小屏手机上更严重）。</p>\n<p>例如下面这个示例:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body class=&quot;layou-fixed&gt;</span><br><span class=\"line\">  &lt;form class=&quot;form&quot;&gt;</span><br><span class=\"line\">    &lt;input type=&quot;text&quot;&gt;</span><br><span class=\"line\">  &lt;/form&gt;</span><br><span class=\"line\">  &lt;button class=&quot;btn&quot;&gt;提交&lt;/button&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.layout-fixed &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.form &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.btn &#123;</span><br><span class=\"line\">  position: fixed;</span><br><span class=\"line\">  bottom: 30px;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译打包成 App，在手机上测试一下，就出现上述问题。</p>\n<p>由于是键盘导致的页面高度不够，所以尽量不要用 fixed 布局。这里可以使用 css 最新的 flex 布局，完美的解决了页面高度不够的问题。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.layout-fixed&#123;</span><br><span class=\"line\">  display: flex;</span><br><span class=\"line\">  flex-direction: column;</span><br><span class=\"line\">  justify-content: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.form&#123;</span><br><span class=\"line\">  flex: 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.btn&#123;</span><br><span class=\"line\">  margin-bottom: 30px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样当键盘唤起造成页面高度不够时，页面会变成可滚动的，而整体布局不会变化，避开了 fixed 布局的 bug。</p>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><p>有时候输入框获取焦点(focus)后，会出现键盘盖住输入框的情况，这时候可以尝试 input 元素的 scrolltoView 进行修复。</p>\n<p>页面滚动到上下边缘的时候，一旦继续拖拽会将整个 view 一起拖拽走，导致页面露底。</p>\n<p>为了防止页面露底，可以在页面拖拽到页面边缘的时候，通过判断拖拽方向以及是否为边缘来阻止 touchmove 事件，防止页面继续拖拽。</p>\n<p>以上面 ios 下的 fixed 布局为例，一下代码仅供参考:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 防止内容区域滚到底后引起页面整体的滚动</span><br><span class=\"line\">var content = document.querySelector(&#x27;main&#x27;);</span><br><span class=\"line\">var startY;</span><br><span class=\"line\"></span><br><span class=\"line\">content.addEventListener(&#x27;touchstart&#x27;, function (e) &#123;</span><br><span class=\"line\">    startY = e.touches[0].clientY;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">content.addEventListener(&#x27;touchmove&#x27;, function (e) &#123;</span><br><span class=\"line\">    // 高位表示向上滚动</span><br><span class=\"line\">    // 底位表示向下滚动</span><br><span class=\"line\">    // 1容许 0禁止</span><br><span class=\"line\">    var status = &#x27;11&#x27;;</span><br><span class=\"line\">    var ele = this;</span><br><span class=\"line\"></span><br><span class=\"line\">    var currentY = e.touches[0].clientY;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (ele.scrollTop === 0) &#123;</span><br><span class=\"line\">        // 如果内容小于容器则同时禁止上下滚动</span><br><span class=\"line\">        status = ele.offsetHeight &gt;= ele.scrollHeight ? &#x27;00&#x27; : &#x27;01&#x27;;</span><br><span class=\"line\">    &#125; else if (ele.scrollTop + ele.offsetHeight &gt;= ele.scrollHeight) &#123;</span><br><span class=\"line\">        // 已经滚到底部了只能向上滚动</span><br><span class=\"line\">        status = &#x27;10&#x27;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (status != &#x27;11&#x27;) &#123;</span><br><span class=\"line\">        // 判断当前的滚动方向</span><br><span class=\"line\">        var direction = currentY - startY &gt; 0 ? &#x27;10&#x27; : &#x27;01&#x27;;</span><br><span class=\"line\">        // 操作方向和当前允许状态求与运算，运算结果为0，就说明不允许该方向滚动，则禁止默认事件，阻止滚动</span><br><span class=\"line\">        if (!(parseInt(status, 2) &amp; parseInt(direction, 2))) &#123;</span><br><span class=\"line\">            stopEvent(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"%22http://menvscode.com/detail/597ee129549d941107716d14%22\">web 移动端 Fixed 布局解决 iOS 下的 Fixed+Input BUG 现象</a></p>\n"},{"title":"网页截图功能调研","date":"2023-01-09T06:44:35.000Z","_content":"\n\n## 背景\n\n在某一开发项目中有这样一个需求，用户框选出一段内容给后端做OCR识别。\n咋一看挺简单的，就是个鼠标框选功能，但是如何拿到框选区域的内容呢？？？换个角度来看这不就是QQ截图么，拿到截取的图片传给后端问题就解决了。\n别急别急啊，很可惜的是JS并没有提供相关的方法，浏览器也没有提供对应的API。😩 😫\n\n## 网页截图的两种方式\n\n前端要实现页面截图的功能，现在比较常见的方式是使用开源的截图npm库，一般使用比较多的npm库有 [html2canvas](https://github.com/niklasvh/html2canvas) 和 [dom-to-image](https://github.com/tsayen/dom-to-image)\n以上两种常见的npm库，对应着两种常见的实现原理。实现前端截图，一般是使用图形API重新绘制页面生成图片，基本就是SVG（dom-to-image）和Canvas（html2canvas）两种实现方案，两种方案目标相同，即把DOM转为图片。\n\n##### dom-to-image\n\ndom-to-image库主要使用的是SVG实现方式，简单来说就是先把DOM转换为SVG然后再把SVG转换为图片。\n具体用法这里不做细究，只做基本介绍\n\n```javascript\nconst node = document.getElementById('node');\ndomtoimage.toPng(node,options).then((dataUrl) => {\n    const img = new Image();\n    img.src = dataUrl;\n    document.body.appendChild(img);\n})\n```\n\n\n##### html2canvas\n\nhtml2canvas库主要使用的是Canvas实现方式，主要过程是手动将dom重新绘制成canvas，因此，它只能正确渲染可以理解的属性，有许多CSS属性无法正确渲染。\n\n```javascript\nhtml2canvas(dom, option).then(canvas=>{\n  canvas.toDataURL()\n})\n```\n\n\n通过对比两者的基本用法发现，它们都需要传入一个具体的dom对象才能使用，但是用户截图所选内容不一定是一个完整的dom，而且就算是一个完整dom我们也没法获取到对应的dom。否则就会不需要大费周章的使用三方件了。完了此路不通啊\n不要急少年，直接使用不行那就迂回吧。首先通过上面两种方法将整个网页转换成图片，然后我们在图片里截取所需内容就OK啦。\n这就用到了canvas的\nhttps://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/drawImage\n\n![null](https://s2.loli.net/2024/01/08/OVtxmUK23SMhbzG.png)\n基本用法如下：\n\n```javascript\n// 传入截取原图，起始点距左上角的位置和截取的宽高\nctx.drawImage(image, 33, 71, 104, 124, 21, 20, 87, 104); \n```\n\n\n很可惜SVG并没有相同的能力，所以dom-to-image不适用我们的任意截图功能。\n\n### 框选功能\n\n这个很简单，就是监听鼠标的mousedown、mousemove、mouseup事件获取鼠标点击位置和移动距离。在mouseup里传入所得到的的位置信息给canvas。\n\n```javascript\n// 获取包含图片的base64，也可以使用使用别的方法直接下载图片，核心就是拿到图片信息\ncanvas.toDataURL(); \n```\n\n\n到此一个简单的网页任意截图功能就完成了。下面回归到我们的需求本身\n\n### 业务分析\n\n首页项目中需要截图的内容本身就是一个图片，那么其实就不需要使用三方件搞得那么复杂。就是一个框选功能加新建canvas再调用drawImage方法已经满足需求了。\n\n### 总结\n\n虽然最终需求实现不是太复杂，但是在调研过程中我们也理清了如何实现一个完整的截图功能，重新熟悉了canvas相关的知识也算是颇有收获。后期遇到一个真正的截图功能也我们可以从容胜任。好了就这样吧。","source":"_posts/网页截图功能调研.md","raw":"---\ntitle: 网页截图功能调研\ndate: 2023-01-09 14:44:35\ntags:\n    - canvas\n    - svg\n---\n\n\n## 背景\n\n在某一开发项目中有这样一个需求，用户框选出一段内容给后端做OCR识别。\n咋一看挺简单的，就是个鼠标框选功能，但是如何拿到框选区域的内容呢？？？换个角度来看这不就是QQ截图么，拿到截取的图片传给后端问题就解决了。\n别急别急啊，很可惜的是JS并没有提供相关的方法，浏览器也没有提供对应的API。😩 😫\n\n## 网页截图的两种方式\n\n前端要实现页面截图的功能，现在比较常见的方式是使用开源的截图npm库，一般使用比较多的npm库有 [html2canvas](https://github.com/niklasvh/html2canvas) 和 [dom-to-image](https://github.com/tsayen/dom-to-image)\n以上两种常见的npm库，对应着两种常见的实现原理。实现前端截图，一般是使用图形API重新绘制页面生成图片，基本就是SVG（dom-to-image）和Canvas（html2canvas）两种实现方案，两种方案目标相同，即把DOM转为图片。\n\n##### dom-to-image\n\ndom-to-image库主要使用的是SVG实现方式，简单来说就是先把DOM转换为SVG然后再把SVG转换为图片。\n具体用法这里不做细究，只做基本介绍\n\n```javascript\nconst node = document.getElementById('node');\ndomtoimage.toPng(node,options).then((dataUrl) => {\n    const img = new Image();\n    img.src = dataUrl;\n    document.body.appendChild(img);\n})\n```\n\n\n##### html2canvas\n\nhtml2canvas库主要使用的是Canvas实现方式，主要过程是手动将dom重新绘制成canvas，因此，它只能正确渲染可以理解的属性，有许多CSS属性无法正确渲染。\n\n```javascript\nhtml2canvas(dom, option).then(canvas=>{\n  canvas.toDataURL()\n})\n```\n\n\n通过对比两者的基本用法发现，它们都需要传入一个具体的dom对象才能使用，但是用户截图所选内容不一定是一个完整的dom，而且就算是一个完整dom我们也没法获取到对应的dom。否则就会不需要大费周章的使用三方件了。完了此路不通啊\n不要急少年，直接使用不行那就迂回吧。首先通过上面两种方法将整个网页转换成图片，然后我们在图片里截取所需内容就OK啦。\n这就用到了canvas的\nhttps://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/drawImage\n\n![null](https://s2.loli.net/2024/01/08/OVtxmUK23SMhbzG.png)\n基本用法如下：\n\n```javascript\n// 传入截取原图，起始点距左上角的位置和截取的宽高\nctx.drawImage(image, 33, 71, 104, 124, 21, 20, 87, 104); \n```\n\n\n很可惜SVG并没有相同的能力，所以dom-to-image不适用我们的任意截图功能。\n\n### 框选功能\n\n这个很简单，就是监听鼠标的mousedown、mousemove、mouseup事件获取鼠标点击位置和移动距离。在mouseup里传入所得到的的位置信息给canvas。\n\n```javascript\n// 获取包含图片的base64，也可以使用使用别的方法直接下载图片，核心就是拿到图片信息\ncanvas.toDataURL(); \n```\n\n\n到此一个简单的网页任意截图功能就完成了。下面回归到我们的需求本身\n\n### 业务分析\n\n首页项目中需要截图的内容本身就是一个图片，那么其实就不需要使用三方件搞得那么复杂。就是一个框选功能加新建canvas再调用drawImage方法已经满足需求了。\n\n### 总结\n\n虽然最终需求实现不是太复杂，但是在调研过程中我们也理清了如何实现一个完整的截图功能，重新熟悉了canvas相关的知识也算是颇有收获。后期遇到一个真正的截图功能也我们可以从容胜任。好了就这样吧。","slug":"网页截图功能调研","published":1,"updated":"2024-01-15T07:27:51.811Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrq64z6x0016soip6egn9ifj","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>在某一开发项目中有这样一个需求，用户框选出一段内容给后端做OCR识别。<br>咋一看挺简单的，就是个鼠标框选功能，但是如何拿到框选区域的内容呢？？？换个角度来看这不就是QQ截图么，拿到截取的图片传给后端问题就解决了。<br>别急别急啊，很可惜的是JS并没有提供相关的方法，浏览器也没有提供对应的API。😩 😫</p>\n<h2 id=\"网页截图的两种方式\"><a href=\"#网页截图的两种方式\" class=\"headerlink\" title=\"网页截图的两种方式\"></a>网页截图的两种方式</h2><p>前端要实现页面截图的功能，现在比较常见的方式是使用开源的截图npm库，一般使用比较多的npm库有 <a href=\"https://github.com/niklasvh/html2canvas\">html2canvas</a> 和 <a href=\"https://github.com/tsayen/dom-to-image\">dom-to-image</a><br>以上两种常见的npm库，对应着两种常见的实现原理。实现前端截图，一般是使用图形API重新绘制页面生成图片，基本就是SVG（dom-to-image）和Canvas（html2canvas）两种实现方案，两种方案目标相同，即把DOM转为图片。</p>\n<h5 id=\"dom-to-image\"><a href=\"#dom-to-image\" class=\"headerlink\" title=\"dom-to-image\"></a>dom-to-image</h5><p>dom-to-image库主要使用的是SVG实现方式，简单来说就是先把DOM转换为SVG然后再把SVG转换为图片。<br>具体用法这里不做细究，只做基本介绍</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> node = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;node&#x27;</span>);</span><br><span class=\"line\">domtoimage.<span class=\"title function_\">toPng</span>(node,options).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">dataUrl</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> img = <span class=\"keyword\">new</span> <span class=\"title class_\">Image</span>();</span><br><span class=\"line\">    img.<span class=\"property\">src</span> = dataUrl;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(img);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n<h5 id=\"html2canvas\"><a href=\"#html2canvas\" class=\"headerlink\" title=\"html2canvas\"></a>html2canvas</h5><p>html2canvas库主要使用的是Canvas实现方式，主要过程是手动将dom重新绘制成canvas，因此，它只能正确渲染可以理解的属性，有许多CSS属性无法正确渲染。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">html2canvas</span>(dom, option).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">canvas</span>=&gt;</span>&#123;</span><br><span class=\"line\">  canvas.<span class=\"title function_\">toDataURL</span>()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n<p>通过对比两者的基本用法发现，它们都需要传入一个具体的dom对象才能使用，但是用户截图所选内容不一定是一个完整的dom，而且就算是一个完整dom我们也没法获取到对应的dom。否则就会不需要大费周章的使用三方件了。完了此路不通啊<br>不要急少年，直接使用不行那就迂回吧。首先通过上面两种方法将整个网页转换成图片，然后我们在图片里截取所需内容就OK啦。<br>这就用到了canvas的<br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/drawImage\">https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/drawImage</a></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/OVtxmUK23SMhbzG.png\" alt=\"null\"><br>基本用法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 传入截取原图，起始点距左上角的位置和截取的宽高</span></span><br><span class=\"line\">ctx.<span class=\"title function_\">drawImage</span>(image, <span class=\"number\">33</span>, <span class=\"number\">71</span>, <span class=\"number\">104</span>, <span class=\"number\">124</span>, <span class=\"number\">21</span>, <span class=\"number\">20</span>, <span class=\"number\">87</span>, <span class=\"number\">104</span>); </span><br></pre></td></tr></table></figure>\n\n\n<p>很可惜SVG并没有相同的能力，所以dom-to-image不适用我们的任意截图功能。</p>\n<h3 id=\"框选功能\"><a href=\"#框选功能\" class=\"headerlink\" title=\"框选功能\"></a>框选功能</h3><p>这个很简单，就是监听鼠标的mousedown、mousemove、mouseup事件获取鼠标点击位置和移动距离。在mouseup里传入所得到的的位置信息给canvas。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取包含图片的base64，也可以使用使用别的方法直接下载图片，核心就是拿到图片信息</span></span><br><span class=\"line\">canvas.<span class=\"title function_\">toDataURL</span>(); </span><br></pre></td></tr></table></figure>\n\n\n<p>到此一个简单的网页任意截图功能就完成了。下面回归到我们的需求本身</p>\n<h3 id=\"业务分析\"><a href=\"#业务分析\" class=\"headerlink\" title=\"业务分析\"></a>业务分析</h3><p>首页项目中需要截图的内容本身就是一个图片，那么其实就不需要使用三方件搞得那么复杂。就是一个框选功能加新建canvas再调用drawImage方法已经满足需求了。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>虽然最终需求实现不是太复杂，但是在调研过程中我们也理清了如何实现一个完整的截图功能，重新熟悉了canvas相关的知识也算是颇有收获。后期遇到一个真正的截图功能也我们可以从容胜任。好了就这样吧。</p>\n","site":{"data":{}},"length":910,"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>在某一开发项目中有这样一个需求，用户框选出一段内容给后端做OCR识别。<br>咋一看挺简单的，就是个鼠标框选功能，但是如何拿到框选区域的内容呢？？？换个角度来看这不就是QQ截图么，拿到截取的图片传给后端问题就解决了。<br>别急别急啊，很可惜的是JS并没有提供相关的方法，浏览器也没有提供对应的API。😩 😫</p>\n<h2 id=\"网页截图的两种方式\"><a href=\"#网页截图的两种方式\" class=\"headerlink\" title=\"网页截图的两种方式\"></a>网页截图的两种方式</h2><p>前端要实现页面截图的功能，现在比较常见的方式是使用开源的截图npm库，一般使用比较多的npm库有 <a href=\"https://github.com/niklasvh/html2canvas\">html2canvas</a> 和 <a href=\"https://github.com/tsayen/dom-to-image\">dom-to-image</a><br>以上两种常见的npm库，对应着两种常见的实现原理。实现前端截图，一般是使用图形API重新绘制页面生成图片，基本就是SVG（dom-to-image）和Canvas（html2canvas）两种实现方案，两种方案目标相同，即把DOM转为图片。</p>\n<h5 id=\"dom-to-image\"><a href=\"#dom-to-image\" class=\"headerlink\" title=\"dom-to-image\"></a>dom-to-image</h5><p>dom-to-image库主要使用的是SVG实现方式，简单来说就是先把DOM转换为SVG然后再把SVG转换为图片。<br>具体用法这里不做细究，只做基本介绍</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> node = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;node&#x27;</span>);</span><br><span class=\"line\">domtoimage.<span class=\"title function_\">toPng</span>(node,options).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">dataUrl</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> img = <span class=\"keyword\">new</span> <span class=\"title class_\">Image</span>();</span><br><span class=\"line\">    img.<span class=\"property\">src</span> = dataUrl;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(img);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n<h5 id=\"html2canvas\"><a href=\"#html2canvas\" class=\"headerlink\" title=\"html2canvas\"></a>html2canvas</h5><p>html2canvas库主要使用的是Canvas实现方式，主要过程是手动将dom重新绘制成canvas，因此，它只能正确渲染可以理解的属性，有许多CSS属性无法正确渲染。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">html2canvas</span>(dom, option).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">canvas</span>=&gt;</span>&#123;</span><br><span class=\"line\">  canvas.<span class=\"title function_\">toDataURL</span>()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n<p>通过对比两者的基本用法发现，它们都需要传入一个具体的dom对象才能使用，但是用户截图所选内容不一定是一个完整的dom，而且就算是一个完整dom我们也没法获取到对应的dom。否则就会不需要大费周章的使用三方件了。完了此路不通啊<br>不要急少年，直接使用不行那就迂回吧。首先通过上面两种方法将整个网页转换成图片，然后我们在图片里截取所需内容就OK啦。<br>这就用到了canvas的<br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/drawImage\">https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/drawImage</a></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/OVtxmUK23SMhbzG.png\" alt=\"null\"><br>基本用法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 传入截取原图，起始点距左上角的位置和截取的宽高</span></span><br><span class=\"line\">ctx.<span class=\"title function_\">drawImage</span>(image, <span class=\"number\">33</span>, <span class=\"number\">71</span>, <span class=\"number\">104</span>, <span class=\"number\">124</span>, <span class=\"number\">21</span>, <span class=\"number\">20</span>, <span class=\"number\">87</span>, <span class=\"number\">104</span>); </span><br></pre></td></tr></table></figure>\n\n\n<p>很可惜SVG并没有相同的能力，所以dom-to-image不适用我们的任意截图功能。</p>\n<h3 id=\"框选功能\"><a href=\"#框选功能\" class=\"headerlink\" title=\"框选功能\"></a>框选功能</h3><p>这个很简单，就是监听鼠标的mousedown、mousemove、mouseup事件获取鼠标点击位置和移动距离。在mouseup里传入所得到的的位置信息给canvas。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取包含图片的base64，也可以使用使用别的方法直接下载图片，核心就是拿到图片信息</span></span><br><span class=\"line\">canvas.<span class=\"title function_\">toDataURL</span>(); </span><br></pre></td></tr></table></figure>\n\n\n<p>到此一个简单的网页任意截图功能就完成了。下面回归到我们的需求本身</p>\n<h3 id=\"业务分析\"><a href=\"#业务分析\" class=\"headerlink\" title=\"业务分析\"></a>业务分析</h3><p>首页项目中需要截图的内容本身就是一个图片，那么其实就不需要使用三方件搞得那么复杂。就是一个框选功能加新建canvas再调用drawImage方法已经满足需求了。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>虽然最终需求实现不是太复杂，但是在调研过程中我们也理清了如何实现一个完整的截图功能，重新熟悉了canvas相关的知识也算是颇有收获。后期遇到一个真正的截图功能也我们可以从容胜任。好了就这样吧。</p>\n"},{"title":"记一次流水线编译失败引发的一系列问题","date":"2022-11-17T04:20:11.000Z","_content":"\n## 背景\n\n周二某段时间我正常提交代码触发流水线编译，结果收到了编译失败的提示。解决问题的过程中又不断出现新问题，才有了想要写点什么的倾向。\n\n## 开始\n\n通过编译日志很清晰的指出了问题所在\n\nv-model指令不能用在prop属性上\n\n![null](https://s2.loli.net/2024/01/08/Fz9gYNZoKmE3HD7.png)\n\n根据错误提示找到bill-card.vue文件，结果发现这个文件的最近改动是在11/04日，按理说不应该编译报错才对（当时我还未意识到问题的真正所在，下面再说）\n\n![null](https://s2.loli.net/2024/01/08/G18ThgtpCBANed9.png)\n\n没办法既然已经报错失败了，就先解决问题吧。查找代码，确实有个v-model作用在了prop上\n\n![null](https://s2.loli.net/2024/01/08/cOZVnUNYm4pCw9r.png)\n\n修改也很简单，错误提示里也有说明。但是仔细研究发现是我们自己将问题复杂化了，多封装了一层多余的组件，去掉这层组件直接引入原始组件就能解决问题。\n\nOK，提交代码跑流水线，完美解决！\n\n## 再次\n\n![null](https://s2.loli.net/2024/01/08/BPU2ujEdZ7NATeG.png)\n\n又失败了啊！！！！这又是什么鬼啊？？？\n\n![null](https://s2.loli.net/2024/01/08/MWk61lZdr9FpR43.png)\n\n单文件组件最少需要一个template或者script 标签？？？这怎么会有问题呢，基本的vue单文件格式肯定不会出错的。\n\n实在没头绪的情况下本地运行了一次编译。哎，结果编译成功了。没办法只能再回到报错信息里找线索，这次还真发现不同的地方\n\n![null](https://s2.loli.net/2024/01/08/8pab5DyZ9kH2QWw.png)\n\n流水线上运行的vite版本是3.2.3，而我本地运行的是3.0.9。突然灵光一闪应该是依赖版本的问题。\n\n先简单介绍下npm依赖包的版本更新规则\n\n| 符号 | 描述                 | 示例          | 示例描述                                                     |\n| ---- | -------------------- | ------------- | ------------------------------------------------------------ |\n| >    | 大于某个版本         | >1.2.1        | 大于1.2.1版本                                                |\n| >=   | 大于等于某个版本     | >=1.2.1       | 大于等于1.2.1版本                                            |\n| <    | 小于某个版本         | <1.2.1        | 小于1.2.1版本                                                |\n| <=   | 小于等于某个版本     | <=1.2.1       | 小于等于1.2.1版本                                            |\n| -    | 介于两个版本之间     | 1.2.1 - 1.4.5 | 介于1.2.1和1.4.5之间                                         |\n| x    | 不固定的版本号       | 1.3.x         | 只要保证主版本号是1，次版本号是3即可                         |\n| ~    | 补丁版本号可增       | ~1.3.4        | 保证主版本号是1，次版本号是3，补丁版本号大于等于4            |\n| ^    | 此版本和补丁版本可增 | ^1.3.4        | 保证主版本号是1，次版本号可以大于等于3，补丁版本号可以大于等于4 |\n| *    | 最新版本             | *             | 始终安装最新版本                                             |\n\n简单验证下就可以知道是否是版本导致的问题。去掉package.json里所有依赖版本前的符号，彻底固定版本，触发流水线。编译成功！\n\n![null](https://s2.loli.net/2024/01/08/m9hgWyrTfc8GVBs.png)\n\n## 解决\n\n既然确定是版本问题，需要确定到底是哪个依赖包的问题。\n\n先从显眼的开始——vite（vue3官方推荐的打包工具）\n\n我本地的vite版本是3.0.9，流水线是3.2.3。那我们先在本地把vite升级到3.2.0看看编译是否报错。\n\n3.2.0没有任何问题，那就继续升级到最新版本3.2.3再次编译，结果也成功了。那就说明不是vite的问题\n\n难道没有别的办法了么？不，再次回到我们的编译错误信息那儿\n\n![null](https://s2.loli.net/2024/01/08/Lpy1rAi46eIfJYB.png)\n\n虽然编译打包用的是vite，但是vite本质上还是引用了vue的编译工具。\n\n下面我们不是继续升级vue版本了，直接去github上看vue的版本变更记录。\n\n第一眼就发现了我们最初的错误说明\n\n![null](https://s2.loli.net/2024/01/08/d7uIwW2CA6Db5tc.png)\n\n但是在3.2.45版本里没发现跟第二次错误相关说明，接着往下找（比较我本地vue依赖版本是3.2.37）。在3.2.42的版本说明里找到相关内容\n\n![null](https://s2.loli.net/2024/01/08/pkmjfQHBAD4IsUR.png)\n\n在查看它的关联改动后，我蒙了。\n\n![null](https://s2.loli.net/2024/01/08/xO8PlGZUBWdmSYp.png)\n\n完全没有改动什么编译逻辑，只是加了错误提示。如果这么理解也就是说ve-chart.vue这个文件之前就有问题只是没提示出来？？？不符合逻辑。\n\n不要急，在这条更新说明后面还有个close问题。哎，确实在说明里找到了一个相关问题，查看内容发现跟我们的问题有点类似。\n\n![null](https://s2.loli.net/2024/01/08/uXAgsBl9SnpZ6Da.png)\n\n怎么办？？？当然是验证下，首页本地更新vue到3.2.42版本，运行编译，不出意外的编译失败了。OK，那证明我们之前找的一堆说明是正确的。接下来按照问题里的相关讨论，修改map.js里有关import.meta.url代码\n\n![null](https://s2.loli.net/2024/01/08/2OT4ScNpbElMgoV.png)\n\n![null](https://s2.loli.net/2024/01/08/BN9X41IZirDMCf5.png)\n\n再次编译，我去，真的成功了。可喜可贺找到问题说在！！！\n\n那为什么之前没问题呢？因为map.js的最新改动是11/14日，目的是优化ve-chart组件打包后的大小。之前有关美国和全球的地图资源都是静态引入，资源文件本身就比较大，打包后又都会被打入一个文件内导致最终体积过大。\n\n![null](https://s2.loli.net/2024/01/08/RDfYdirNKT3eFqt.png)\n\n怎么解决呢？vue说这是vite的问题，需要vite解决，那就只能先用上面的取巧方法解决。\n\n![null](https://s2.loli.net/2024/01/08/PpCv4KrsdYwXHVy.png)\n\n## 再一次\n\n你以为到这儿就结束了，不还没有。流水线成功后，为了验证效果，我打开了线上环境。结果还真是屋漏偏逢连夜雨，其他一切正常，热力图没法出来。\n\n![null](https://s2.loli.net/2024/01/08/BktbDMIGqNYop14.png)要疯了\n\n找问题吧。F12调试模式，问题很简单。usa.json文件404。查看本地打包生成的文件，确实没有usa.json。而且源码也没有进行任何路径转化，难怪会404找不到文件了。\n\n![null](http://yzjl2.xyz:8093/media/202304//1681888199.9186964.png)\n\n![null](https://s2.loli.net/2024/01/08/QBwOlhWJGp9Mqrd.png)\n\nvite官网也有说明，确实不支持这种，好在官方提供了另一种懒加载导入功能。\n\n![null](https://s2.loli.net/2024/01/08/wU1zFefxPQctEWm.png)\n\n![null](https://s2.loli.net/2024/01/08/kYFbXhRwEx9dMvu.png)\n\n修改代码，打包，提交，运行一路顺利。打开开发环境，热力图也能正确显示，一切正常。\n\n![null](https://s2.loli.net/2024/01/08/yF7eAJYWI6sKOdj.png)\n\n完结撒花\n","source":"_posts/记一次流水线编译失败引发的一系列问题.md","raw":"---\ntitle: 记一次流水线编译失败引发的一系列问题\ndate: 2022-11-17 12:20:11\ntags:\n    - bug\n---\n\n## 背景\n\n周二某段时间我正常提交代码触发流水线编译，结果收到了编译失败的提示。解决问题的过程中又不断出现新问题，才有了想要写点什么的倾向。\n\n## 开始\n\n通过编译日志很清晰的指出了问题所在\n\nv-model指令不能用在prop属性上\n\n![null](https://s2.loli.net/2024/01/08/Fz9gYNZoKmE3HD7.png)\n\n根据错误提示找到bill-card.vue文件，结果发现这个文件的最近改动是在11/04日，按理说不应该编译报错才对（当时我还未意识到问题的真正所在，下面再说）\n\n![null](https://s2.loli.net/2024/01/08/G18ThgtpCBANed9.png)\n\n没办法既然已经报错失败了，就先解决问题吧。查找代码，确实有个v-model作用在了prop上\n\n![null](https://s2.loli.net/2024/01/08/cOZVnUNYm4pCw9r.png)\n\n修改也很简单，错误提示里也有说明。但是仔细研究发现是我们自己将问题复杂化了，多封装了一层多余的组件，去掉这层组件直接引入原始组件就能解决问题。\n\nOK，提交代码跑流水线，完美解决！\n\n## 再次\n\n![null](https://s2.loli.net/2024/01/08/BPU2ujEdZ7NATeG.png)\n\n又失败了啊！！！！这又是什么鬼啊？？？\n\n![null](https://s2.loli.net/2024/01/08/MWk61lZdr9FpR43.png)\n\n单文件组件最少需要一个template或者script 标签？？？这怎么会有问题呢，基本的vue单文件格式肯定不会出错的。\n\n实在没头绪的情况下本地运行了一次编译。哎，结果编译成功了。没办法只能再回到报错信息里找线索，这次还真发现不同的地方\n\n![null](https://s2.loli.net/2024/01/08/8pab5DyZ9kH2QWw.png)\n\n流水线上运行的vite版本是3.2.3，而我本地运行的是3.0.9。突然灵光一闪应该是依赖版本的问题。\n\n先简单介绍下npm依赖包的版本更新规则\n\n| 符号 | 描述                 | 示例          | 示例描述                                                     |\n| ---- | -------------------- | ------------- | ------------------------------------------------------------ |\n| >    | 大于某个版本         | >1.2.1        | 大于1.2.1版本                                                |\n| >=   | 大于等于某个版本     | >=1.2.1       | 大于等于1.2.1版本                                            |\n| <    | 小于某个版本         | <1.2.1        | 小于1.2.1版本                                                |\n| <=   | 小于等于某个版本     | <=1.2.1       | 小于等于1.2.1版本                                            |\n| -    | 介于两个版本之间     | 1.2.1 - 1.4.5 | 介于1.2.1和1.4.5之间                                         |\n| x    | 不固定的版本号       | 1.3.x         | 只要保证主版本号是1，次版本号是3即可                         |\n| ~    | 补丁版本号可增       | ~1.3.4        | 保证主版本号是1，次版本号是3，补丁版本号大于等于4            |\n| ^    | 此版本和补丁版本可增 | ^1.3.4        | 保证主版本号是1，次版本号可以大于等于3，补丁版本号可以大于等于4 |\n| *    | 最新版本             | *             | 始终安装最新版本                                             |\n\n简单验证下就可以知道是否是版本导致的问题。去掉package.json里所有依赖版本前的符号，彻底固定版本，触发流水线。编译成功！\n\n![null](https://s2.loli.net/2024/01/08/m9hgWyrTfc8GVBs.png)\n\n## 解决\n\n既然确定是版本问题，需要确定到底是哪个依赖包的问题。\n\n先从显眼的开始——vite（vue3官方推荐的打包工具）\n\n我本地的vite版本是3.0.9，流水线是3.2.3。那我们先在本地把vite升级到3.2.0看看编译是否报错。\n\n3.2.0没有任何问题，那就继续升级到最新版本3.2.3再次编译，结果也成功了。那就说明不是vite的问题\n\n难道没有别的办法了么？不，再次回到我们的编译错误信息那儿\n\n![null](https://s2.loli.net/2024/01/08/Lpy1rAi46eIfJYB.png)\n\n虽然编译打包用的是vite，但是vite本质上还是引用了vue的编译工具。\n\n下面我们不是继续升级vue版本了，直接去github上看vue的版本变更记录。\n\n第一眼就发现了我们最初的错误说明\n\n![null](https://s2.loli.net/2024/01/08/d7uIwW2CA6Db5tc.png)\n\n但是在3.2.45版本里没发现跟第二次错误相关说明，接着往下找（比较我本地vue依赖版本是3.2.37）。在3.2.42的版本说明里找到相关内容\n\n![null](https://s2.loli.net/2024/01/08/pkmjfQHBAD4IsUR.png)\n\n在查看它的关联改动后，我蒙了。\n\n![null](https://s2.loli.net/2024/01/08/xO8PlGZUBWdmSYp.png)\n\n完全没有改动什么编译逻辑，只是加了错误提示。如果这么理解也就是说ve-chart.vue这个文件之前就有问题只是没提示出来？？？不符合逻辑。\n\n不要急，在这条更新说明后面还有个close问题。哎，确实在说明里找到了一个相关问题，查看内容发现跟我们的问题有点类似。\n\n![null](https://s2.loli.net/2024/01/08/uXAgsBl9SnpZ6Da.png)\n\n怎么办？？？当然是验证下，首页本地更新vue到3.2.42版本，运行编译，不出意外的编译失败了。OK，那证明我们之前找的一堆说明是正确的。接下来按照问题里的相关讨论，修改map.js里有关import.meta.url代码\n\n![null](https://s2.loli.net/2024/01/08/2OT4ScNpbElMgoV.png)\n\n![null](https://s2.loli.net/2024/01/08/BN9X41IZirDMCf5.png)\n\n再次编译，我去，真的成功了。可喜可贺找到问题说在！！！\n\n那为什么之前没问题呢？因为map.js的最新改动是11/14日，目的是优化ve-chart组件打包后的大小。之前有关美国和全球的地图资源都是静态引入，资源文件本身就比较大，打包后又都会被打入一个文件内导致最终体积过大。\n\n![null](https://s2.loli.net/2024/01/08/RDfYdirNKT3eFqt.png)\n\n怎么解决呢？vue说这是vite的问题，需要vite解决，那就只能先用上面的取巧方法解决。\n\n![null](https://s2.loli.net/2024/01/08/PpCv4KrsdYwXHVy.png)\n\n## 再一次\n\n你以为到这儿就结束了，不还没有。流水线成功后，为了验证效果，我打开了线上环境。结果还真是屋漏偏逢连夜雨，其他一切正常，热力图没法出来。\n\n![null](https://s2.loli.net/2024/01/08/BktbDMIGqNYop14.png)要疯了\n\n找问题吧。F12调试模式，问题很简单。usa.json文件404。查看本地打包生成的文件，确实没有usa.json。而且源码也没有进行任何路径转化，难怪会404找不到文件了。\n\n![null](http://yzjl2.xyz:8093/media/202304//1681888199.9186964.png)\n\n![null](https://s2.loli.net/2024/01/08/QBwOlhWJGp9Mqrd.png)\n\nvite官网也有说明，确实不支持这种，好在官方提供了另一种懒加载导入功能。\n\n![null](https://s2.loli.net/2024/01/08/wU1zFefxPQctEWm.png)\n\n![null](https://s2.loli.net/2024/01/08/kYFbXhRwEx9dMvu.png)\n\n修改代码，打包，提交，运行一路顺利。打开开发环境，热力图也能正确显示，一切正常。\n\n![null](https://s2.loli.net/2024/01/08/yF7eAJYWI6sKOdj.png)\n\n完结撒花\n","slug":"记一次流水线编译失败引发的一系列问题","published":1,"updated":"2024-01-15T07:28:49.306Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrq64z6x0018soip7hydfnto","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>周二某段时间我正常提交代码触发流水线编译，结果收到了编译失败的提示。解决问题的过程中又不断出现新问题，才有了想要写点什么的倾向。</p>\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><p>通过编译日志很清晰的指出了问题所在</p>\n<p>v-model指令不能用在prop属性上</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/Fz9gYNZoKmE3HD7.png\" alt=\"null\"></p>\n<p>根据错误提示找到bill-card.vue文件，结果发现这个文件的最近改动是在11&#x2F;04日，按理说不应该编译报错才对（当时我还未意识到问题的真正所在，下面再说）</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/G18ThgtpCBANed9.png\" alt=\"null\"></p>\n<p>没办法既然已经报错失败了，就先解决问题吧。查找代码，确实有个v-model作用在了prop上</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/cOZVnUNYm4pCw9r.png\" alt=\"null\"></p>\n<p>修改也很简单，错误提示里也有说明。但是仔细研究发现是我们自己将问题复杂化了，多封装了一层多余的组件，去掉这层组件直接引入原始组件就能解决问题。</p>\n<p>OK，提交代码跑流水线，完美解决！</p>\n<h2 id=\"再次\"><a href=\"#再次\" class=\"headerlink\" title=\"再次\"></a>再次</h2><p><img src=\"https://s2.loli.net/2024/01/08/BPU2ujEdZ7NATeG.png\" alt=\"null\"></p>\n<p>又失败了啊！！！！这又是什么鬼啊？？？</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/MWk61lZdr9FpR43.png\" alt=\"null\"></p>\n<p>单文件组件最少需要一个template或者script 标签？？？这怎么会有问题呢，基本的vue单文件格式肯定不会出错的。</p>\n<p>实在没头绪的情况下本地运行了一次编译。哎，结果编译成功了。没办法只能再回到报错信息里找线索，这次还真发现不同的地方</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/8pab5DyZ9kH2QWw.png\" alt=\"null\"></p>\n<p>流水线上运行的vite版本是3.2.3，而我本地运行的是3.0.9。突然灵光一闪应该是依赖版本的问题。</p>\n<p>先简单介绍下npm依赖包的版本更新规则</p>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>描述</th>\n<th>示例</th>\n<th>示例描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&gt;</td>\n<td>大于某个版本</td>\n<td>&gt;1.2.1</td>\n<td>大于1.2.1版本</td>\n</tr>\n<tr>\n<td>&gt;&#x3D;</td>\n<td>大于等于某个版本</td>\n<td>&gt;&#x3D;1.2.1</td>\n<td>大于等于1.2.1版本</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>小于某个版本</td>\n<td>&lt;1.2.1</td>\n<td>小于1.2.1版本</td>\n</tr>\n<tr>\n<td>&lt;&#x3D;</td>\n<td>小于等于某个版本</td>\n<td>&lt;&#x3D;1.2.1</td>\n<td>小于等于1.2.1版本</td>\n</tr>\n<tr>\n<td>-</td>\n<td>介于两个版本之间</td>\n<td>1.2.1 - 1.4.5</td>\n<td>介于1.2.1和1.4.5之间</td>\n</tr>\n<tr>\n<td>x</td>\n<td>不固定的版本号</td>\n<td>1.3.x</td>\n<td>只要保证主版本号是1，次版本号是3即可</td>\n</tr>\n<tr>\n<td>~</td>\n<td>补丁版本号可增</td>\n<td>~1.3.4</td>\n<td>保证主版本号是1，次版本号是3，补丁版本号大于等于4</td>\n</tr>\n<tr>\n<td>^</td>\n<td>此版本和补丁版本可增</td>\n<td>^1.3.4</td>\n<td>保证主版本号是1，次版本号可以大于等于3，补丁版本号可以大于等于4</td>\n</tr>\n<tr>\n<td>*</td>\n<td>最新版本</td>\n<td>*</td>\n<td>始终安装最新版本</td>\n</tr>\n</tbody></table>\n<p>简单验证下就可以知道是否是版本导致的问题。去掉package.json里所有依赖版本前的符号，彻底固定版本，触发流水线。编译成功！</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/m9hgWyrTfc8GVBs.png\" alt=\"null\"></p>\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2><p>既然确定是版本问题，需要确定到底是哪个依赖包的问题。</p>\n<p>先从显眼的开始——vite（vue3官方推荐的打包工具）</p>\n<p>我本地的vite版本是3.0.9，流水线是3.2.3。那我们先在本地把vite升级到3.2.0看看编译是否报错。</p>\n<p>3.2.0没有任何问题，那就继续升级到最新版本3.2.3再次编译，结果也成功了。那就说明不是vite的问题</p>\n<p>难道没有别的办法了么？不，再次回到我们的编译错误信息那儿</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/Lpy1rAi46eIfJYB.png\" alt=\"null\"></p>\n<p>虽然编译打包用的是vite，但是vite本质上还是引用了vue的编译工具。</p>\n<p>下面我们不是继续升级vue版本了，直接去github上看vue的版本变更记录。</p>\n<p>第一眼就发现了我们最初的错误说明</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/d7uIwW2CA6Db5tc.png\" alt=\"null\"></p>\n<p>但是在3.2.45版本里没发现跟第二次错误相关说明，接着往下找（比较我本地vue依赖版本是3.2.37）。在3.2.42的版本说明里找到相关内容</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/pkmjfQHBAD4IsUR.png\" alt=\"null\"></p>\n<p>在查看它的关联改动后，我蒙了。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/xO8PlGZUBWdmSYp.png\" alt=\"null\"></p>\n<p>完全没有改动什么编译逻辑，只是加了错误提示。如果这么理解也就是说ve-chart.vue这个文件之前就有问题只是没提示出来？？？不符合逻辑。</p>\n<p>不要急，在这条更新说明后面还有个close问题。哎，确实在说明里找到了一个相关问题，查看内容发现跟我们的问题有点类似。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/uXAgsBl9SnpZ6Da.png\" alt=\"null\"></p>\n<p>怎么办？？？当然是验证下，首页本地更新vue到3.2.42版本，运行编译，不出意外的编译失败了。OK，那证明我们之前找的一堆说明是正确的。接下来按照问题里的相关讨论，修改map.js里有关import.meta.url代码</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/2OT4ScNpbElMgoV.png\" alt=\"null\"></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/BN9X41IZirDMCf5.png\" alt=\"null\"></p>\n<p>再次编译，我去，真的成功了。可喜可贺找到问题说在！！！</p>\n<p>那为什么之前没问题呢？因为map.js的最新改动是11&#x2F;14日，目的是优化ve-chart组件打包后的大小。之前有关美国和全球的地图资源都是静态引入，资源文件本身就比较大，打包后又都会被打入一个文件内导致最终体积过大。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/RDfYdirNKT3eFqt.png\" alt=\"null\"></p>\n<p>怎么解决呢？vue说这是vite的问题，需要vite解决，那就只能先用上面的取巧方法解决。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/PpCv4KrsdYwXHVy.png\" alt=\"null\"></p>\n<h2 id=\"再一次\"><a href=\"#再一次\" class=\"headerlink\" title=\"再一次\"></a>再一次</h2><p>你以为到这儿就结束了，不还没有。流水线成功后，为了验证效果，我打开了线上环境。结果还真是屋漏偏逢连夜雨，其他一切正常，热力图没法出来。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/BktbDMIGqNYop14.png\" alt=\"null\">要疯了</p>\n<p>找问题吧。F12调试模式，问题很简单。usa.json文件404。查看本地打包生成的文件，确实没有usa.json。而且源码也没有进行任何路径转化，难怪会404找不到文件了。</p>\n<p><img src=\"http://yzjl2.xyz:8093/media/202304//1681888199.9186964.png\" alt=\"null\"></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/QBwOlhWJGp9Mqrd.png\" alt=\"null\"></p>\n<p>vite官网也有说明，确实不支持这种，好在官方提供了另一种懒加载导入功能。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/wU1zFefxPQctEWm.png\" alt=\"null\"></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/kYFbXhRwEx9dMvu.png\" alt=\"null\"></p>\n<p>修改代码，打包，提交，运行一路顺利。打开开发环境，热力图也能正确显示，一切正常。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/yF7eAJYWI6sKOdj.png\" alt=\"null\"></p>\n<p>完结撒花</p>\n","site":{"data":{}},"length":1490,"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>周二某段时间我正常提交代码触发流水线编译，结果收到了编译失败的提示。解决问题的过程中又不断出现新问题，才有了想要写点什么的倾向。</p>\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><p>通过编译日志很清晰的指出了问题所在</p>\n<p>v-model指令不能用在prop属性上</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/Fz9gYNZoKmE3HD7.png\" alt=\"null\"></p>\n<p>根据错误提示找到bill-card.vue文件，结果发现这个文件的最近改动是在11&#x2F;04日，按理说不应该编译报错才对（当时我还未意识到问题的真正所在，下面再说）</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/G18ThgtpCBANed9.png\" alt=\"null\"></p>\n<p>没办法既然已经报错失败了，就先解决问题吧。查找代码，确实有个v-model作用在了prop上</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/cOZVnUNYm4pCw9r.png\" alt=\"null\"></p>\n<p>修改也很简单，错误提示里也有说明。但是仔细研究发现是我们自己将问题复杂化了，多封装了一层多余的组件，去掉这层组件直接引入原始组件就能解决问题。</p>\n<p>OK，提交代码跑流水线，完美解决！</p>\n<h2 id=\"再次\"><a href=\"#再次\" class=\"headerlink\" title=\"再次\"></a>再次</h2><p><img src=\"https://s2.loli.net/2024/01/08/BPU2ujEdZ7NATeG.png\" alt=\"null\"></p>\n<p>又失败了啊！！！！这又是什么鬼啊？？？</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/MWk61lZdr9FpR43.png\" alt=\"null\"></p>\n<p>单文件组件最少需要一个template或者script 标签？？？这怎么会有问题呢，基本的vue单文件格式肯定不会出错的。</p>\n<p>实在没头绪的情况下本地运行了一次编译。哎，结果编译成功了。没办法只能再回到报错信息里找线索，这次还真发现不同的地方</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/8pab5DyZ9kH2QWw.png\" alt=\"null\"></p>\n<p>流水线上运行的vite版本是3.2.3，而我本地运行的是3.0.9。突然灵光一闪应该是依赖版本的问题。</p>\n<p>先简单介绍下npm依赖包的版本更新规则</p>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>描述</th>\n<th>示例</th>\n<th>示例描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&gt;</td>\n<td>大于某个版本</td>\n<td>&gt;1.2.1</td>\n<td>大于1.2.1版本</td>\n</tr>\n<tr>\n<td>&gt;&#x3D;</td>\n<td>大于等于某个版本</td>\n<td>&gt;&#x3D;1.2.1</td>\n<td>大于等于1.2.1版本</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>小于某个版本</td>\n<td>&lt;1.2.1</td>\n<td>小于1.2.1版本</td>\n</tr>\n<tr>\n<td>&lt;&#x3D;</td>\n<td>小于等于某个版本</td>\n<td>&lt;&#x3D;1.2.1</td>\n<td>小于等于1.2.1版本</td>\n</tr>\n<tr>\n<td>-</td>\n<td>介于两个版本之间</td>\n<td>1.2.1 - 1.4.5</td>\n<td>介于1.2.1和1.4.5之间</td>\n</tr>\n<tr>\n<td>x</td>\n<td>不固定的版本号</td>\n<td>1.3.x</td>\n<td>只要保证主版本号是1，次版本号是3即可</td>\n</tr>\n<tr>\n<td>~</td>\n<td>补丁版本号可增</td>\n<td>~1.3.4</td>\n<td>保证主版本号是1，次版本号是3，补丁版本号大于等于4</td>\n</tr>\n<tr>\n<td>^</td>\n<td>此版本和补丁版本可增</td>\n<td>^1.3.4</td>\n<td>保证主版本号是1，次版本号可以大于等于3，补丁版本号可以大于等于4</td>\n</tr>\n<tr>\n<td>*</td>\n<td>最新版本</td>\n<td>*</td>\n<td>始终安装最新版本</td>\n</tr>\n</tbody></table>\n<p>简单验证下就可以知道是否是版本导致的问题。去掉package.json里所有依赖版本前的符号，彻底固定版本，触发流水线。编译成功！</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/m9hgWyrTfc8GVBs.png\" alt=\"null\"></p>\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2><p>既然确定是版本问题，需要确定到底是哪个依赖包的问题。</p>\n<p>先从显眼的开始——vite（vue3官方推荐的打包工具）</p>\n<p>我本地的vite版本是3.0.9，流水线是3.2.3。那我们先在本地把vite升级到3.2.0看看编译是否报错。</p>\n<p>3.2.0没有任何问题，那就继续升级到最新版本3.2.3再次编译，结果也成功了。那就说明不是vite的问题</p>\n<p>难道没有别的办法了么？不，再次回到我们的编译错误信息那儿</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/Lpy1rAi46eIfJYB.png\" alt=\"null\"></p>\n<p>虽然编译打包用的是vite，但是vite本质上还是引用了vue的编译工具。</p>\n<p>下面我们不是继续升级vue版本了，直接去github上看vue的版本变更记录。</p>\n<p>第一眼就发现了我们最初的错误说明</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/d7uIwW2CA6Db5tc.png\" alt=\"null\"></p>\n<p>但是在3.2.45版本里没发现跟第二次错误相关说明，接着往下找（比较我本地vue依赖版本是3.2.37）。在3.2.42的版本说明里找到相关内容</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/pkmjfQHBAD4IsUR.png\" alt=\"null\"></p>\n<p>在查看它的关联改动后，我蒙了。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/xO8PlGZUBWdmSYp.png\" alt=\"null\"></p>\n<p>完全没有改动什么编译逻辑，只是加了错误提示。如果这么理解也就是说ve-chart.vue这个文件之前就有问题只是没提示出来？？？不符合逻辑。</p>\n<p>不要急，在这条更新说明后面还有个close问题。哎，确实在说明里找到了一个相关问题，查看内容发现跟我们的问题有点类似。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/uXAgsBl9SnpZ6Da.png\" alt=\"null\"></p>\n<p>怎么办？？？当然是验证下，首页本地更新vue到3.2.42版本，运行编译，不出意外的编译失败了。OK，那证明我们之前找的一堆说明是正确的。接下来按照问题里的相关讨论，修改map.js里有关import.meta.url代码</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/2OT4ScNpbElMgoV.png\" alt=\"null\"></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/BN9X41IZirDMCf5.png\" alt=\"null\"></p>\n<p>再次编译，我去，真的成功了。可喜可贺找到问题说在！！！</p>\n<p>那为什么之前没问题呢？因为map.js的最新改动是11&#x2F;14日，目的是优化ve-chart组件打包后的大小。之前有关美国和全球的地图资源都是静态引入，资源文件本身就比较大，打包后又都会被打入一个文件内导致最终体积过大。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/RDfYdirNKT3eFqt.png\" alt=\"null\"></p>\n<p>怎么解决呢？vue说这是vite的问题，需要vite解决，那就只能先用上面的取巧方法解决。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/PpCv4KrsdYwXHVy.png\" alt=\"null\"></p>\n<h2 id=\"再一次\"><a href=\"#再一次\" class=\"headerlink\" title=\"再一次\"></a>再一次</h2><p>你以为到这儿就结束了，不还没有。流水线成功后，为了验证效果，我打开了线上环境。结果还真是屋漏偏逢连夜雨，其他一切正常，热力图没法出来。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/BktbDMIGqNYop14.png\" alt=\"null\">要疯了</p>\n<p>找问题吧。F12调试模式，问题很简单。usa.json文件404。查看本地打包生成的文件，确实没有usa.json。而且源码也没有进行任何路径转化，难怪会404找不到文件了。</p>\n<p><img src=\"http://yzjl2.xyz:8093/media/202304//1681888199.9186964.png\" alt=\"null\"></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/QBwOlhWJGp9Mqrd.png\" alt=\"null\"></p>\n<p>vite官网也有说明，确实不支持这种，好在官方提供了另一种懒加载导入功能。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/wU1zFefxPQctEWm.png\" alt=\"null\"></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/kYFbXhRwEx9dMvu.png\" alt=\"null\"></p>\n<p>修改代码，打包，提交，运行一路顺利。打开开发环境，热力图也能正确显示，一切正常。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/yF7eAJYWI6sKOdj.png\" alt=\"null\"></p>\n<p>完结撒花</p>\n"},{"title":"零基础运行Cesium地球","date":"2022-03-01T06:33:46.000Z","_content":"\n## 什么Cesiumjs\n\nCesium 是一个跨平台、跨浏览器的展示三维地球和地图的 javascript 库。\nCesium 使用WebGL 来进行硬件加速图形，使用时不需要任何插件支持，但是浏览器必须支持WebGL;\nCesium是基于Apache2.0 许可的开源程序。它可以免费的用于商业和非商业用途。\n\n### 什么是WebGL\n\nWebGL（Web图形库）是一个JavaScript API，可在任何兼容的Web浏览器中渲染高性能的交互式3D和2D图形，而无需使用插件。现在市面上大部分浏览器都支持WebGL。详情见下图\n\n![null](https://s2.loli.net/2024/01/08/gZ6lTXjYLVh1wG8.png)\n\n### 环境搭建以及helloworld\n\nCesium是纯前端的代码，官方给出的源代码中，配套了nodejs的server端，以及可以通过nodejs进行安装部署。实际上也可以将Cesium部署进入tomcat（geoserver）、apache、nginx等服务器中。\n\n#### 运行官方helloworld\n\n1、下载安装[nodejs](https://nodejs.org/en/download/)\n2、下载Cesium源码解压\n3、进入根目录，运行`npm install、node server.cjs`\n\n![null](https://s2.loli.net/2024/01/08/dWYAbgIsHSTmuBc.png)\n打开浏览器，输入`http://localhost:8080`看到下图就是成功\n\n![null](https://s2.loli.net/2024/01/08/GDYs6z2uSEITpdb.png)\n输入完整链接`[http://localhost:8080/Apps/HelloWorld.html](http://localhost:8080/Apps/HelloWorld.html)`访问helloworld案例\n\n![null](https://s2.loli.net/2024/01/08/kC37BDUYLA2g6RX.png)\n\n环境搭建好之后，输入 http://localhost:8080/ 有两个链接非常重要\n[Documentation](http://localhost:8080/Build/Documentation/index.html)：里面是Cesium的完整的API说明\n[Sandcastle](http://localhost:8080/Apps/Sandcastle/index.html)：一个沙箱，可以查看最新的Cesium特性和编写代码测试\n\n## 使用Cesium开发\n\n#### 创建文件\n\n```\nmkdir cesium-demo`\n`cd cesium-demo\n```\n\n#### 引入cesium资源（三种方式）\n\n1. 将Cesium源码中的Build文件夹拷到cesium-demo下，直接引入本地资源\n\n2. cdn引入线上资源\n\n3. 使用 Webpack、Parcel 或 Rollup 等构建应用程序时，\n\n   ```\n    npm install cesium\n   ```\n\n   安装依赖打包引入\n\n   #### 创建html文件\n\n   ```\n   vi index.html\n   ```\n\n   打开编辑器，（这里以cdn资源为例）\n\n   新建容器dom\n\n   ```html\n   <div id=\"cesiumContainer\"></div>\n   ```\n\n   引入js和css资源\n\n   ```html\n   <script src=\"https://cesium.com/downloads/cesiumjs/releases/1.90/Build/Cesium/Cesium.js\"></script>\n   <link href=\"https://cesium.com/downloads/cesiumjs/releases/1.90/Build/Cesium/Widgets/widgets.css\"rel=\"stylesheet\">\n   ```\n\n   初始化地图实例\n\n   ```javascript\n   var viewer=newCesium.Viewer(\"cesiumContainer\");\n   ```\n\n   ok，简单的地球场景就完成了，打开浏览器查看下吧。\n\n   ### 界面介绍和控件隐藏\n\n![null](https://s2.loli.net/2024/01/08/yQAuCYHlMWeF1NB.png)\n\n1. 查找位置工具，查找到之后会将镜头对准找到的地址，默认使用bing地图\n\n2. 视角返回初始位置\n\n3. 选择视角的模式，有三种：3D，2D，哥伦布视图(CV)\n\n4. 图层选择器，选择要显示的地图服务和地形服务\n\n5. 帮助按钮，显示默认的地图控制帮助\n\n6. 动画器件，控制视图动画的播放速度\n\n7. 时间线,指示当前时间，并允许用户跳到特定的时间\n\n8. 版权显示，显示数据归属，必选\n\n9. 全屏按钮\n\n   ### 隐藏上述小控件\n\n   ##### 方法1 通过js控制\n\n   界面上默认的小控件可以通过在初始化Viewer的时候设置相应的属性来关闭。具体属性可以查看文档。\n\n   ```javascript\n   const viewer = new Cesium.Viewer('cesiumContainer', {\n   terrainProvider: Cesium.createWorldTerrain(), // 高分辨率地形\n   geocoder:false,  // 查找控件\n   homeButton:false, // 返回初始位置控件\n   sceneModePicker:false, // 选择视角孔金\n   baseLayerPicker:false, // 图层选择控件\n   navigationHelpButton:false, // 帮助按钮控件\n   animation:false, // 动画控件\n   timeline:false, // 时间轴控件\n   fullscreenButton:false, // 全屏控件\n   creditContainer: 'credit'  // 设置版权控件的父级id(需要手动创建一个对应的id的div容器添加到页面中，使用css隐藏父元素)\n   });\n   viewer._cesiumWidget._creditContainer.style.display = \"none\"; // 和creditContainer两者选其一\n   ```\n\n   ##### 方法2 通过css隐藏\n\n   ```css\n      .cesium-viewer-toolbar,             /* 右上角按钮组 */\n      .cesium-viewer-animationContainer,  /* 左下角动画控件 */\n      .cesium-viewer-timelineContainer,   /* 时间线 */\n      .cesium-viewer-bottom               /* logo信息 */\n      {\n        display: none;\n      }\n      .cesium-viewer-fullscreenContainer  /* 全屏按钮 */\n      { position: absolute; top: -999em;  }\n   ```\n\n   > 注：全屏按钮不能通过display:none的方式来达到隐藏的目的，这是因为生成的按钮控件的行内样式设置了display属性，会覆盖引入的css属性\n\n到此一个基本demo就完成了。剩下的就是使用官方提供的工具，完成一些示例，在这些的基础上，自己定制一些内容，或者项目过程中自己的一些思路，以及发现问题，解决问题的一些经验记录。\n\n## 疑问与解答\n\n1. 官方示例引入css有问题\n\n![null](https://s2.loli.net/2024/01/08/3d9P1weOHjGVRCz.png)\n\n![null](https://s2.loli.net/2024/01/08/lMe63wyg49NXhPs.png)\n\n### 两种解决方式\n\n1. webpack配置中设置`alias`别名cesium指向具体文件路径\n\n   ```bash\n        然后修改引入路径  \n       import \"cesium/Widgets/widgets.css\";\n   ```\n\n![null](https://s2.loli.net/2024/01/08/CjqLPGvfRmTa317.png)\n\n1. 直接使用相对路径引入\n\n   ```bash\n     import \"./node_modules/cesium/Source/Widgets/widgets.css\";\n   ```\n\n2. 在Vue中使用遇到的问题优化\n\n- `重要 重要 重要`不要把cesium里的对象如viewer，entity保存到data数据里，会导致劫持数据过万浏览器直接卡崩溃。\n\n  ```bash\n   如果需要通信的话，最简单的方法就是挂载到window对象上。\n  ```\n\n- 添加本地图片，如使用图片作为material，需要使用import导入图片再将图片赋值给material\n\n  ```javascript\n  import rotate from '../assets/logo.png'\n  viewer.entities.add({\n  rectangle: {\n    coordinates: Cesium.Rectangle.fromDegrees(-92.0, 30.0, -76.0, 40.0),\n    material: rotate,\n    rotation: new Cesium.CallbackProperty(getRotationValue, false),\n    stRotation: new Cesium.CallbackProperty(getRotationValue, false),\n    classificationType: Cesium.ClassificationType.TERRAIN,\n  },\n  })\n  ```\n\n- 在webpack中设置别名时，目录结构最好只到最外层目录`letcesiumSource='./node_modules/cesium'`，否则在编写代码过程中会没有cesium相关智能提示，很难受！！！\n\n  ```javascript\n  import * as Cesium from 'cesium'; // 这样引入就可以实现代码智能提示\n  ```\n\n![null](https://s2.loli.net/2024/01/08/D8jn1NhoY3cOQya.png)\n\n### 参考资料\n\n- [cesium官方文档](https://cesium.com/)：cesium的官方教程\n- [cesium官方API](https://cesium.com/learn/cesiumjs/ref-doc/)：同样是cesium的官方API文档\n- [cesium中文网](http://cesium.xin/)：cesium中文网，里面有系列教程\n- [cesium API中文文档](http://cesium.xin/cesium/cn/Documentation1.62/)：翻译的官方文档，不太全初步够用\n- [cesium中文社区](http://cesiumcn.org/)：中文cesium社区，有教程","source":"_posts/零基础运行Cesium地球.md","raw":"---\ntitle: 零基础运行Cesium地球\ndate: 2022-03-01 14:33:46\ntags:\n    - webgl\n    - cesium\n---\n\n## 什么Cesiumjs\n\nCesium 是一个跨平台、跨浏览器的展示三维地球和地图的 javascript 库。\nCesium 使用WebGL 来进行硬件加速图形，使用时不需要任何插件支持，但是浏览器必须支持WebGL;\nCesium是基于Apache2.0 许可的开源程序。它可以免费的用于商业和非商业用途。\n\n### 什么是WebGL\n\nWebGL（Web图形库）是一个JavaScript API，可在任何兼容的Web浏览器中渲染高性能的交互式3D和2D图形，而无需使用插件。现在市面上大部分浏览器都支持WebGL。详情见下图\n\n![null](https://s2.loli.net/2024/01/08/gZ6lTXjYLVh1wG8.png)\n\n### 环境搭建以及helloworld\n\nCesium是纯前端的代码，官方给出的源代码中，配套了nodejs的server端，以及可以通过nodejs进行安装部署。实际上也可以将Cesium部署进入tomcat（geoserver）、apache、nginx等服务器中。\n\n#### 运行官方helloworld\n\n1、下载安装[nodejs](https://nodejs.org/en/download/)\n2、下载Cesium源码解压\n3、进入根目录，运行`npm install、node server.cjs`\n\n![null](https://s2.loli.net/2024/01/08/dWYAbgIsHSTmuBc.png)\n打开浏览器，输入`http://localhost:8080`看到下图就是成功\n\n![null](https://s2.loli.net/2024/01/08/GDYs6z2uSEITpdb.png)\n输入完整链接`[http://localhost:8080/Apps/HelloWorld.html](http://localhost:8080/Apps/HelloWorld.html)`访问helloworld案例\n\n![null](https://s2.loli.net/2024/01/08/kC37BDUYLA2g6RX.png)\n\n环境搭建好之后，输入 http://localhost:8080/ 有两个链接非常重要\n[Documentation](http://localhost:8080/Build/Documentation/index.html)：里面是Cesium的完整的API说明\n[Sandcastle](http://localhost:8080/Apps/Sandcastle/index.html)：一个沙箱，可以查看最新的Cesium特性和编写代码测试\n\n## 使用Cesium开发\n\n#### 创建文件\n\n```\nmkdir cesium-demo`\n`cd cesium-demo\n```\n\n#### 引入cesium资源（三种方式）\n\n1. 将Cesium源码中的Build文件夹拷到cesium-demo下，直接引入本地资源\n\n2. cdn引入线上资源\n\n3. 使用 Webpack、Parcel 或 Rollup 等构建应用程序时，\n\n   ```\n    npm install cesium\n   ```\n\n   安装依赖打包引入\n\n   #### 创建html文件\n\n   ```\n   vi index.html\n   ```\n\n   打开编辑器，（这里以cdn资源为例）\n\n   新建容器dom\n\n   ```html\n   <div id=\"cesiumContainer\"></div>\n   ```\n\n   引入js和css资源\n\n   ```html\n   <script src=\"https://cesium.com/downloads/cesiumjs/releases/1.90/Build/Cesium/Cesium.js\"></script>\n   <link href=\"https://cesium.com/downloads/cesiumjs/releases/1.90/Build/Cesium/Widgets/widgets.css\"rel=\"stylesheet\">\n   ```\n\n   初始化地图实例\n\n   ```javascript\n   var viewer=newCesium.Viewer(\"cesiumContainer\");\n   ```\n\n   ok，简单的地球场景就完成了，打开浏览器查看下吧。\n\n   ### 界面介绍和控件隐藏\n\n![null](https://s2.loli.net/2024/01/08/yQAuCYHlMWeF1NB.png)\n\n1. 查找位置工具，查找到之后会将镜头对准找到的地址，默认使用bing地图\n\n2. 视角返回初始位置\n\n3. 选择视角的模式，有三种：3D，2D，哥伦布视图(CV)\n\n4. 图层选择器，选择要显示的地图服务和地形服务\n\n5. 帮助按钮，显示默认的地图控制帮助\n\n6. 动画器件，控制视图动画的播放速度\n\n7. 时间线,指示当前时间，并允许用户跳到特定的时间\n\n8. 版权显示，显示数据归属，必选\n\n9. 全屏按钮\n\n   ### 隐藏上述小控件\n\n   ##### 方法1 通过js控制\n\n   界面上默认的小控件可以通过在初始化Viewer的时候设置相应的属性来关闭。具体属性可以查看文档。\n\n   ```javascript\n   const viewer = new Cesium.Viewer('cesiumContainer', {\n   terrainProvider: Cesium.createWorldTerrain(), // 高分辨率地形\n   geocoder:false,  // 查找控件\n   homeButton:false, // 返回初始位置控件\n   sceneModePicker:false, // 选择视角孔金\n   baseLayerPicker:false, // 图层选择控件\n   navigationHelpButton:false, // 帮助按钮控件\n   animation:false, // 动画控件\n   timeline:false, // 时间轴控件\n   fullscreenButton:false, // 全屏控件\n   creditContainer: 'credit'  // 设置版权控件的父级id(需要手动创建一个对应的id的div容器添加到页面中，使用css隐藏父元素)\n   });\n   viewer._cesiumWidget._creditContainer.style.display = \"none\"; // 和creditContainer两者选其一\n   ```\n\n   ##### 方法2 通过css隐藏\n\n   ```css\n      .cesium-viewer-toolbar,             /* 右上角按钮组 */\n      .cesium-viewer-animationContainer,  /* 左下角动画控件 */\n      .cesium-viewer-timelineContainer,   /* 时间线 */\n      .cesium-viewer-bottom               /* logo信息 */\n      {\n        display: none;\n      }\n      .cesium-viewer-fullscreenContainer  /* 全屏按钮 */\n      { position: absolute; top: -999em;  }\n   ```\n\n   > 注：全屏按钮不能通过display:none的方式来达到隐藏的目的，这是因为生成的按钮控件的行内样式设置了display属性，会覆盖引入的css属性\n\n到此一个基本demo就完成了。剩下的就是使用官方提供的工具，完成一些示例，在这些的基础上，自己定制一些内容，或者项目过程中自己的一些思路，以及发现问题，解决问题的一些经验记录。\n\n## 疑问与解答\n\n1. 官方示例引入css有问题\n\n![null](https://s2.loli.net/2024/01/08/3d9P1weOHjGVRCz.png)\n\n![null](https://s2.loli.net/2024/01/08/lMe63wyg49NXhPs.png)\n\n### 两种解决方式\n\n1. webpack配置中设置`alias`别名cesium指向具体文件路径\n\n   ```bash\n        然后修改引入路径  \n       import \"cesium/Widgets/widgets.css\";\n   ```\n\n![null](https://s2.loli.net/2024/01/08/CjqLPGvfRmTa317.png)\n\n1. 直接使用相对路径引入\n\n   ```bash\n     import \"./node_modules/cesium/Source/Widgets/widgets.css\";\n   ```\n\n2. 在Vue中使用遇到的问题优化\n\n- `重要 重要 重要`不要把cesium里的对象如viewer，entity保存到data数据里，会导致劫持数据过万浏览器直接卡崩溃。\n\n  ```bash\n   如果需要通信的话，最简单的方法就是挂载到window对象上。\n  ```\n\n- 添加本地图片，如使用图片作为material，需要使用import导入图片再将图片赋值给material\n\n  ```javascript\n  import rotate from '../assets/logo.png'\n  viewer.entities.add({\n  rectangle: {\n    coordinates: Cesium.Rectangle.fromDegrees(-92.0, 30.0, -76.0, 40.0),\n    material: rotate,\n    rotation: new Cesium.CallbackProperty(getRotationValue, false),\n    stRotation: new Cesium.CallbackProperty(getRotationValue, false),\n    classificationType: Cesium.ClassificationType.TERRAIN,\n  },\n  })\n  ```\n\n- 在webpack中设置别名时，目录结构最好只到最外层目录`letcesiumSource='./node_modules/cesium'`，否则在编写代码过程中会没有cesium相关智能提示，很难受！！！\n\n  ```javascript\n  import * as Cesium from 'cesium'; // 这样引入就可以实现代码智能提示\n  ```\n\n![null](https://s2.loli.net/2024/01/08/D8jn1NhoY3cOQya.png)\n\n### 参考资料\n\n- [cesium官方文档](https://cesium.com/)：cesium的官方教程\n- [cesium官方API](https://cesium.com/learn/cesiumjs/ref-doc/)：同样是cesium的官方API文档\n- [cesium中文网](http://cesium.xin/)：cesium中文网，里面有系列教程\n- [cesium API中文文档](http://cesium.xin/cesium/cn/Documentation1.62/)：翻译的官方文档，不太全初步够用\n- [cesium中文社区](http://cesiumcn.org/)：中文cesium社区，有教程","slug":"零基础运行Cesium地球","published":1,"updated":"2024-01-15T07:25:27.073Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrq64z6y001bsoiph6hhcyov","content":"<h2 id=\"什么Cesiumjs\"><a href=\"#什么Cesiumjs\" class=\"headerlink\" title=\"什么Cesiumjs\"></a>什么Cesiumjs</h2><p>Cesium 是一个跨平台、跨浏览器的展示三维地球和地图的 javascript 库。<br>Cesium 使用WebGL 来进行硬件加速图形，使用时不需要任何插件支持，但是浏览器必须支持WebGL;<br>Cesium是基于Apache2.0 许可的开源程序。它可以免费的用于商业和非商业用途。</p>\n<h3 id=\"什么是WebGL\"><a href=\"#什么是WebGL\" class=\"headerlink\" title=\"什么是WebGL\"></a>什么是WebGL</h3><p>WebGL（Web图形库）是一个JavaScript API，可在任何兼容的Web浏览器中渲染高性能的交互式3D和2D图形，而无需使用插件。现在市面上大部分浏览器都支持WebGL。详情见下图</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/gZ6lTXjYLVh1wG8.png\" alt=\"null\"></p>\n<h3 id=\"环境搭建以及helloworld\"><a href=\"#环境搭建以及helloworld\" class=\"headerlink\" title=\"环境搭建以及helloworld\"></a>环境搭建以及helloworld</h3><p>Cesium是纯前端的代码，官方给出的源代码中，配套了nodejs的server端，以及可以通过nodejs进行安装部署。实际上也可以将Cesium部署进入tomcat（geoserver）、apache、nginx等服务器中。</p>\n<h4 id=\"运行官方helloworld\"><a href=\"#运行官方helloworld\" class=\"headerlink\" title=\"运行官方helloworld\"></a>运行官方helloworld</h4><p>1、下载安装<a href=\"https://nodejs.org/en/download/\">nodejs</a><br>2、下载Cesium源码解压<br>3、进入根目录，运行<code>npm install、node server.cjs</code></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/dWYAbgIsHSTmuBc.png\" alt=\"null\"><br>打开浏览器，输入<code>http://localhost:8080</code>看到下图就是成功</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/GDYs6z2uSEITpdb.png\" alt=\"null\"><br>输入完整链接<code>[http://localhost:8080/Apps/HelloWorld.html](http://localhost:8080/Apps/HelloWorld.html)</code>访问helloworld案例</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/kC37BDUYLA2g6RX.png\" alt=\"null\"></p>\n<p>环境搭建好之后，输入 <a href=\"http://localhost:8080/\">http://localhost:8080/</a> 有两个链接非常重要<br><a href=\"http://localhost:8080/Build/Documentation/index.html\">Documentation</a>：里面是Cesium的完整的API说明<br><a href=\"http://localhost:8080/Apps/Sandcastle/index.html\">Sandcastle</a>：一个沙箱，可以查看最新的Cesium特性和编写代码测试</p>\n<h2 id=\"使用Cesium开发\"><a href=\"#使用Cesium开发\" class=\"headerlink\" title=\"使用Cesium开发\"></a>使用Cesium开发</h2><h4 id=\"创建文件\"><a href=\"#创建文件\" class=\"headerlink\" title=\"创建文件\"></a>创建文件</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir cesium-demo`</span><br><span class=\"line\">`cd cesium-demo</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"引入cesium资源（三种方式）\"><a href=\"#引入cesium资源（三种方式）\" class=\"headerlink\" title=\"引入cesium资源（三种方式）\"></a>引入cesium资源（三种方式）</h4><ol>\n<li><p>将Cesium源码中的Build文件夹拷到cesium-demo下，直接引入本地资源</p>\n</li>\n<li><p>cdn引入线上资源</p>\n</li>\n<li><p>使用 Webpack、Parcel 或 Rollup 等构建应用程序时，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install cesium</span><br></pre></td></tr></table></figure>\n\n<p>安装依赖打包引入</p>\n<h4 id=\"创建html文件\"><a href=\"#创建html文件\" class=\"headerlink\" title=\"创建html文件\"></a>创建html文件</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi index.html</span><br></pre></td></tr></table></figure>\n\n<p>打开编辑器，（这里以cdn资源为例）</p>\n<p>新建容器dom</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;cesiumContainer&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>引入js和css资源</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cesium.com/downloads/cesiumjs/releases/1.90/Build/Cesium/Cesium.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://cesium.com/downloads/cesiumjs/releases/1.90/Build/Cesium/Widgets/widgets.css&quot;</span><span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>初始化地图实例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> viewer=newCesium.<span class=\"title class_\">Viewer</span>(<span class=\"string\">&quot;cesiumContainer&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>ok，简单的地球场景就完成了，打开浏览器查看下吧。</p>\n<h3 id=\"界面介绍和控件隐藏\"><a href=\"#界面介绍和控件隐藏\" class=\"headerlink\" title=\"界面介绍和控件隐藏\"></a>界面介绍和控件隐藏</h3></li>\n</ol>\n<p><img src=\"https://s2.loli.net/2024/01/08/yQAuCYHlMWeF1NB.png\" alt=\"null\"></p>\n<ol>\n<li><p>查找位置工具，查找到之后会将镜头对准找到的地址，默认使用bing地图</p>\n</li>\n<li><p>视角返回初始位置</p>\n</li>\n<li><p>选择视角的模式，有三种：3D，2D，哥伦布视图(CV)</p>\n</li>\n<li><p>图层选择器，选择要显示的地图服务和地形服务</p>\n</li>\n<li><p>帮助按钮，显示默认的地图控制帮助</p>\n</li>\n<li><p>动画器件，控制视图动画的播放速度</p>\n</li>\n<li><p>时间线,指示当前时间，并允许用户跳到特定的时间</p>\n</li>\n<li><p>版权显示，显示数据归属，必选</p>\n</li>\n<li><p>全屏按钮</p>\n<h3 id=\"隐藏上述小控件\"><a href=\"#隐藏上述小控件\" class=\"headerlink\" title=\"隐藏上述小控件\"></a>隐藏上述小控件</h3><h5 id=\"方法1-通过js控制\"><a href=\"#方法1-通过js控制\" class=\"headerlink\" title=\"方法1 通过js控制\"></a>方法1 通过js控制</h5><p>界面上默认的小控件可以通过在初始化Viewer的时候设置相应的属性来关闭。具体属性可以查看文档。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> viewer = <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">Viewer</span>(<span class=\"string\">&#x27;cesiumContainer&#x27;</span>, &#123;</span><br><span class=\"line\"><span class=\"attr\">terrainProvider</span>: <span class=\"title class_\">Cesium</span>.<span class=\"title function_\">createWorldTerrain</span>(), <span class=\"comment\">// 高分辨率地形</span></span><br><span class=\"line\"><span class=\"attr\">geocoder</span>:<span class=\"literal\">false</span>,  <span class=\"comment\">// 查找控件</span></span><br><span class=\"line\"><span class=\"attr\">homeButton</span>:<span class=\"literal\">false</span>, <span class=\"comment\">// 返回初始位置控件</span></span><br><span class=\"line\"><span class=\"attr\">sceneModePicker</span>:<span class=\"literal\">false</span>, <span class=\"comment\">// 选择视角孔金</span></span><br><span class=\"line\"><span class=\"attr\">baseLayerPicker</span>:<span class=\"literal\">false</span>, <span class=\"comment\">// 图层选择控件</span></span><br><span class=\"line\"><span class=\"attr\">navigationHelpButton</span>:<span class=\"literal\">false</span>, <span class=\"comment\">// 帮助按钮控件</span></span><br><span class=\"line\"><span class=\"attr\">animation</span>:<span class=\"literal\">false</span>, <span class=\"comment\">// 动画控件</span></span><br><span class=\"line\"><span class=\"attr\">timeline</span>:<span class=\"literal\">false</span>, <span class=\"comment\">// 时间轴控件</span></span><br><span class=\"line\"><span class=\"attr\">fullscreenButton</span>:<span class=\"literal\">false</span>, <span class=\"comment\">// 全屏控件</span></span><br><span class=\"line\"><span class=\"attr\">creditContainer</span>: <span class=\"string\">&#x27;credit&#x27;</span>  <span class=\"comment\">// 设置版权控件的父级id(需要手动创建一个对应的id的div容器添加到页面中，使用css隐藏父元素)</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">viewer.<span class=\"property\">_cesiumWidget</span>.<span class=\"property\">_creditContainer</span>.<span class=\"property\">style</span>.<span class=\"property\">display</span> = <span class=\"string\">&quot;none&quot;</span>; <span class=\"comment\">// 和creditContainer两者选其一</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"方法2-通过css隐藏\"><a href=\"#方法2-通过css隐藏\" class=\"headerlink\" title=\"方法2 通过css隐藏\"></a>方法2 通过css隐藏</h5><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.cesium-viewer-toolbar</span>,             <span class=\"comment\">/* 右上角按钮组 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.cesium-viewer-animationContainer</span>,  <span class=\"comment\">/* 左下角动画控件 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.cesium-viewer-timelineContainer</span>,   <span class=\"comment\">/* 时间线 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.cesium-viewer-bottom</span>               <span class=\"comment\">/* logo信息 */</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.cesium-viewer-fullscreenContainer</span>  <span class=\"comment\">/* 全屏按钮 */</span></span><br><span class=\"line\">&#123; <span class=\"attribute\">position</span>: absolute; <span class=\"attribute\">top</span>: -<span class=\"number\">999em</span>;  &#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注：全屏按钮不能通过display:none的方式来达到隐藏的目的，这是因为生成的按钮控件的行内样式设置了display属性，会覆盖引入的css属性</p>\n</blockquote>\n</li>\n</ol>\n<p>到此一个基本demo就完成了。剩下的就是使用官方提供的工具，完成一些示例，在这些的基础上，自己定制一些内容，或者项目过程中自己的一些思路，以及发现问题，解决问题的一些经验记录。</p>\n<h2 id=\"疑问与解答\"><a href=\"#疑问与解答\" class=\"headerlink\" title=\"疑问与解答\"></a>疑问与解答</h2><ol>\n<li>官方示例引入css有问题</li>\n</ol>\n<p><img src=\"https://s2.loli.net/2024/01/08/3d9P1weOHjGVRCz.png\" alt=\"null\"></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/lMe63wyg49NXhPs.png\" alt=\"null\"></p>\n<h3 id=\"两种解决方式\"><a href=\"#两种解决方式\" class=\"headerlink\" title=\"两种解决方式\"></a>两种解决方式</h3><ol>\n<li><p>webpack配置中设置<code>alias</code>别名cesium指向具体文件路径</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 然后修改引入路径  </span><br><span class=\"line\">import <span class=\"string\">&quot;cesium/Widgets/widgets.css&quot;</span>;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://s2.loli.net/2024/01/08/CjqLPGvfRmTa317.png\" alt=\"null\"></p>\n<ol>\n<li><p>直接使用相对路径引入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import <span class=\"string\">&quot;./node_modules/cesium/Source/Widgets/widgets.css&quot;</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在Vue中使用遇到的问题优化</p>\n</li>\n</ol>\n<ul>\n<li><p><code>重要 重要 重要</code>不要把cesium里的对象如viewer，entity保存到data数据里，会导致劫持数据过万浏览器直接卡崩溃。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果需要通信的话，最简单的方法就是挂载到window对象上。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加本地图片，如使用图片作为material，需要使用import导入图片再将图片赋值给material</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> rotate <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../assets/logo.png&#x27;</span></span><br><span class=\"line\">viewer.<span class=\"property\">entities</span>.<span class=\"title function_\">add</span>(&#123;</span><br><span class=\"line\"><span class=\"attr\">rectangle</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">coordinates</span>: <span class=\"title class_\">Cesium</span>.<span class=\"property\">Rectangle</span>.<span class=\"title function_\">fromDegrees</span>(-<span class=\"number\">92.0</span>, <span class=\"number\">30.0</span>, -<span class=\"number\">76.0</span>, <span class=\"number\">40.0</span>),</span><br><span class=\"line\">  <span class=\"attr\">material</span>: rotate,</span><br><span class=\"line\">  <span class=\"attr\">rotation</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">CallbackProperty</span>(getRotationValue, <span class=\"literal\">false</span>),</span><br><span class=\"line\">  <span class=\"attr\">stRotation</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">CallbackProperty</span>(getRotationValue, <span class=\"literal\">false</span>),</span><br><span class=\"line\">  <span class=\"attr\">classificationType</span>: <span class=\"title class_\">Cesium</span>.<span class=\"property\">ClassificationType</span>.<span class=\"property\">TERRAIN</span>,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在webpack中设置别名时，目录结构最好只到最外层目录<code>letcesiumSource=&#39;./node_modules/cesium&#39;</code>，否则在编写代码过程中会没有cesium相关智能提示，很难受！！！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> <span class=\"title class_\">Cesium</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;cesium&#x27;</span>; <span class=\"comment\">// 这样引入就可以实现代码智能提示</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><img src=\"https://s2.loli.net/2024/01/08/D8jn1NhoY3cOQya.png\" alt=\"null\"></p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://cesium.com/\">cesium官方文档</a>：cesium的官方教程</li>\n<li><a href=\"https://cesium.com/learn/cesiumjs/ref-doc/\">cesium官方API</a>：同样是cesium的官方API文档</li>\n<li><a href=\"http://cesium.xin/\">cesium中文网</a>：cesium中文网，里面有系列教程</li>\n<li><a href=\"http://cesium.xin/cesium/cn/Documentation1.62/\">cesium API中文文档</a>：翻译的官方文档，不太全初步够用</li>\n<li><a href=\"http://cesiumcn.org/\">cesium中文社区</a>：中文cesium社区，有教程</li>\n</ul>\n","site":{"data":{}},"length":1400,"excerpt":"","more":"<h2 id=\"什么Cesiumjs\"><a href=\"#什么Cesiumjs\" class=\"headerlink\" title=\"什么Cesiumjs\"></a>什么Cesiumjs</h2><p>Cesium 是一个跨平台、跨浏览器的展示三维地球和地图的 javascript 库。<br>Cesium 使用WebGL 来进行硬件加速图形，使用时不需要任何插件支持，但是浏览器必须支持WebGL;<br>Cesium是基于Apache2.0 许可的开源程序。它可以免费的用于商业和非商业用途。</p>\n<h3 id=\"什么是WebGL\"><a href=\"#什么是WebGL\" class=\"headerlink\" title=\"什么是WebGL\"></a>什么是WebGL</h3><p>WebGL（Web图形库）是一个JavaScript API，可在任何兼容的Web浏览器中渲染高性能的交互式3D和2D图形，而无需使用插件。现在市面上大部分浏览器都支持WebGL。详情见下图</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/gZ6lTXjYLVh1wG8.png\" alt=\"null\"></p>\n<h3 id=\"环境搭建以及helloworld\"><a href=\"#环境搭建以及helloworld\" class=\"headerlink\" title=\"环境搭建以及helloworld\"></a>环境搭建以及helloworld</h3><p>Cesium是纯前端的代码，官方给出的源代码中，配套了nodejs的server端，以及可以通过nodejs进行安装部署。实际上也可以将Cesium部署进入tomcat（geoserver）、apache、nginx等服务器中。</p>\n<h4 id=\"运行官方helloworld\"><a href=\"#运行官方helloworld\" class=\"headerlink\" title=\"运行官方helloworld\"></a>运行官方helloworld</h4><p>1、下载安装<a href=\"https://nodejs.org/en/download/\">nodejs</a><br>2、下载Cesium源码解压<br>3、进入根目录，运行<code>npm install、node server.cjs</code></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/dWYAbgIsHSTmuBc.png\" alt=\"null\"><br>打开浏览器，输入<code>http://localhost:8080</code>看到下图就是成功</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/GDYs6z2uSEITpdb.png\" alt=\"null\"><br>输入完整链接<code>[http://localhost:8080/Apps/HelloWorld.html](http://localhost:8080/Apps/HelloWorld.html)</code>访问helloworld案例</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/kC37BDUYLA2g6RX.png\" alt=\"null\"></p>\n<p>环境搭建好之后，输入 <a href=\"http://localhost:8080/\">http://localhost:8080/</a> 有两个链接非常重要<br><a href=\"http://localhost:8080/Build/Documentation/index.html\">Documentation</a>：里面是Cesium的完整的API说明<br><a href=\"http://localhost:8080/Apps/Sandcastle/index.html\">Sandcastle</a>：一个沙箱，可以查看最新的Cesium特性和编写代码测试</p>\n<h2 id=\"使用Cesium开发\"><a href=\"#使用Cesium开发\" class=\"headerlink\" title=\"使用Cesium开发\"></a>使用Cesium开发</h2><h4 id=\"创建文件\"><a href=\"#创建文件\" class=\"headerlink\" title=\"创建文件\"></a>创建文件</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir cesium-demo`</span><br><span class=\"line\">`cd cesium-demo</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"引入cesium资源（三种方式）\"><a href=\"#引入cesium资源（三种方式）\" class=\"headerlink\" title=\"引入cesium资源（三种方式）\"></a>引入cesium资源（三种方式）</h4><ol>\n<li><p>将Cesium源码中的Build文件夹拷到cesium-demo下，直接引入本地资源</p>\n</li>\n<li><p>cdn引入线上资源</p>\n</li>\n<li><p>使用 Webpack、Parcel 或 Rollup 等构建应用程序时，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install cesium</span><br></pre></td></tr></table></figure>\n\n<p>安装依赖打包引入</p>\n<h4 id=\"创建html文件\"><a href=\"#创建html文件\" class=\"headerlink\" title=\"创建html文件\"></a>创建html文件</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi index.html</span><br></pre></td></tr></table></figure>\n\n<p>打开编辑器，（这里以cdn资源为例）</p>\n<p>新建容器dom</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;cesiumContainer&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>引入js和css资源</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cesium.com/downloads/cesiumjs/releases/1.90/Build/Cesium/Cesium.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://cesium.com/downloads/cesiumjs/releases/1.90/Build/Cesium/Widgets/widgets.css&quot;</span><span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>初始化地图实例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> viewer=newCesium.<span class=\"title class_\">Viewer</span>(<span class=\"string\">&quot;cesiumContainer&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>ok，简单的地球场景就完成了，打开浏览器查看下吧。</p>\n<h3 id=\"界面介绍和控件隐藏\"><a href=\"#界面介绍和控件隐藏\" class=\"headerlink\" title=\"界面介绍和控件隐藏\"></a>界面介绍和控件隐藏</h3></li>\n</ol>\n<p><img src=\"https://s2.loli.net/2024/01/08/yQAuCYHlMWeF1NB.png\" alt=\"null\"></p>\n<ol>\n<li><p>查找位置工具，查找到之后会将镜头对准找到的地址，默认使用bing地图</p>\n</li>\n<li><p>视角返回初始位置</p>\n</li>\n<li><p>选择视角的模式，有三种：3D，2D，哥伦布视图(CV)</p>\n</li>\n<li><p>图层选择器，选择要显示的地图服务和地形服务</p>\n</li>\n<li><p>帮助按钮，显示默认的地图控制帮助</p>\n</li>\n<li><p>动画器件，控制视图动画的播放速度</p>\n</li>\n<li><p>时间线,指示当前时间，并允许用户跳到特定的时间</p>\n</li>\n<li><p>版权显示，显示数据归属，必选</p>\n</li>\n<li><p>全屏按钮</p>\n<h3 id=\"隐藏上述小控件\"><a href=\"#隐藏上述小控件\" class=\"headerlink\" title=\"隐藏上述小控件\"></a>隐藏上述小控件</h3><h5 id=\"方法1-通过js控制\"><a href=\"#方法1-通过js控制\" class=\"headerlink\" title=\"方法1 通过js控制\"></a>方法1 通过js控制</h5><p>界面上默认的小控件可以通过在初始化Viewer的时候设置相应的属性来关闭。具体属性可以查看文档。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> viewer = <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">Viewer</span>(<span class=\"string\">&#x27;cesiumContainer&#x27;</span>, &#123;</span><br><span class=\"line\"><span class=\"attr\">terrainProvider</span>: <span class=\"title class_\">Cesium</span>.<span class=\"title function_\">createWorldTerrain</span>(), <span class=\"comment\">// 高分辨率地形</span></span><br><span class=\"line\"><span class=\"attr\">geocoder</span>:<span class=\"literal\">false</span>,  <span class=\"comment\">// 查找控件</span></span><br><span class=\"line\"><span class=\"attr\">homeButton</span>:<span class=\"literal\">false</span>, <span class=\"comment\">// 返回初始位置控件</span></span><br><span class=\"line\"><span class=\"attr\">sceneModePicker</span>:<span class=\"literal\">false</span>, <span class=\"comment\">// 选择视角孔金</span></span><br><span class=\"line\"><span class=\"attr\">baseLayerPicker</span>:<span class=\"literal\">false</span>, <span class=\"comment\">// 图层选择控件</span></span><br><span class=\"line\"><span class=\"attr\">navigationHelpButton</span>:<span class=\"literal\">false</span>, <span class=\"comment\">// 帮助按钮控件</span></span><br><span class=\"line\"><span class=\"attr\">animation</span>:<span class=\"literal\">false</span>, <span class=\"comment\">// 动画控件</span></span><br><span class=\"line\"><span class=\"attr\">timeline</span>:<span class=\"literal\">false</span>, <span class=\"comment\">// 时间轴控件</span></span><br><span class=\"line\"><span class=\"attr\">fullscreenButton</span>:<span class=\"literal\">false</span>, <span class=\"comment\">// 全屏控件</span></span><br><span class=\"line\"><span class=\"attr\">creditContainer</span>: <span class=\"string\">&#x27;credit&#x27;</span>  <span class=\"comment\">// 设置版权控件的父级id(需要手动创建一个对应的id的div容器添加到页面中，使用css隐藏父元素)</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">viewer.<span class=\"property\">_cesiumWidget</span>.<span class=\"property\">_creditContainer</span>.<span class=\"property\">style</span>.<span class=\"property\">display</span> = <span class=\"string\">&quot;none&quot;</span>; <span class=\"comment\">// 和creditContainer两者选其一</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"方法2-通过css隐藏\"><a href=\"#方法2-通过css隐藏\" class=\"headerlink\" title=\"方法2 通过css隐藏\"></a>方法2 通过css隐藏</h5><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.cesium-viewer-toolbar</span>,             <span class=\"comment\">/* 右上角按钮组 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.cesium-viewer-animationContainer</span>,  <span class=\"comment\">/* 左下角动画控件 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.cesium-viewer-timelineContainer</span>,   <span class=\"comment\">/* 时间线 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.cesium-viewer-bottom</span>               <span class=\"comment\">/* logo信息 */</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.cesium-viewer-fullscreenContainer</span>  <span class=\"comment\">/* 全屏按钮 */</span></span><br><span class=\"line\">&#123; <span class=\"attribute\">position</span>: absolute; <span class=\"attribute\">top</span>: -<span class=\"number\">999em</span>;  &#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注：全屏按钮不能通过display:none的方式来达到隐藏的目的，这是因为生成的按钮控件的行内样式设置了display属性，会覆盖引入的css属性</p>\n</blockquote>\n</li>\n</ol>\n<p>到此一个基本demo就完成了。剩下的就是使用官方提供的工具，完成一些示例，在这些的基础上，自己定制一些内容，或者项目过程中自己的一些思路，以及发现问题，解决问题的一些经验记录。</p>\n<h2 id=\"疑问与解答\"><a href=\"#疑问与解答\" class=\"headerlink\" title=\"疑问与解答\"></a>疑问与解答</h2><ol>\n<li>官方示例引入css有问题</li>\n</ol>\n<p><img src=\"https://s2.loli.net/2024/01/08/3d9P1weOHjGVRCz.png\" alt=\"null\"></p>\n<p><img src=\"https://s2.loli.net/2024/01/08/lMe63wyg49NXhPs.png\" alt=\"null\"></p>\n<h3 id=\"两种解决方式\"><a href=\"#两种解决方式\" class=\"headerlink\" title=\"两种解决方式\"></a>两种解决方式</h3><ol>\n<li><p>webpack配置中设置<code>alias</code>别名cesium指向具体文件路径</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 然后修改引入路径  </span><br><span class=\"line\">import <span class=\"string\">&quot;cesium/Widgets/widgets.css&quot;</span>;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://s2.loli.net/2024/01/08/CjqLPGvfRmTa317.png\" alt=\"null\"></p>\n<ol>\n<li><p>直接使用相对路径引入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import <span class=\"string\">&quot;./node_modules/cesium/Source/Widgets/widgets.css&quot;</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在Vue中使用遇到的问题优化</p>\n</li>\n</ol>\n<ul>\n<li><p><code>重要 重要 重要</code>不要把cesium里的对象如viewer，entity保存到data数据里，会导致劫持数据过万浏览器直接卡崩溃。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果需要通信的话，最简单的方法就是挂载到window对象上。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加本地图片，如使用图片作为material，需要使用import导入图片再将图片赋值给material</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> rotate <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../assets/logo.png&#x27;</span></span><br><span class=\"line\">viewer.<span class=\"property\">entities</span>.<span class=\"title function_\">add</span>(&#123;</span><br><span class=\"line\"><span class=\"attr\">rectangle</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">coordinates</span>: <span class=\"title class_\">Cesium</span>.<span class=\"property\">Rectangle</span>.<span class=\"title function_\">fromDegrees</span>(-<span class=\"number\">92.0</span>, <span class=\"number\">30.0</span>, -<span class=\"number\">76.0</span>, <span class=\"number\">40.0</span>),</span><br><span class=\"line\">  <span class=\"attr\">material</span>: rotate,</span><br><span class=\"line\">  <span class=\"attr\">rotation</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">CallbackProperty</span>(getRotationValue, <span class=\"literal\">false</span>),</span><br><span class=\"line\">  <span class=\"attr\">stRotation</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">Cesium</span>.<span class=\"title class_\">CallbackProperty</span>(getRotationValue, <span class=\"literal\">false</span>),</span><br><span class=\"line\">  <span class=\"attr\">classificationType</span>: <span class=\"title class_\">Cesium</span>.<span class=\"property\">ClassificationType</span>.<span class=\"property\">TERRAIN</span>,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在webpack中设置别名时，目录结构最好只到最外层目录<code>letcesiumSource=&#39;./node_modules/cesium&#39;</code>，否则在编写代码过程中会没有cesium相关智能提示，很难受！！！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> <span class=\"title class_\">Cesium</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;cesium&#x27;</span>; <span class=\"comment\">// 这样引入就可以实现代码智能提示</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><img src=\"https://s2.loli.net/2024/01/08/D8jn1NhoY3cOQya.png\" alt=\"null\"></p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://cesium.com/\">cesium官方文档</a>：cesium的官方教程</li>\n<li><a href=\"https://cesium.com/learn/cesiumjs/ref-doc/\">cesium官方API</a>：同样是cesium的官方API文档</li>\n<li><a href=\"http://cesium.xin/\">cesium中文网</a>：cesium中文网，里面有系列教程</li>\n<li><a href=\"http://cesium.xin/cesium/cn/Documentation1.62/\">cesium API中文文档</a>：翻译的官方文档，不太全初步够用</li>\n<li><a href=\"http://cesiumcn.org/\">cesium中文社区</a>：中文cesium社区，有教程</li>\n</ul>\n"},{"title":"基于FoxGIS Server Lite部署离线地图","date":"2023-12-14T08:45:59.000Z","_content":"\n## 背景\n\n在某个项目中用到了 [L7](https://l7.antv.antgroup.com/tutorial/l7) 地图，使用的是高德图层开发。但是在测试阶段突然发现最终项目是要部署在离线环境的，高德地图没法使用。没办法只能考虑在离线环境自己部一套地图系统。\n\n## 搭建瓦片服务\n\n1. 资源下载\n\n   - 下载 [FoxGIS Server Lite](https://jingsam.github.io/foxgis-server-lite/#/deploy)客户端作为地图服务器\n   - 去[openmaptiles.org ](https://data.maptiler.com/downloads/planet/)网站下载需要的瓦片数据\n   - 下载 [gh-pages](https://github.com/lzxue/font-glyphs/tree/gh-pages) 项目中```glyphs```和```sprite```文件夹\n   - 在 [maptiler-basic-gl-style](https://github.com/openmaptiles/maptiler-basic-gl-style) 中将此项目中的 `style.json` 文件下载到本地\n\n2. 将下载好的地图放到```foxgis-server-lite-win/data/tilesets```文件夹内\n\n3. 将下载好的```sprite```放到```foxgis-server-lite-win/data/sprites```文件夹内\n\n4. 将下载好的```glyphs```里文件拷出来放到```foxgis-server-lite-win/data/fonts```文件内\n\n5. 修改```style.json```文件中相关内容\n\n   ```\n   # 替换瓦片数据请求地址\n   \"url\": \"http://10.60.175.128:1234/api/tilesets/maptiler-osm-2020-02-10-v3.11-planet/tilejson\"\n   \n   # 替换字体文件并添加 sprite 图\n   \"sprite\": \"http://10.60.175.128:1234/api/sprites/sprite/sprite\",\n   \"glyphs\": \"http://10.60.175.128:1234/api/fonts/{fontstack}/{range}.pbf\",\n   \n   ```\n\n6. 将修改后的```style.json```文件放到```foxgis-server-lite-win/data/styles```文件夹内\n\n7. 直接重启服务，服务成功就可以直接使用了\n\n## 使用离线地图\n\n修改L7初始化部分\n\n![image-20240118095343016](https://s2.loli.net/2024/01/18/4X1iWuvSgEZytLh.png)\n\n![image-20240118095452036](https://s2.loli.net/2024/01/18/awdQR718chJ9oqY.png)\n\n![image-20240118095559317](https://s2.loli.net/2024/01/18/4WElzHKSwoUY7sQ.png)\n\n成功加载离线地图\n\n## 参考\n\n[离线使用](https://l7.antv.antgroup.com/tutorial/map/offline)\n\n[基于mapbox离线地图解决方案](https://juejin.cn/post/6884144929098956813)\n","source":"_posts/部署离线地图.md","raw":"---\ntitle: 基于FoxGIS Server Lite部署离线地图\ndate: 2023-12-14 16:45:59\ntags:\n    - 地图\n    - mapbox\n---\n\n## 背景\n\n在某个项目中用到了 [L7](https://l7.antv.antgroup.com/tutorial/l7) 地图，使用的是高德图层开发。但是在测试阶段突然发现最终项目是要部署在离线环境的，高德地图没法使用。没办法只能考虑在离线环境自己部一套地图系统。\n\n## 搭建瓦片服务\n\n1. 资源下载\n\n   - 下载 [FoxGIS Server Lite](https://jingsam.github.io/foxgis-server-lite/#/deploy)客户端作为地图服务器\n   - 去[openmaptiles.org ](https://data.maptiler.com/downloads/planet/)网站下载需要的瓦片数据\n   - 下载 [gh-pages](https://github.com/lzxue/font-glyphs/tree/gh-pages) 项目中```glyphs```和```sprite```文件夹\n   - 在 [maptiler-basic-gl-style](https://github.com/openmaptiles/maptiler-basic-gl-style) 中将此项目中的 `style.json` 文件下载到本地\n\n2. 将下载好的地图放到```foxgis-server-lite-win/data/tilesets```文件夹内\n\n3. 将下载好的```sprite```放到```foxgis-server-lite-win/data/sprites```文件夹内\n\n4. 将下载好的```glyphs```里文件拷出来放到```foxgis-server-lite-win/data/fonts```文件内\n\n5. 修改```style.json```文件中相关内容\n\n   ```\n   # 替换瓦片数据请求地址\n   \"url\": \"http://10.60.175.128:1234/api/tilesets/maptiler-osm-2020-02-10-v3.11-planet/tilejson\"\n   \n   # 替换字体文件并添加 sprite 图\n   \"sprite\": \"http://10.60.175.128:1234/api/sprites/sprite/sprite\",\n   \"glyphs\": \"http://10.60.175.128:1234/api/fonts/{fontstack}/{range}.pbf\",\n   \n   ```\n\n6. 将修改后的```style.json```文件放到```foxgis-server-lite-win/data/styles```文件夹内\n\n7. 直接重启服务，服务成功就可以直接使用了\n\n## 使用离线地图\n\n修改L7初始化部分\n\n![image-20240118095343016](https://s2.loli.net/2024/01/18/4X1iWuvSgEZytLh.png)\n\n![image-20240118095452036](https://s2.loli.net/2024/01/18/awdQR718chJ9oqY.png)\n\n![image-20240118095559317](https://s2.loli.net/2024/01/18/4WElzHKSwoUY7sQ.png)\n\n成功加载离线地图\n\n## 参考\n\n[离线使用](https://l7.antv.antgroup.com/tutorial/map/offline)\n\n[基于mapbox离线地图解决方案](https://juejin.cn/post/6884144929098956813)\n","slug":"部署离线地图","published":1,"updated":"2024-01-18T02:01:49.918Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrq64z6z001dsoip7zkrb8qy","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>在某个项目中用到了 <a href=\"https://l7.antv.antgroup.com/tutorial/l7\">L7</a> 地图，使用的是高德图层开发。但是在测试阶段突然发现最终项目是要部署在离线环境的，高德地图没法使用。没办法只能考虑在离线环境自己部一套地图系统。</p>\n<h2 id=\"搭建瓦片服务\"><a href=\"#搭建瓦片服务\" class=\"headerlink\" title=\"搭建瓦片服务\"></a>搭建瓦片服务</h2><ol>\n<li><p>资源下载</p>\n<ul>\n<li>下载 <a href=\"https://jingsam.github.io/foxgis-server-lite/#/deploy\">FoxGIS Server Lite</a>客户端作为地图服务器</li>\n<li>去<a href=\"https://data.maptiler.com/downloads/planet/\">openmaptiles.org </a>网站下载需要的瓦片数据</li>\n<li>下载 <a href=\"https://github.com/lzxue/font-glyphs/tree/gh-pages\">gh-pages</a> 项目中<code>glyphs</code>和<code>sprite</code>文件夹</li>\n<li>在 <a href=\"https://github.com/openmaptiles/maptiler-basic-gl-style\">maptiler-basic-gl-style</a> 中将此项目中的 <code>style.json</code> 文件下载到本地</li>\n</ul>\n</li>\n<li><p>将下载好的地图放到<code>foxgis-server-lite-win/data/tilesets</code>文件夹内</p>\n</li>\n<li><p>将下载好的<code>sprite</code>放到<code>foxgis-server-lite-win/data/sprites</code>文件夹内</p>\n</li>\n<li><p>将下载好的<code>glyphs</code>里文件拷出来放到<code>foxgis-server-lite-win/data/fonts</code>文件内</p>\n</li>\n<li><p>修改<code>style.json</code>文件中相关内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 替换瓦片数据请求地址</span><br><span class=\"line\">&quot;url&quot;: &quot;http://10.60.175.128:1234/api/tilesets/maptiler-osm-2020-02-10-v3.11-planet/tilejson&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 替换字体文件并添加 sprite 图</span><br><span class=\"line\">&quot;sprite&quot;: &quot;http://10.60.175.128:1234/api/sprites/sprite/sprite&quot;,</span><br><span class=\"line\">&quot;glyphs&quot;: &quot;http://10.60.175.128:1234/api/fonts/&#123;fontstack&#125;/&#123;range&#125;.pbf&quot;,</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将修改后的<code>style.json</code>文件放到<code>foxgis-server-lite-win/data/styles</code>文件夹内</p>\n</li>\n<li><p>直接重启服务，服务成功就可以直接使用了</p>\n</li>\n</ol>\n<h2 id=\"使用离线地图\"><a href=\"#使用离线地图\" class=\"headerlink\" title=\"使用离线地图\"></a>使用离线地图</h2><p>修改L7初始化部分</p>\n<p><img src=\"https://s2.loli.net/2024/01/18/4X1iWuvSgEZytLh.png\" alt=\"image-20240118095343016\"></p>\n<p><img src=\"https://s2.loli.net/2024/01/18/awdQR718chJ9oqY.png\" alt=\"image-20240118095452036\"></p>\n<p><img src=\"https://s2.loli.net/2024/01/18/4WElzHKSwoUY7sQ.png\" alt=\"image-20240118095559317\"></p>\n<p>成功加载离线地图</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://l7.antv.antgroup.com/tutorial/map/offline\">离线使用</a></p>\n<p><a href=\"https://juejin.cn/post/6884144929098956813\">基于mapbox离线地图解决方案</a></p>\n","site":{"data":{}},"length":361,"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>在某个项目中用到了 <a href=\"https://l7.antv.antgroup.com/tutorial/l7\">L7</a> 地图，使用的是高德图层开发。但是在测试阶段突然发现最终项目是要部署在离线环境的，高德地图没法使用。没办法只能考虑在离线环境自己部一套地图系统。</p>\n<h2 id=\"搭建瓦片服务\"><a href=\"#搭建瓦片服务\" class=\"headerlink\" title=\"搭建瓦片服务\"></a>搭建瓦片服务</h2><ol>\n<li><p>资源下载</p>\n<ul>\n<li>下载 <a href=\"https://jingsam.github.io/foxgis-server-lite/#/deploy\">FoxGIS Server Lite</a>客户端作为地图服务器</li>\n<li>去<a href=\"https://data.maptiler.com/downloads/planet/\">openmaptiles.org </a>网站下载需要的瓦片数据</li>\n<li>下载 <a href=\"https://github.com/lzxue/font-glyphs/tree/gh-pages\">gh-pages</a> 项目中<code>glyphs</code>和<code>sprite</code>文件夹</li>\n<li>在 <a href=\"https://github.com/openmaptiles/maptiler-basic-gl-style\">maptiler-basic-gl-style</a> 中将此项目中的 <code>style.json</code> 文件下载到本地</li>\n</ul>\n</li>\n<li><p>将下载好的地图放到<code>foxgis-server-lite-win/data/tilesets</code>文件夹内</p>\n</li>\n<li><p>将下载好的<code>sprite</code>放到<code>foxgis-server-lite-win/data/sprites</code>文件夹内</p>\n</li>\n<li><p>将下载好的<code>glyphs</code>里文件拷出来放到<code>foxgis-server-lite-win/data/fonts</code>文件内</p>\n</li>\n<li><p>修改<code>style.json</code>文件中相关内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 替换瓦片数据请求地址</span><br><span class=\"line\">&quot;url&quot;: &quot;http://10.60.175.128:1234/api/tilesets/maptiler-osm-2020-02-10-v3.11-planet/tilejson&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 替换字体文件并添加 sprite 图</span><br><span class=\"line\">&quot;sprite&quot;: &quot;http://10.60.175.128:1234/api/sprites/sprite/sprite&quot;,</span><br><span class=\"line\">&quot;glyphs&quot;: &quot;http://10.60.175.128:1234/api/fonts/&#123;fontstack&#125;/&#123;range&#125;.pbf&quot;,</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将修改后的<code>style.json</code>文件放到<code>foxgis-server-lite-win/data/styles</code>文件夹内</p>\n</li>\n<li><p>直接重启服务，服务成功就可以直接使用了</p>\n</li>\n</ol>\n<h2 id=\"使用离线地图\"><a href=\"#使用离线地图\" class=\"headerlink\" title=\"使用离线地图\"></a>使用离线地图</h2><p>修改L7初始化部分</p>\n<p><img src=\"https://s2.loli.net/2024/01/18/4X1iWuvSgEZytLh.png\" alt=\"image-20240118095343016\"></p>\n<p><img src=\"https://s2.loli.net/2024/01/18/awdQR718chJ9oqY.png\" alt=\"image-20240118095452036\"></p>\n<p><img src=\"https://s2.loli.net/2024/01/18/4WElzHKSwoUY7sQ.png\" alt=\"image-20240118095559317\"></p>\n<p>成功加载离线地图</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://l7.antv.antgroup.com/tutorial/map/offline\">离线使用</a></p>\n<p><a href=\"https://juejin.cn/post/6884144929098956813\">基于mapbox离线地图解决方案</a></p>\n"},{"title":"项目部署到云服务器的过程","date":"2019-07-29T06:40:36.000Z","_content":"\n## 前言\n\n目前公司和我个人所用的技术栈都是 vue 全家桶，平时自己也会做些个人项目。对很多人来说项目开发完就没我什么事了。这怎么行呢，自己辛辛苦苦的劳动成果怎么能不分享给别人，亮瞎他们的眼呢。所以，让我们动起手来。\n\n## 前期准备\n\n首先你得有个服务器，当然有个域名的话就更好了。云服务可以直接在网上买一个，最低配的就可以了（有钱的老板可以无视）。接着备案域名，等个十天半月的，备案通过了，就可以将域名和服务器绑定起来，直接通过域名访问服务器里面的内容。（没有域名的就直接服务器 IP 访问）\n\n## 安装环境\n\n我们将本地项目托管到 Github 上，再通过 Git 在服务器上拉去代码实现代码的同步。同时 vue 项目事运行在 node 服务上的，所以需要安装 nodejs、Git。\n\n在购买服务器时，所买的服务器系统不同，对应的安装方法也不同。而我的服务器系统是 centos,下面没有特殊说明全部默认系统是 centos。其他系统可以在网上找到对应的方法。\n\n用 [PuTTY](\"https://www.putty.org/\") 远程链接登录服务器，具体方法就不细讲了，教程网上都有。\n\n### 安装 nodejs\n\n**方法一：从 EPEL 库安装 Node.js**\n\n安装 Node.js 的一个有效且简单的方法就是从官方库下载安装，首先确保您可以访问到 EPEL 库，您可以通过运行以下命令来安装。\n\n```bash\nsudo yum install epel-release\n```\n\n现在可以使用 yum 命令安装 Node.js 了。\n\n```bash\nsudo yum install nodejs\n```\n\n好的，检查下是否安装成功\n\n```bash\n# node --version\nv6.12.2\n# npm --version\n3.10.10\n```\n\n可以看到，用这种方法安装的话，版本比较旧。\n\n**方法二：下载源代码，编译安装**\n\n去官网找到最新的或者是您想要的 node.js 版本，复制 url，在 CentOS 中用 wget 下载。\n\n```bash\nwget https://nodejs.org/dist/v8.9.4/node-v8.9.4.tar.gz\n```\n\n解压：\n\n```bash\ntar zxvf node-v8.9.4.tar.gz\n```\n\n进入目录：\n\n```bash\ncd node-v8.9.4\n```\n\n配置：\n\n```bash\n./configure\n```\n\n编译：\n\n```\nmake\n```\n\n安装：\n\n```bash\nsudo make install\n```\n\n老样子，检查下:\n\n```bash\n# node --version\nv8.9.4\n# npm --version\n5.6.0\n```\n\n### 安装 Git\n\n同样可以两种方式安装\n\n**用 Yum 安装 Git**\n\n```bash\nsudo yum install git\n```\n\n如果命令完成而没有错误，你将有 git 下载和安装。 要检查它是否正常工作，尝试运行 Git 的内置版本检查\n\n```bash\ngit --version\n```\n\n成功输出一个版本号的话，就是安装完成了。\n\n**从源代码安装 Git**\n\n安装依赖包\n\n```bash\nyum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel\nyum install  gcc perl-ExtUtils-MakeMaker\n```\n\n下载&解压\n\n```bash\nwget https://www.kernel.org/pub/software/scm/git/git-2.5.0.tar.gz\ntar -zxvf git-2.5.0.tar.gz\n```\n\n编译安装\n\n```bash\ncd git-2.5.0\nmake prefix=/usr/local/git all\nmake prefix=/usr/local/git install\necho \"export PATH=$PATH:/usr/local/git/bin\" >> /etc/bashrc\nsource /etc/bashrc\n```\n\n检查版本\n\n```\ngit --version\n```\n\n**注意：如果安装完查看版本不是我们安装的最新版，说明之前安装过其他版本的 git， 请重新执行下面的操作**\n\n```bash\nyum remove -y git\nsource /etc/bashrc\n```\n\n到此为止项目的运行环境已经安装好了。\n\n下面，开始编译运行项目。\n\n## 部署运行项目\n\n进入到服务器根目录下，用 git 命令把远程仓库中要部署的项目拉取下来。\n\n```bash\ngit clone git-url\n```\n\n进入项目文件夹，安装依赖，编译打包\n\n```bash\nnpm i # 安装依赖\nnpm run build # 编译打包\n```\n\n运行自己编写的 node 服务文件\n\n```bash\nnode prod.server.js\n```\n\n此时就可以通过服务器+端口访问项目。\n\n等等，一旦我们退出远程链接，就会发现页面无法访问了。这是怎么回事啊？总不能一直登录远程链接啊。\n\n原来事刚才开启的 node 服务无法常驻。可以将刚才的 node 命令变为\n\n```bash\nnohup node prod.server.js &\n```\n\n这样就能保持进程常驻了。也可以用第三方库[pm2](\"http://pm2.keymetrics.io/\")来达到晶晨常驻的目的。\n\n### Nginx 配置多项目方案\n\n现在是可以通过服务器地址和端口号来访问项目的，但是我有多个项目放在一个服务器上，而且我也不想每次都输入端口号来访问，太不雅观。\n\n那么有没有办法可以通过 `http://域名/xxx` 的方式来访问不同的项目呢? 是可以的。我们可以利用 nginx 的反向代理来实现。\n\nnginx 的下载安装就不介绍了，可以自己搜索解决。\n\n### 配置反向代理\n\nnginx 文件夹下的 `/conf/nginx.conf` 是 nginx 服务器的配置文件。\n\n![20190729170916](https://s2.loli.net/2024/01/08/CTIh5reKSdciu28.png)\n\n其中 `location /sell/{}`,`location /music/` 都是新增的反向代理配置，最重要的一句就是\n\n```bash\nproxy_pass http://127.0.0.1:8900/ # 最后一定要有反斜杠 /\n```\n\n意思是将`/sell`请求转发到本地服务器的`8900`端口。其他项目同理。\n\n现在我们就可以通过 `域名/music` 来访问项目了。输入地址回车，what？页面什么都没有。\n\n不要急，F12 打开开发者模式，切换到 Network。发现页面是完全可以请求下来的，但是 css 文件的路径好像有点不对。现在 css 文件的路径是`域名/css/a.css`，很明显不对，正确的路径应该是`域名/music/css/a.css`。\n\n这是由于 vue 脚手架的配置有关。在脚手架里有个`baseUrl`的配置，默认是`/`，也就是默认是绝对路径，相对于根目录拼接绝对路径（这里就是域名）。那么修改`baseUrl`为相对路径，其实就是为空。\n\n同样的，绝对路径的 api 也有相同的问题。这种情况有两种方法解决。\n\n一、采用相对路径\n\n简单来说就是去掉 api 绝对路径最前面的`/`，变成相对路径。\n\n二、使用环境变量和模式。\n\n通过 `process.env.NODE_ENV` 可以拿到项目运行所在的环境，这样我们就是根据环境的不同预先设置好 api 接口路径，项目在 `development` 和 `production` 两个环境下分别加载对应的接口路径。做到了开发与发布两不耽误。\n\n本地运行测下，没问题就重新用`git`提交下更新。\n\n再次远程登录服务器，进入项目目录`git pull` 拉取更新，重新编译运行。在浏览器输入地址，测试无错的话反向代理就全部完成了。\n\n剩下的就是启动所有配置代理项目的 node 服务了。\n\n好了，现在我们可以使用域名来访问服务器上所有项目了。大功告成！！！\n","source":"_posts/项目部署到云服务器的过程.md","raw":"---\ntitle: 项目部署到云服务器的过程\ndate: 2019-07-29 14:40:36\ntags:\n  - web\n  - nginx\n---\n\n## 前言\n\n目前公司和我个人所用的技术栈都是 vue 全家桶，平时自己也会做些个人项目。对很多人来说项目开发完就没我什么事了。这怎么行呢，自己辛辛苦苦的劳动成果怎么能不分享给别人，亮瞎他们的眼呢。所以，让我们动起手来。\n\n## 前期准备\n\n首先你得有个服务器，当然有个域名的话就更好了。云服务可以直接在网上买一个，最低配的就可以了（有钱的老板可以无视）。接着备案域名，等个十天半月的，备案通过了，就可以将域名和服务器绑定起来，直接通过域名访问服务器里面的内容。（没有域名的就直接服务器 IP 访问）\n\n## 安装环境\n\n我们将本地项目托管到 Github 上，再通过 Git 在服务器上拉去代码实现代码的同步。同时 vue 项目事运行在 node 服务上的，所以需要安装 nodejs、Git。\n\n在购买服务器时，所买的服务器系统不同，对应的安装方法也不同。而我的服务器系统是 centos,下面没有特殊说明全部默认系统是 centos。其他系统可以在网上找到对应的方法。\n\n用 [PuTTY](\"https://www.putty.org/\") 远程链接登录服务器，具体方法就不细讲了，教程网上都有。\n\n### 安装 nodejs\n\n**方法一：从 EPEL 库安装 Node.js**\n\n安装 Node.js 的一个有效且简单的方法就是从官方库下载安装，首先确保您可以访问到 EPEL 库，您可以通过运行以下命令来安装。\n\n```bash\nsudo yum install epel-release\n```\n\n现在可以使用 yum 命令安装 Node.js 了。\n\n```bash\nsudo yum install nodejs\n```\n\n好的，检查下是否安装成功\n\n```bash\n# node --version\nv6.12.2\n# npm --version\n3.10.10\n```\n\n可以看到，用这种方法安装的话，版本比较旧。\n\n**方法二：下载源代码，编译安装**\n\n去官网找到最新的或者是您想要的 node.js 版本，复制 url，在 CentOS 中用 wget 下载。\n\n```bash\nwget https://nodejs.org/dist/v8.9.4/node-v8.9.4.tar.gz\n```\n\n解压：\n\n```bash\ntar zxvf node-v8.9.4.tar.gz\n```\n\n进入目录：\n\n```bash\ncd node-v8.9.4\n```\n\n配置：\n\n```bash\n./configure\n```\n\n编译：\n\n```\nmake\n```\n\n安装：\n\n```bash\nsudo make install\n```\n\n老样子，检查下:\n\n```bash\n# node --version\nv8.9.4\n# npm --version\n5.6.0\n```\n\n### 安装 Git\n\n同样可以两种方式安装\n\n**用 Yum 安装 Git**\n\n```bash\nsudo yum install git\n```\n\n如果命令完成而没有错误，你将有 git 下载和安装。 要检查它是否正常工作，尝试运行 Git 的内置版本检查\n\n```bash\ngit --version\n```\n\n成功输出一个版本号的话，就是安装完成了。\n\n**从源代码安装 Git**\n\n安装依赖包\n\n```bash\nyum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel\nyum install  gcc perl-ExtUtils-MakeMaker\n```\n\n下载&解压\n\n```bash\nwget https://www.kernel.org/pub/software/scm/git/git-2.5.0.tar.gz\ntar -zxvf git-2.5.0.tar.gz\n```\n\n编译安装\n\n```bash\ncd git-2.5.0\nmake prefix=/usr/local/git all\nmake prefix=/usr/local/git install\necho \"export PATH=$PATH:/usr/local/git/bin\" >> /etc/bashrc\nsource /etc/bashrc\n```\n\n检查版本\n\n```\ngit --version\n```\n\n**注意：如果安装完查看版本不是我们安装的最新版，说明之前安装过其他版本的 git， 请重新执行下面的操作**\n\n```bash\nyum remove -y git\nsource /etc/bashrc\n```\n\n到此为止项目的运行环境已经安装好了。\n\n下面，开始编译运行项目。\n\n## 部署运行项目\n\n进入到服务器根目录下，用 git 命令把远程仓库中要部署的项目拉取下来。\n\n```bash\ngit clone git-url\n```\n\n进入项目文件夹，安装依赖，编译打包\n\n```bash\nnpm i # 安装依赖\nnpm run build # 编译打包\n```\n\n运行自己编写的 node 服务文件\n\n```bash\nnode prod.server.js\n```\n\n此时就可以通过服务器+端口访问项目。\n\n等等，一旦我们退出远程链接，就会发现页面无法访问了。这是怎么回事啊？总不能一直登录远程链接啊。\n\n原来事刚才开启的 node 服务无法常驻。可以将刚才的 node 命令变为\n\n```bash\nnohup node prod.server.js &\n```\n\n这样就能保持进程常驻了。也可以用第三方库[pm2](\"http://pm2.keymetrics.io/\")来达到晶晨常驻的目的。\n\n### Nginx 配置多项目方案\n\n现在是可以通过服务器地址和端口号来访问项目的，但是我有多个项目放在一个服务器上，而且我也不想每次都输入端口号来访问，太不雅观。\n\n那么有没有办法可以通过 `http://域名/xxx` 的方式来访问不同的项目呢? 是可以的。我们可以利用 nginx 的反向代理来实现。\n\nnginx 的下载安装就不介绍了，可以自己搜索解决。\n\n### 配置反向代理\n\nnginx 文件夹下的 `/conf/nginx.conf` 是 nginx 服务器的配置文件。\n\n![20190729170916](https://s2.loli.net/2024/01/08/CTIh5reKSdciu28.png)\n\n其中 `location /sell/{}`,`location /music/` 都是新增的反向代理配置，最重要的一句就是\n\n```bash\nproxy_pass http://127.0.0.1:8900/ # 最后一定要有反斜杠 /\n```\n\n意思是将`/sell`请求转发到本地服务器的`8900`端口。其他项目同理。\n\n现在我们就可以通过 `域名/music` 来访问项目了。输入地址回车，what？页面什么都没有。\n\n不要急，F12 打开开发者模式，切换到 Network。发现页面是完全可以请求下来的，但是 css 文件的路径好像有点不对。现在 css 文件的路径是`域名/css/a.css`，很明显不对，正确的路径应该是`域名/music/css/a.css`。\n\n这是由于 vue 脚手架的配置有关。在脚手架里有个`baseUrl`的配置，默认是`/`，也就是默认是绝对路径，相对于根目录拼接绝对路径（这里就是域名）。那么修改`baseUrl`为相对路径，其实就是为空。\n\n同样的，绝对路径的 api 也有相同的问题。这种情况有两种方法解决。\n\n一、采用相对路径\n\n简单来说就是去掉 api 绝对路径最前面的`/`，变成相对路径。\n\n二、使用环境变量和模式。\n\n通过 `process.env.NODE_ENV` 可以拿到项目运行所在的环境，这样我们就是根据环境的不同预先设置好 api 接口路径，项目在 `development` 和 `production` 两个环境下分别加载对应的接口路径。做到了开发与发布两不耽误。\n\n本地运行测下，没问题就重新用`git`提交下更新。\n\n再次远程登录服务器，进入项目目录`git pull` 拉取更新，重新编译运行。在浏览器输入地址，测试无错的话反向代理就全部完成了。\n\n剩下的就是启动所有配置代理项目的 node 服务了。\n\n好了，现在我们可以使用域名来访问服务器上所有项目了。大功告成！！！\n","slug":"项目部署到云服务器的过程","published":1,"updated":"2024-01-08T06:34:07.200Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clrq64z6z001gsoip3om05md5","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>目前公司和我个人所用的技术栈都是 vue 全家桶，平时自己也会做些个人项目。对很多人来说项目开发完就没我什么事了。这怎么行呢，自己辛辛苦苦的劳动成果怎么能不分享给别人，亮瞎他们的眼呢。所以，让我们动起手来。</p>\n<h2 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h2><p>首先你得有个服务器，当然有个域名的话就更好了。云服务可以直接在网上买一个，最低配的就可以了（有钱的老板可以无视）。接着备案域名，等个十天半月的，备案通过了，就可以将域名和服务器绑定起来，直接通过域名访问服务器里面的内容。（没有域名的就直接服务器 IP 访问）</p>\n<h2 id=\"安装环境\"><a href=\"#安装环境\" class=\"headerlink\" title=\"安装环境\"></a>安装环境</h2><p>我们将本地项目托管到 Github 上，再通过 Git 在服务器上拉去代码实现代码的同步。同时 vue 项目事运行在 node 服务上的，所以需要安装 nodejs、Git。</p>\n<p>在购买服务器时，所买的服务器系统不同，对应的安装方法也不同。而我的服务器系统是 centos,下面没有特殊说明全部默认系统是 centos。其他系统可以在网上找到对应的方法。</p>\n<p>用 <a href=\"%22https://www.putty.org/%22\">PuTTY</a> 远程链接登录服务器，具体方法就不细讲了，教程网上都有。</p>\n<h3 id=\"安装-nodejs\"><a href=\"#安装-nodejs\" class=\"headerlink\" title=\"安装 nodejs\"></a>安装 nodejs</h3><p><strong>方法一：从 EPEL 库安装 Node.js</strong></p>\n<p>安装 Node.js 的一个有效且简单的方法就是从官方库下载安装，首先确保您可以访问到 EPEL 库，您可以通过运行以下命令来安装。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install epel-release</span><br></pre></td></tr></table></figure>\n\n<p>现在可以使用 yum 命令安装 Node.js 了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install nodejs</span><br></pre></td></tr></table></figure>\n\n<p>好的，检查下是否安装成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># node --version</span></span><br><span class=\"line\">v6.12.2</span><br><span class=\"line\"><span class=\"comment\"># npm --version</span></span><br><span class=\"line\">3.10.10</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，用这种方法安装的话，版本比较旧。</p>\n<p><strong>方法二：下载源代码，编译安装</strong></p>\n<p>去官网找到最新的或者是您想要的 node.js 版本，复制 url，在 CentOS 中用 wget 下载。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://nodejs.org/dist/v8.9.4/node-v8.9.4.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>解压：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf node-v8.9.4.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>进入目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> node-v8.9.4</span><br></pre></td></tr></table></figure>\n\n<p>配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure</span><br></pre></td></tr></table></figure>\n\n<p>编译：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n\n<p>安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n\n<p>老样子，检查下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># node --version</span></span><br><span class=\"line\">v8.9.4</span><br><span class=\"line\"><span class=\"comment\"># npm --version</span></span><br><span class=\"line\">5.6.0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装-Git\"><a href=\"#安装-Git\" class=\"headerlink\" title=\"安装 Git\"></a>安装 Git</h3><p>同样可以两种方式安装</p>\n<p><strong>用 Yum 安装 Git</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install git</span><br></pre></td></tr></table></figure>\n\n<p>如果命令完成而没有错误，你将有 git 下载和安装。 要检查它是否正常工作，尝试运行 Git 的内置版本检查</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git --version</span><br></pre></td></tr></table></figure>\n\n<p>成功输出一个版本号的话，就是安装完成了。</p>\n<p><strong>从源代码安装 Git</strong></p>\n<p>安装依赖包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel</span><br><span class=\"line\">yum install  gcc perl-ExtUtils-MakeMaker</span><br></pre></td></tr></table></figure>\n\n<p>下载&amp;解压</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://www.kernel.org/pub/software/scm/git/git-2.5.0.tar.gz</span><br><span class=\"line\">tar -zxvf git-2.5.0.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>编译安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> git-2.5.0</span><br><span class=\"line\">make prefix=/usr/local/git all</span><br><span class=\"line\">make prefix=/usr/local/git install</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;export PATH=<span class=\"variable\">$PATH</span>:/usr/local/git/bin&quot;</span> &gt;&gt; /etc/bashrc</span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/bashrc</span><br></pre></td></tr></table></figure>\n\n<p>检查版本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git --version</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：如果安装完查看版本不是我们安装的最新版，说明之前安装过其他版本的 git， 请重新执行下面的操作</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum remove -y git</span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/bashrc</span><br></pre></td></tr></table></figure>\n\n<p>到此为止项目的运行环境已经安装好了。</p>\n<p>下面，开始编译运行项目。</p>\n<h2 id=\"部署运行项目\"><a href=\"#部署运行项目\" class=\"headerlink\" title=\"部署运行项目\"></a>部署运行项目</h2><p>进入到服务器根目录下，用 git 命令把远程仓库中要部署的项目拉取下来。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> git-url</span><br></pre></td></tr></table></figure>\n\n<p>进入项目文件夹，安装依赖，编译打包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i <span class=\"comment\"># 安装依赖</span></span><br><span class=\"line\">npm run build <span class=\"comment\"># 编译打包</span></span><br></pre></td></tr></table></figure>\n\n<p>运行自己编写的 node 服务文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node prod.server.js</span><br></pre></td></tr></table></figure>\n\n<p>此时就可以通过服务器+端口访问项目。</p>\n<p>等等，一旦我们退出远程链接，就会发现页面无法访问了。这是怎么回事啊？总不能一直登录远程链接啊。</p>\n<p>原来事刚才开启的 node 服务无法常驻。可以将刚才的 node 命令变为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">nohup</span> node prod.server.js &amp;</span><br></pre></td></tr></table></figure>\n\n<p>这样就能保持进程常驻了。也可以用第三方库<a href=\"%22http://pm2.keymetrics.io/%22\">pm2</a>来达到晶晨常驻的目的。</p>\n<h3 id=\"Nginx-配置多项目方案\"><a href=\"#Nginx-配置多项目方案\" class=\"headerlink\" title=\"Nginx 配置多项目方案\"></a>Nginx 配置多项目方案</h3><p>现在是可以通过服务器地址和端口号来访问项目的，但是我有多个项目放在一个服务器上，而且我也不想每次都输入端口号来访问，太不雅观。</p>\n<p>那么有没有办法可以通过 <code>http://域名/xxx</code> 的方式来访问不同的项目呢? 是可以的。我们可以利用 nginx 的反向代理来实现。</p>\n<p>nginx 的下载安装就不介绍了，可以自己搜索解决。</p>\n<h3 id=\"配置反向代理\"><a href=\"#配置反向代理\" class=\"headerlink\" title=\"配置反向代理\"></a>配置反向代理</h3><p>nginx 文件夹下的 <code>/conf/nginx.conf</code> 是 nginx 服务器的配置文件。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/CTIh5reKSdciu28.png\" alt=\"20190729170916\"></p>\n<p>其中 <code>location /sell/&#123;&#125;</code>,<code>location /music/</code> 都是新增的反向代理配置，最重要的一句就是</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy_pass http://127.0.0.1:8900/ <span class=\"comment\"># 最后一定要有反斜杠 /</span></span><br></pre></td></tr></table></figure>\n\n<p>意思是将<code>/sell</code>请求转发到本地服务器的<code>8900</code>端口。其他项目同理。</p>\n<p>现在我们就可以通过 <code>域名/music</code> 来访问项目了。输入地址回车，what？页面什么都没有。</p>\n<p>不要急，F12 打开开发者模式，切换到 Network。发现页面是完全可以请求下来的，但是 css 文件的路径好像有点不对。现在 css 文件的路径是<code>域名/css/a.css</code>，很明显不对，正确的路径应该是<code>域名/music/css/a.css</code>。</p>\n<p>这是由于 vue 脚手架的配置有关。在脚手架里有个<code>baseUrl</code>的配置，默认是<code>/</code>，也就是默认是绝对路径，相对于根目录拼接绝对路径（这里就是域名）。那么修改<code>baseUrl</code>为相对路径，其实就是为空。</p>\n<p>同样的，绝对路径的 api 也有相同的问题。这种情况有两种方法解决。</p>\n<p>一、采用相对路径</p>\n<p>简单来说就是去掉 api 绝对路径最前面的<code>/</code>，变成相对路径。</p>\n<p>二、使用环境变量和模式。</p>\n<p>通过 <code>process.env.NODE_ENV</code> 可以拿到项目运行所在的环境，这样我们就是根据环境的不同预先设置好 api 接口路径，项目在 <code>development</code> 和 <code>production</code> 两个环境下分别加载对应的接口路径。做到了开发与发布两不耽误。</p>\n<p>本地运行测下，没问题就重新用<code>git</code>提交下更新。</p>\n<p>再次远程登录服务器，进入项目目录<code>git pull</code> 拉取更新，重新编译运行。在浏览器输入地址，测试无错的话反向代理就全部完成了。</p>\n<p>剩下的就是启动所有配置代理项目的 node 服务了。</p>\n<p>好了，现在我们可以使用域名来访问服务器上所有项目了。大功告成！！！</p>\n","site":{"data":{}},"length":1690,"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>目前公司和我个人所用的技术栈都是 vue 全家桶，平时自己也会做些个人项目。对很多人来说项目开发完就没我什么事了。这怎么行呢，自己辛辛苦苦的劳动成果怎么能不分享给别人，亮瞎他们的眼呢。所以，让我们动起手来。</p>\n<h2 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h2><p>首先你得有个服务器，当然有个域名的话就更好了。云服务可以直接在网上买一个，最低配的就可以了（有钱的老板可以无视）。接着备案域名，等个十天半月的，备案通过了，就可以将域名和服务器绑定起来，直接通过域名访问服务器里面的内容。（没有域名的就直接服务器 IP 访问）</p>\n<h2 id=\"安装环境\"><a href=\"#安装环境\" class=\"headerlink\" title=\"安装环境\"></a>安装环境</h2><p>我们将本地项目托管到 Github 上，再通过 Git 在服务器上拉去代码实现代码的同步。同时 vue 项目事运行在 node 服务上的，所以需要安装 nodejs、Git。</p>\n<p>在购买服务器时，所买的服务器系统不同，对应的安装方法也不同。而我的服务器系统是 centos,下面没有特殊说明全部默认系统是 centos。其他系统可以在网上找到对应的方法。</p>\n<p>用 <a href=\"%22https://www.putty.org/%22\">PuTTY</a> 远程链接登录服务器，具体方法就不细讲了，教程网上都有。</p>\n<h3 id=\"安装-nodejs\"><a href=\"#安装-nodejs\" class=\"headerlink\" title=\"安装 nodejs\"></a>安装 nodejs</h3><p><strong>方法一：从 EPEL 库安装 Node.js</strong></p>\n<p>安装 Node.js 的一个有效且简单的方法就是从官方库下载安装，首先确保您可以访问到 EPEL 库，您可以通过运行以下命令来安装。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install epel-release</span><br></pre></td></tr></table></figure>\n\n<p>现在可以使用 yum 命令安装 Node.js 了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install nodejs</span><br></pre></td></tr></table></figure>\n\n<p>好的，检查下是否安装成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># node --version</span></span><br><span class=\"line\">v6.12.2</span><br><span class=\"line\"><span class=\"comment\"># npm --version</span></span><br><span class=\"line\">3.10.10</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，用这种方法安装的话，版本比较旧。</p>\n<p><strong>方法二：下载源代码，编译安装</strong></p>\n<p>去官网找到最新的或者是您想要的 node.js 版本，复制 url，在 CentOS 中用 wget 下载。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://nodejs.org/dist/v8.9.4/node-v8.9.4.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>解压：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf node-v8.9.4.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>进入目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> node-v8.9.4</span><br></pre></td></tr></table></figure>\n\n<p>配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure</span><br></pre></td></tr></table></figure>\n\n<p>编译：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n\n<p>安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n\n<p>老样子，检查下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># node --version</span></span><br><span class=\"line\">v8.9.4</span><br><span class=\"line\"><span class=\"comment\"># npm --version</span></span><br><span class=\"line\">5.6.0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装-Git\"><a href=\"#安装-Git\" class=\"headerlink\" title=\"安装 Git\"></a>安装 Git</h3><p>同样可以两种方式安装</p>\n<p><strong>用 Yum 安装 Git</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install git</span><br></pre></td></tr></table></figure>\n\n<p>如果命令完成而没有错误，你将有 git 下载和安装。 要检查它是否正常工作，尝试运行 Git 的内置版本检查</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git --version</span><br></pre></td></tr></table></figure>\n\n<p>成功输出一个版本号的话，就是安装完成了。</p>\n<p><strong>从源代码安装 Git</strong></p>\n<p>安装依赖包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel</span><br><span class=\"line\">yum install  gcc perl-ExtUtils-MakeMaker</span><br></pre></td></tr></table></figure>\n\n<p>下载&amp;解压</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://www.kernel.org/pub/software/scm/git/git-2.5.0.tar.gz</span><br><span class=\"line\">tar -zxvf git-2.5.0.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>编译安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> git-2.5.0</span><br><span class=\"line\">make prefix=/usr/local/git all</span><br><span class=\"line\">make prefix=/usr/local/git install</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;export PATH=<span class=\"variable\">$PATH</span>:/usr/local/git/bin&quot;</span> &gt;&gt; /etc/bashrc</span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/bashrc</span><br></pre></td></tr></table></figure>\n\n<p>检查版本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git --version</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：如果安装完查看版本不是我们安装的最新版，说明之前安装过其他版本的 git， 请重新执行下面的操作</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum remove -y git</span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/bashrc</span><br></pre></td></tr></table></figure>\n\n<p>到此为止项目的运行环境已经安装好了。</p>\n<p>下面，开始编译运行项目。</p>\n<h2 id=\"部署运行项目\"><a href=\"#部署运行项目\" class=\"headerlink\" title=\"部署运行项目\"></a>部署运行项目</h2><p>进入到服务器根目录下，用 git 命令把远程仓库中要部署的项目拉取下来。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> git-url</span><br></pre></td></tr></table></figure>\n\n<p>进入项目文件夹，安装依赖，编译打包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i <span class=\"comment\"># 安装依赖</span></span><br><span class=\"line\">npm run build <span class=\"comment\"># 编译打包</span></span><br></pre></td></tr></table></figure>\n\n<p>运行自己编写的 node 服务文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node prod.server.js</span><br></pre></td></tr></table></figure>\n\n<p>此时就可以通过服务器+端口访问项目。</p>\n<p>等等，一旦我们退出远程链接，就会发现页面无法访问了。这是怎么回事啊？总不能一直登录远程链接啊。</p>\n<p>原来事刚才开启的 node 服务无法常驻。可以将刚才的 node 命令变为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">nohup</span> node prod.server.js &amp;</span><br></pre></td></tr></table></figure>\n\n<p>这样就能保持进程常驻了。也可以用第三方库<a href=\"%22http://pm2.keymetrics.io/%22\">pm2</a>来达到晶晨常驻的目的。</p>\n<h3 id=\"Nginx-配置多项目方案\"><a href=\"#Nginx-配置多项目方案\" class=\"headerlink\" title=\"Nginx 配置多项目方案\"></a>Nginx 配置多项目方案</h3><p>现在是可以通过服务器地址和端口号来访问项目的，但是我有多个项目放在一个服务器上，而且我也不想每次都输入端口号来访问，太不雅观。</p>\n<p>那么有没有办法可以通过 <code>http://域名/xxx</code> 的方式来访问不同的项目呢? 是可以的。我们可以利用 nginx 的反向代理来实现。</p>\n<p>nginx 的下载安装就不介绍了，可以自己搜索解决。</p>\n<h3 id=\"配置反向代理\"><a href=\"#配置反向代理\" class=\"headerlink\" title=\"配置反向代理\"></a>配置反向代理</h3><p>nginx 文件夹下的 <code>/conf/nginx.conf</code> 是 nginx 服务器的配置文件。</p>\n<p><img src=\"https://s2.loli.net/2024/01/08/CTIh5reKSdciu28.png\" alt=\"20190729170916\"></p>\n<p>其中 <code>location /sell/&#123;&#125;</code>,<code>location /music/</code> 都是新增的反向代理配置，最重要的一句就是</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy_pass http://127.0.0.1:8900/ <span class=\"comment\"># 最后一定要有反斜杠 /</span></span><br></pre></td></tr></table></figure>\n\n<p>意思是将<code>/sell</code>请求转发到本地服务器的<code>8900</code>端口。其他项目同理。</p>\n<p>现在我们就可以通过 <code>域名/music</code> 来访问项目了。输入地址回车，what？页面什么都没有。</p>\n<p>不要急，F12 打开开发者模式，切换到 Network。发现页面是完全可以请求下来的，但是 css 文件的路径好像有点不对。现在 css 文件的路径是<code>域名/css/a.css</code>，很明显不对，正确的路径应该是<code>域名/music/css/a.css</code>。</p>\n<p>这是由于 vue 脚手架的配置有关。在脚手架里有个<code>baseUrl</code>的配置，默认是<code>/</code>，也就是默认是绝对路径，相对于根目录拼接绝对路径（这里就是域名）。那么修改<code>baseUrl</code>为相对路径，其实就是为空。</p>\n<p>同样的，绝对路径的 api 也有相同的问题。这种情况有两种方法解决。</p>\n<p>一、采用相对路径</p>\n<p>简单来说就是去掉 api 绝对路径最前面的<code>/</code>，变成相对路径。</p>\n<p>二、使用环境变量和模式。</p>\n<p>通过 <code>process.env.NODE_ENV</code> 可以拿到项目运行所在的环境，这样我们就是根据环境的不同预先设置好 api 接口路径，项目在 <code>development</code> 和 <code>production</code> 两个环境下分别加载对应的接口路径。做到了开发与发布两不耽误。</p>\n<p>本地运行测下，没问题就重新用<code>git</code>提交下更新。</p>\n<p>再次远程登录服务器，进入项目目录<code>git pull</code> 拉取更新，重新编译运行。在浏览器输入地址，测试无错的话反向代理就全部完成了。</p>\n<p>剩下的就是启动所有配置代理项目的 node 服务了。</p>\n<p>好了，现在我们可以使用域名来访问服务器上所有项目了。大功告成！！！</p>\n"},{"title":"如何在离线环境查看echarts文档","date":"2024-03-07T01:59:09.000Z","_content":"\n## 背景\nECharts是一个使用 JavaScript 实现的开源可视化库，涵盖各行业图表，满足各种需求。但是其每个图表的配置项繁杂，开发过程中免不了要经常查看说明文档。\n\n那么如何在离线环境查看echarts文档呢？\n\n## 部署方式\n\n1. 下载 [echarts-website](https://github.com/apache/echarts-website \"echarts-website\") 文件解压并放置在 Nginx服务器中\n2. 修改nginx.conf文件如下\n```\n location / {\n            root   html/echarts-website;\n            index  index.html index.htm;\n \t\t   try_files $uri $uri/ /index.html;\n       }\n\n\tlocation /echarts-website {\n\t\talias html/echarts-website;\n\t\tindex  index.html index.htm;\n \t\ttry_files $uri $uri/ /index.html;\n\t}\n\t```\n3. 启动nginx服务，访问```127.0.0.1/echarts-website```即可，得到如下页面即成功\n   **注意：**访问路径，其中 echarts-website 是写死的路径。\n\n![image-20240307100038892](https://s2.loli.net/2024/03/07/AwG7BC6KkLZp1ub.png)","source":"_posts/如何在离线环境查看echarts文档.md","raw":"---\ntitle: 如何在离线环境查看echarts文档\ndate: 2024-03-07 09:59:09\ntags:\n    - 离线\n    - echarts\n---\n\n## 背景\nECharts是一个使用 JavaScript 实现的开源可视化库，涵盖各行业图表，满足各种需求。但是其每个图表的配置项繁杂，开发过程中免不了要经常查看说明文档。\n\n那么如何在离线环境查看echarts文档呢？\n\n## 部署方式\n\n1. 下载 [echarts-website](https://github.com/apache/echarts-website \"echarts-website\") 文件解压并放置在 Nginx服务器中\n2. 修改nginx.conf文件如下\n```\n location / {\n            root   html/echarts-website;\n            index  index.html index.htm;\n \t\t   try_files $uri $uri/ /index.html;\n       }\n\n\tlocation /echarts-website {\n\t\talias html/echarts-website;\n\t\tindex  index.html index.htm;\n \t\ttry_files $uri $uri/ /index.html;\n\t}\n\t```\n3. 启动nginx服务，访问```127.0.0.1/echarts-website```即可，得到如下页面即成功\n   **注意：**访问路径，其中 echarts-website 是写死的路径。\n\n![image-20240307100038892](https://s2.loli.net/2024/03/07/AwG7BC6KkLZp1ub.png)","slug":"如何在离线环境查看echarts文档","published":1,"updated":"2024-03-07T02:01:11.292Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltgl0ecs0000rkip6c605kyh","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>ECharts是一个使用 JavaScript 实现的开源可视化库，涵盖各行业图表，满足各种需求。但是其每个图表的配置项繁杂，开发过程中免不了要经常查看说明文档。</p>\n<p>那么如何在离线环境查看echarts文档呢？</p>\n<h2 id=\"部署方式\"><a href=\"#部署方式\" class=\"headerlink\" title=\"部署方式\"></a>部署方式</h2><ol>\n<li>下载 <a href=\"https://github.com/apache/echarts-website\" title=\"echarts-website\">echarts-website</a> 文件解压并放置在 Nginx服务器中</li>\n<li>修改nginx.conf文件如下<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\">           root   html/echarts-website;</span><br><span class=\"line\">           index  index.html index.htm;</span><br><span class=\"line\">\t\t   try_files $uri $uri/ /index.html;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">location /echarts-website &#123;</span><br><span class=\"line\">\talias html/echarts-website;</span><br><span class=\"line\">\tindex  index.html index.htm;</span><br><span class=\"line\">\t\ttry_files $uri $uri/ /index.html;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>启动nginx服务，访问<code>127.0.0.1/echarts-website</code>即可，得到如下页面即成功<br><strong>注意：</strong>访问路径，其中 echarts-website 是写死的路径。</li>\n</ol>\n<p><img src=\"https://s2.loli.net/2024/03/07/AwG7BC6KkLZp1ub.png\" alt=\"image-20240307100038892\"></p>\n","site":{"data":{}},"length":172,"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>ECharts是一个使用 JavaScript 实现的开源可视化库，涵盖各行业图表，满足各种需求。但是其每个图表的配置项繁杂，开发过程中免不了要经常查看说明文档。</p>\n<p>那么如何在离线环境查看echarts文档呢？</p>\n<h2 id=\"部署方式\"><a href=\"#部署方式\" class=\"headerlink\" title=\"部署方式\"></a>部署方式</h2><ol>\n<li>下载 <a href=\"https://github.com/apache/echarts-website\" title=\"echarts-website\">echarts-website</a> 文件解压并放置在 Nginx服务器中</li>\n<li>修改nginx.conf文件如下<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\">           root   html/echarts-website;</span><br><span class=\"line\">           index  index.html index.htm;</span><br><span class=\"line\">\t\t   try_files $uri $uri/ /index.html;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">location /echarts-website &#123;</span><br><span class=\"line\">\talias html/echarts-website;</span><br><span class=\"line\">\tindex  index.html index.htm;</span><br><span class=\"line\">\t\ttry_files $uri $uri/ /index.html;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>启动nginx服务，访问<code>127.0.0.1/echarts-website</code>即可，得到如下页面即成功<br><strong>注意：</strong>访问路径，其中 echarts-website 是写死的路径。</li>\n</ol>\n<p><img src=\"https://s2.loli.net/2024/03/07/AwG7BC6KkLZp1ub.png\" alt=\"image-20240307100038892\"></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"clrq64z5y0000soip2fqq250b","tag_id":"clrq64z640002soipfalt7vnp","_id":"clrq64z6g000bsoipan8c2je8"},{"post_id":"clrq64z5y0000soip2fqq250b","tag_id":"clrq64z6c0006soipco0aaba1","_id":"clrq64z6i000dsoip8dna2otp"},{"post_id":"clrq64z6i000fsoip5cw1372x","tag_id":"clrq64z6f0009soip2qjm3x8o","_id":"clrq64z6k000hsoiphy428w3n"},{"post_id":"clrq64z6i000fsoip5cw1372x","tag_id":"clrq64z6i000esoip1vqlfo8g","_id":"clrq64z6l000ksoip3y4scoy5"},{"post_id":"clrq64z6l000lsoip2d7qg4wp","tag_id":"clrq64z640002soipfalt7vnp","_id":"clrq64z6m000osoipe23y3vzu"},{"post_id":"clrq64z6m000psoipdn83g7jr","tag_id":"clrq64z640002soipfalt7vnp","_id":"clrq64z6t000ssoiphray1d36"},{"post_id":"clrq64z650003soipgslu9omx","tag_id":"clrq64z6f0009soip2qjm3x8o","_id":"clrq64z6u000usoip4z158hvv"},{"post_id":"clrq64z650003soipgslu9omx","tag_id":"clrq64z6i000esoip1vqlfo8g","_id":"clrq64z6v000xsoip6frrc8z9"},{"post_id":"clrq64z650003soipgslu9omx","tag_id":"clrq64z6k000isoipbsnwb69h","_id":"clrq64z6v000zsoiphcvifj73"},{"post_id":"clrq64z650003soipgslu9omx","tag_id":"clrq64z6m000nsoipap2z92fp","_id":"clrq64z6w0012soipgvx0fmp7"},{"post_id":"clrq64z660004soipgzvp5l3l","tag_id":"clrq64z6f0009soip2qjm3x8o","_id":"clrq64z6x0017soipd25r8wzu"},{"post_id":"clrq64z660004soipgzvp5l3l","tag_id":"clrq64z6i000esoip1vqlfo8g","_id":"clrq64z6y0019soipgw5ndw5l"},{"post_id":"clrq64z660004soipgzvp5l3l","tag_id":"clrq64z6m000nsoipap2z92fp","_id":"clrq64z6y001csoip67z2e9ai"},{"post_id":"clrq64z6y001bsoiph6hhcyov","tag_id":"clrq64z6f0009soip2qjm3x8o","_id":"clrq64z6z001fsoip1cqp69ga"},{"post_id":"clrq64z6y001bsoiph6hhcyov","tag_id":"clrq64z6i000esoip1vqlfo8g","_id":"clrq64z70001hsoipfrzvdk27"},{"post_id":"clrq64z6a0005soipem5sf5r8","tag_id":"clrq64z6f0009soip2qjm3x8o","_id":"clrq64z70001jsoip7hn316bd"},{"post_id":"clrq64z6a0005soipem5sf5r8","tag_id":"clrq64z6i000esoip1vqlfo8g","_id":"clrq64z70001ksoipbeb6feom"},{"post_id":"clrq64z6d0007soip1z5iaz2a","tag_id":"clrq64z6f0009soip2qjm3x8o","_id":"clrq64z70001msoipdgre8i1w"},{"post_id":"clrq64z6d0007soip1z5iaz2a","tag_id":"clrq64z6i000esoip1vqlfo8g","_id":"clrq64z70001nsoip1euo4jfx"},{"post_id":"clrq64z6e0008soipdohh42hc","tag_id":"clrq64z6f0009soip2qjm3x8o","_id":"clrq64z71001qsoipdjlng7z8"},{"post_id":"clrq64z6e0008soipdohh42hc","tag_id":"clrq64z6i000esoip1vqlfo8g","_id":"clrq64z71001rsoipaicr35c8"},{"post_id":"clrq64z6g000asoip92gme69k","tag_id":"clrq64z6f0009soip2qjm3x8o","_id":"clrq64z71001tsoip0scdbtoo"},{"post_id":"clrq64z6g000asoip92gme69k","tag_id":"clrq64z6i000esoip1vqlfo8g","_id":"clrq64z71001usoipbjzgfpz3"},{"post_id":"clrq64z6h000csoipe28k15rr","tag_id":"clrq64z6f0009soip2qjm3x8o","_id":"clrq64z72001wsoip89143bam"},{"post_id":"clrq64z6h000csoipe28k15rr","tag_id":"clrq64z6i000esoip1vqlfo8g","_id":"clrq64z72001xsoip2kmz6uq4"},{"post_id":"clrq64z6j000gsoip5hglabw0","tag_id":"clrq64z71001vsoip2edwgxoy","_id":"clrq64z720020soip8kuj5x8b"},{"post_id":"clrq64z6j000gsoip5hglabw0","tag_id":"clrq64z640002soipfalt7vnp","_id":"clrq64z720021soip0fqla0n3"},{"post_id":"clrq64z6j000gsoip5hglabw0","tag_id":"clrq64z72001ysoip8pimakz5","_id":"clrq64z720023soipg1uyb9ue"},{"post_id":"clrq64z6k000jsoipgk3xafho","tag_id":"clrq64z640002soipfalt7vnp","_id":"clrq64z720025soipak72aro7"},{"post_id":"clrq64z6k000jsoipgk3xafho","tag_id":"clrq64z72001zsoip72wc5dng","_id":"clrq64z730026soiphyqy239v"},{"post_id":"clrq64z6k000jsoipgk3xafho","tag_id":"clrq64z720022soip74y8b5td","_id":"clrq64z730028soipeo3jbi31"},{"post_id":"clrq64z6l000msoip3t5386jh","tag_id":"clrq64z720024soip5vmm0v8d","_id":"clrq64z730029soip9is4bn6t"},{"post_id":"clrq64z6p000qsoipcqv1cbq4","tag_id":"clrq64z730027soipf3rfgkig","_id":"clrq64z75002csoipfjhsf6lq"},{"post_id":"clrq64z6p000qsoipcqv1cbq4","tag_id":"clrq64z73002asoipci51fe17","_id":"clrq64z76002dsoip5w9gg0je"},{"post_id":"clrq64z6t000tsoipf27ned8w","tag_id":"clrq64z74002bsoipeyvi2su8","_id":"clrq64z78002fsoip3anxbvc4"},{"post_id":"clrq64z6u000vsoipdvjqgsrs","tag_id":"clrq64z76002esoipboqaborj","_id":"clrq64z79002isoipaf9o10ue"},{"post_id":"clrq64z6u000vsoipdvjqgsrs","tag_id":"clrq64z78002gsoipc5gs1k9e","_id":"clrq64z79002jsoiphvnre3sn"},{"post_id":"clrq64z6v000ysoipdx2lbb7r","tag_id":"clrq64z640002soipfalt7vnp","_id":"clrq64z7a002lsoip2wy7136g"},{"post_id":"clrq64z6v000ysoipdx2lbb7r","tag_id":"clrq64z79002hsoipae1l64aa","_id":"clrq64z7a002msoip65zf3lop"},{"post_id":"clrq64z6v0010soip1pmweax9","tag_id":"clrq64z79002ksoipd5rh3a77","_id":"clrq64z7a002osoip0jwybouy"},{"post_id":"clrq64z6w0013soipcvd7hdi5","tag_id":"clrq64z730027soipf3rfgkig","_id":"clrq64z7b002rsoip9f976egz"},{"post_id":"clrq64z6w0013soipcvd7hdi5","tag_id":"clrq64z73002asoipci51fe17","_id":"clrq64z7b002ssoip1hmfgz0p"},{"post_id":"clrq64z6w0014soipexu31y16","tag_id":"clrq64z7b002qsoip6ew3edso","_id":"clrq64z7b002vsoipd7jz5p9h"},{"post_id":"clrq64z6w0014soipexu31y16","tag_id":"clrq64z7b002tsoip32k5f1dh","_id":"clrq64z7c002wsoip8uxbdrgr"},{"post_id":"clrq64z6x0016soip6egn9ifj","tag_id":"clrq64z730027soipf3rfgkig","_id":"clrq64z7c002zsoiph8js7vd5"},{"post_id":"clrq64z6x0016soip6egn9ifj","tag_id":"clrq64z7c002xsoipgrpj20si","_id":"clrq64z7c0030soipebv7ho5u"},{"post_id":"clrq64z6x0018soip7hydfnto","tag_id":"clrq64z7b002tsoip32k5f1dh","_id":"clrq64z7c0032soip0wceccx9"},{"post_id":"clrq64z6z001dsoip7zkrb8qy","tag_id":"clrq64z7c0031soipbdrf439a","_id":"clrq64z7d0035soip89oi0ue4"},{"post_id":"clrq64z6z001dsoip7zkrb8qy","tag_id":"clrq64z7c0033soipb2zv6jov","_id":"clrq64z7d0036soip0r7qb1fh"},{"post_id":"clrq64z6z001gsoip3om05md5","tag_id":"clrq64z640002soipfalt7vnp","_id":"clrq64z7d0037soip2krzcu1t"},{"post_id":"clrq64z6z001gsoip3om05md5","tag_id":"clrq64z72001zsoip72wc5dng","_id":"clrq64z7d0038soip2arw3wj2"},{"post_id":"cltgl0ecs0000rkip6c605kyh","tag_id":"cltgl0ed00001rkipf39q4n0n","_id":"cltgl0ed50003rkipg6us75nh"},{"post_id":"cltgl0ecs0000rkip6c605kyh","tag_id":"cltgl0ed40002rkip3s5h2vel","_id":"cltgl0ed50004rkipc5cubwwz"}],"Tag":[{"name":"web","_id":"clrq64z640002soipfalt7vnp"},{"name":"email","_id":"clrq64z6c0006soipco0aaba1"},{"name":"webgl","_id":"clrq64z6f0009soip2qjm3x8o"},{"name":"cesium","_id":"clrq64z6i000esoip1vqlfo8g"},{"name":"vue3","_id":"clrq64z6k000isoipbsnwb69h"},{"name":"vite","_id":"clrq64z6m000nsoipap2z92fp"},{"name":"app","_id":"clrq64z71001vsoip2edwgxoy"},{"name":"cordova","_id":"clrq64z72001ysoip8pimakz5"},{"name":"nginx","_id":"clrq64z72001zsoip72wc5dng"},{"name":"docker","_id":"clrq64z720022soip74y8b5td"},{"name":"IE","_id":"clrq64z720024soip5vmm0v8d"},{"name":"canvas","_id":"clrq64z730027soipf3rfgkig"},{"name":"标注","_id":"clrq64z73002asoipci51fe17"},{"name":"git","_id":"clrq64z74002bsoipeyvi2su8"},{"name":"npm","_id":"clrq64z76002esoipboqaborj"},{"name":"私服","_id":"clrq64z78002gsoipc5gs1k9e"},{"name":"导出","_id":"clrq64z79002hsoipae1l64aa"},{"name":"知识图谱","_id":"clrq64z79002ksoipd5rh3a77"},{"name":"ios","_id":"clrq64z7b002qsoip6ew3edso"},{"name":"bug","_id":"clrq64z7b002tsoip32k5f1dh"},{"name":"svg","_id":"clrq64z7c002xsoipgrpj20si"},{"name":"地图","_id":"clrq64z7c0031soipbdrf439a"},{"name":"mapbox","_id":"clrq64z7c0033soipb2zv6jov"},{"name":"离线","_id":"cltgl0ed00001rkipf39q4n0n"},{"name":"echarts","_id":"cltgl0ed40002rkip3s5h2vel"}]}}